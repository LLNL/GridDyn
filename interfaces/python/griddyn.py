# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info

if _swig_python_version_info >= (2, 7, 0):

    def swig_import_helper():
        import importlib

        pkg = __name__.rpartition(".")[0]
        mname = ".".join((pkg, "_griddyn")).lstrip(".")
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module("_griddyn")

    _griddyn = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):

    def swig_import_helper():
        from os.path import dirname
        import imp

        fp = None
        try:
            fp, pathname, description = imp.find_module("_griddyn", [dirname(__file__)])
        except ImportError:
            import _griddyn

            return _griddyn
        try:
            _mod = imp.load_module("_griddyn", fp, pathname, description)
        finally:
            if fp is not None:
                fp.close()
        return _mod

    _griddyn = swig_import_helper()
    del swig_import_helper
else:
    import _griddyn
del _swig_python_version_info

try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__


def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if name == "thisown":
        return self.this.own(value)
    if name == "this":
        if type(value).__name__ == "SwigPyObject":
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if not static:
        if _newclass:
            object.__setattr__(self, name, value)
        else:
            self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if name == "thisown":
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


try:
    _object = object
    _newclass = 1
except __builtin__.Exception:

    class _object:
        pass

    _newclass = 0


def new_doublep():
    return _griddyn.new_doublep()


new_doublep = _griddyn.new_doublep


def copy_doublep(value):
    return _griddyn.copy_doublep(value)


copy_doublep = _griddyn.copy_doublep


def delete_doublep(obj):
    return _griddyn.delete_doublep(obj)


delete_doublep = _griddyn.delete_doublep


def doublep_assign(obj, value):
    return _griddyn.doublep_assign(obj, value)


doublep_assign = _griddyn.doublep_assign


def doublep_value(obj):
    return _griddyn.doublep_value(obj)


doublep_value = _griddyn.doublep_value


def new_charp():
    return _griddyn.new_charp()


new_charp = _griddyn.new_charp


def copy_charp(value):
    return _griddyn.copy_charp(value)


copy_charp = _griddyn.copy_charp


def delete_charp(obj):
    return _griddyn.delete_charp(obj)


delete_charp = _griddyn.delete_charp


def charp_assign(obj, value):
    return _griddyn.charp_assign(obj, value)


charp_assign = _griddyn.charp_assign


def charp_value(obj):
    return _griddyn.charp_value(obj)


charp_value = _griddyn.charp_value


class doubleArray(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, doubleArray, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, doubleArray, name)
    __repr__ = _swig_repr

    def __init__(self, nelements):
        this = _griddyn.new_doubleArray(nelements)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    __swig_destroy__ = _griddyn.delete_doubleArray

    def __getitem__(self, index):
        return _griddyn.doubleArray___getitem__(self, index)

    def __setitem__(self, index, value):
        return _griddyn.doubleArray___setitem__(self, index, value)

    def cast(self):
        return _griddyn.doubleArray_cast(self)

    if _newclass:
        frompointer = staticmethod(_griddyn.doubleArray_frompointer)
    else:
        frompointer = _griddyn.doubleArray_frompointer


doubleArray_swigregister = _griddyn.doubleArray_swigregister
doubleArray_swigregister(doubleArray)


def doubleArray_frompointer(t):
    return _griddyn.doubleArray_frompointer(t)


doubleArray_frompointer = _griddyn.doubleArray_frompointer

griddyn_ok = _griddyn.griddyn_ok
griddyn_invalid_object = _griddyn.griddyn_invalid_object
griddyn_invalid_parameter_value = _griddyn.griddyn_invalid_parameter_value
griddyn_unknown_parameter = _griddyn.griddyn_unknown_parameter
griddyn_add_failure = _griddyn.griddyn_add_failure
griddyn_remove_failure = _griddyn.griddyn_remove_failure
griddyn_query_load_failure = _griddyn.griddyn_query_load_failure
griddyn_file_load_failure = _griddyn.griddyn_file_load_failure
griddyn_solve_error = _griddyn.griddyn_solve_error
griddyn_object_not_initialized = _griddyn.griddyn_object_not_initialized
griddyn_invalid_function_call = _griddyn.griddyn_invalid_function_call
griddyn_function_failure = _griddyn.griddyn_function_failure
GRIDDYN_PENDING = _griddyn.GRIDDYN_PENDING
GRIDDYN_COMPLETE = _griddyn.GRIDDYN_COMPLETE


def gridDynObject_create(componentType, objectType):
    return _griddyn.gridDynObject_create(componentType, objectType)


gridDynObject_create = _griddyn.gridDynObject_create


def gridDynObject_clone(obj):
    return _griddyn.gridDynObject_clone(obj)


gridDynObject_clone = _griddyn.gridDynObject_clone


def gridDynObject_free(obj):
    return _griddyn.gridDynObject_free(obj)


gridDynObject_free = _griddyn.gridDynObject_free


def gridDynObject_add(parentObject, objectToAdd):
    return _griddyn.gridDynObject_add(parentObject, objectToAdd)


gridDynObject_add = _griddyn.gridDynObject_add


def gridDynObject_remove(parentObject, objectToRemove):
    return _griddyn.gridDynObject_remove(parentObject, objectToRemove)


gridDynObject_remove = _griddyn.gridDynObject_remove


def gridDynObject_setString(obj, parameter, value):
    return _griddyn.gridDynObject_setString(obj, parameter, value)


gridDynObject_setString = _griddyn.gridDynObject_setString


def gridDynObject_setValue(obj, parameter, value):
    return _griddyn.gridDynObject_setValue(obj, parameter, value)


gridDynObject_setValue = _griddyn.gridDynObject_setValue


def gridDynObject_setValueUnits(obj, parameter, value, units):
    return _griddyn.gridDynObject_setValueUnits(obj, parameter, value, units)


gridDynObject_setValueUnits = _griddyn.gridDynObject_setValueUnits


def gridDynObject_setFlag(obj, flag, val):
    return _griddyn.gridDynObject_setFlag(obj, flag, val)


gridDynObject_setFlag = _griddyn.gridDynObject_setFlag


def gridDynObject_getString(obj, parameter, value):
    return _griddyn.gridDynObject_getString(obj, parameter, value)


gridDynObject_getString = _griddyn.gridDynObject_getString


def gridDynObject_getValue(obj, parameter, result):
    return _griddyn.gridDynObject_getValue(obj, parameter, result)


gridDynObject_getValue = _griddyn.gridDynObject_getValue


def gridDynObject_getValueUnits(obj, parameter, units, result):
    return _griddyn.gridDynObject_getValueUnits(obj, parameter, units, result)


gridDynObject_getValueUnits = _griddyn.gridDynObject_getValueUnits


def gridDynObject_getFlag(obj, flag, result):
    return _griddyn.gridDynObject_getFlag(obj, flag, result)


gridDynObject_getFlag = _griddyn.gridDynObject_getFlag


def gridDynObject_find(obj, objectToFind):
    return _griddyn.gridDynObject_find(obj, objectToFind)


gridDynObject_find = _griddyn.gridDynObject_find


def gridDynObject_getSubObject(obj, componentType, N):
    return _griddyn.gridDynObject_getSubObject(obj, componentType, N)


gridDynObject_getSubObject = _griddyn.gridDynObject_getSubObject


def gridDynObject_findByUserId(obj, componentType, ID):
    return _griddyn.gridDynObject_findByUserId(obj, componentType, ID)


gridDynObject_findByUserId = _griddyn.gridDynObject_findByUserId


def gridDynObject_getParent(obj):
    return _griddyn.gridDynObject_getParent(obj)


gridDynObject_getParent = _griddyn.gridDynObject_getParent


def gridDynObject_getType(obj):
    return _griddyn.gridDynObject_getType(obj)


gridDynObject_getType = _griddyn.gridDynObject_getType


def gridDynSimulation_create(type, name):
    return _griddyn.gridDynSimulation_create(type, name)


gridDynSimulation_create = _griddyn.gridDynSimulation_create


def gridDynSimulation_free(sim):
    return _griddyn.gridDynSimulation_free(sim)


gridDynSimulation_free = _griddyn.gridDynSimulation_free


def gridDynSimulation_initializeFromString(sim, initializationString):
    return _griddyn.gridDynSimulation_initializeFromString(sim, initializationString)


gridDynSimulation_initializeFromString = _griddyn.gridDynSimulation_initializeFromString


def gridDynSimulation_initializeFromArgs(sim, argc, argv, ignoreUnrecognized):
    return _griddyn.gridDynSimulation_initializeFromArgs(sim, argc, argv, ignoreUnrecognized)


gridDynSimulation_initializeFromArgs = _griddyn.gridDynSimulation_initializeFromArgs


def gridDynSimulation_loadfile(sim, fileName, fileType):
    return _griddyn.gridDynSimulation_loadfile(sim, fileName, fileType)


gridDynSimulation_loadfile = _griddyn.gridDynSimulation_loadfile


def gridDynSimulation_addCommand(sim, command):
    return _griddyn.gridDynSimulation_addCommand(sim, command)


gridDynSimulation_addCommand = _griddyn.gridDynSimulation_addCommand


def gridDynSimulation_powerflowInitialize(sim):
    return _griddyn.gridDynSimulation_powerflowInitialize(sim)


gridDynSimulation_powerflowInitialize = _griddyn.gridDynSimulation_powerflowInitialize


def gridDynSimulation_powerflow(sim):
    return _griddyn.gridDynSimulation_powerflow(sim)


gridDynSimulation_powerflow = _griddyn.gridDynSimulation_powerflow


def gridDynSimulation_dynamicInitialize(sim):
    return _griddyn.gridDynSimulation_dynamicInitialize(sim)


gridDynSimulation_dynamicInitialize = _griddyn.gridDynSimulation_dynamicInitialize


def gridDynSimulation_reset(sim):
    return _griddyn.gridDynSimulation_reset(sim)


gridDynSimulation_reset = _griddyn.gridDynSimulation_reset


def gridDynSimulation_getCurrentTime(sim):
    return _griddyn.gridDynSimulation_getCurrentTime(sim)


gridDynSimulation_getCurrentTime = _griddyn.gridDynSimulation_getCurrentTime


def gridDynSimulation_run(sim):
    return _griddyn.gridDynSimulation_run(sim)


gridDynSimulation_run = _griddyn.gridDynSimulation_run


def gridDynSimulation_runTo(sim, runToTime):
    return _griddyn.gridDynSimulation_runTo(sim, runToTime)


gridDynSimulation_runTo = _griddyn.gridDynSimulation_runTo


def gridDynSimulation_Step(sim):
    return _griddyn.gridDynSimulation_Step(sim)


gridDynSimulation_Step = _griddyn.gridDynSimulation_Step


def gridDynSimulation_runAsync(sim):
    return _griddyn.gridDynSimulation_runAsync(sim)


gridDynSimulation_runAsync = _griddyn.gridDynSimulation_runAsync


def gridDynSimulation_runToAsync(sim, runToTime):
    return _griddyn.gridDynSimulation_runToAsync(sim, runToTime)


gridDynSimulation_runToAsync = _griddyn.gridDynSimulation_runToAsync


def gridDynSimulation_StepAsync(sim):
    return _griddyn.gridDynSimulation_StepAsync(sim)


gridDynSimulation_StepAsync = _griddyn.gridDynSimulation_StepAsync


def gridDynSimulation_getStatus(sim):
    return _griddyn.gridDynSimulation_getStatus(sim)


gridDynSimulation_getStatus = _griddyn.gridDynSimulation_getStatus


def getSimulationObject(sim):
    return _griddyn.getSimulationObject(sim)


getSimulationObject = _griddyn.getSimulationObject


def gridDynSimulation_getSolverKey(sim, solverType):
    return _griddyn.gridDynSimulation_getSolverKey(sim, solverType)


gridDynSimulation_getSolverKey = _griddyn.gridDynSimulation_getSolverKey


def gridDynSolverKey_free(key):
    return _griddyn.gridDynSolverKey_free(key)


gridDynSolverKey_free = _griddyn.gridDynSolverKey_free


def gridDynSimulation_stateSize(sim, key):
    return _griddyn.gridDynSimulation_stateSize(sim, key)


gridDynSimulation_stateSize = _griddyn.gridDynSimulation_stateSize


def gridDynSimulation_busCount(sim):
    return _griddyn.gridDynSimulation_busCount(sim)


gridDynSimulation_busCount = _griddyn.gridDynSimulation_busCount


def gridDynSimulation_lineCount(sim):
    return _griddyn.gridDynSimulation_lineCount(sim)


gridDynSimulation_lineCount = _griddyn.gridDynSimulation_lineCount


def gridDynSimulation_getResults(*args):
    return _griddyn.gridDynSimulation_getResults(*args)


gridDynSimulation_getResults = _griddyn.gridDynSimulation_getResults


def gridDynSimulation_guessState(sim, time, states, dstate_dt, key):
    return _griddyn.gridDynSimulation_guessState(sim, time, states, dstate_dt, key)


gridDynSimulation_guessState = _griddyn.gridDynSimulation_guessState


def gridDynSimulation_setState(sim, time, states, dstate_dt, key):
    return _griddyn.gridDynSimulation_setState(sim, time, states, dstate_dt, key)


gridDynSimulation_setState = _griddyn.gridDynSimulation_setState


def gridDynSimulation_getStateVariableTypes(sim, types, key):
    return _griddyn.gridDynSimulation_getStateVariableTypes(sim, types, key)


gridDynSimulation_getStateVariableTypes = _griddyn.gridDynSimulation_getStateVariableTypes


def gridDynSimulation_residual(sim, time, resid, states, dstate_dt, key):
    return _griddyn.gridDynSimulation_residual(sim, time, resid, states, dstate_dt, key)


gridDynSimulation_residual = _griddyn.gridDynSimulation_residual


def gridDynSimulation_derivative(sim, time, deriv, states, key):
    return _griddyn.gridDynSimulation_derivative(sim, time, deriv, states, key)


gridDynSimulation_derivative = _griddyn.gridDynSimulation_derivative


def gridDynSimulation_algebraicUpdate(sim, time, update, states, alpha, key):
    return _griddyn.gridDynSimulation_algebraicUpdate(sim, time, update, states, alpha, key)


gridDynSimulation_algebraicUpdate = _griddyn.gridDynSimulation_algebraicUpdate


def gridDynSimulation_jacobian(sim, time, states, dstate_dt, cj, key, insert):
    return _griddyn.gridDynSimulation_jacobian(sim, time, states, dstate_dt, cj, key, insert)


gridDynSimulation_jacobian = _griddyn.gridDynSimulation_jacobian


def gridDynSingleQuery_create(obj, queryString):
    return _griddyn.gridDynSingleQuery_create(obj, queryString)


gridDynSingleQuery_create = _griddyn.gridDynSingleQuery_create


def gridDynVectorQuery_create(obj, queryString):
    return _griddyn.gridDynVectorQuery_create(obj, queryString)


gridDynVectorQuery_create = _griddyn.gridDynVectorQuery_create


def gridDynSingleQuery_free(query):
    return _griddyn.gridDynSingleQuery_free(query)


gridDynSingleQuery_free = _griddyn.gridDynSingleQuery_free


def gridDynVectorQuery_free(query):
    return _griddyn.gridDynVectorQuery_free(query)


gridDynVectorQuery_free = _griddyn.gridDynVectorQuery_free


def gridDynSingleQuery_run(query):
    return _griddyn.gridDynSingleQuery_run(query)


gridDynSingleQuery_run = _griddyn.gridDynSingleQuery_run


def gridDynVectorQuery_run(query, data, N):
    return _griddyn.gridDynVectorQuery_run(query, data, N)


gridDynVectorQuery_run = _griddyn.gridDynVectorQuery_run


def gridDynVectorQuery_append(query, obj, queryString):
    return _griddyn.gridDynVectorQuery_append(query, obj, queryString)


gridDynVectorQuery_append = _griddyn.gridDynVectorQuery_append


def gridDynSingleQuery_update(query, obj, queryString):
    return _griddyn.gridDynSingleQuery_update(query, obj, queryString)


gridDynSingleQuery_update = _griddyn.gridDynSingleQuery_update


def gridDynVectorQuery_update(query, obj, queryString):
    return _griddyn.gridDynVectorQuery_update(query, obj, queryString)


gridDynVectorQuery_update = _griddyn.gridDynVectorQuery_update


def gridDynEvent_create(eventString, obj):
    return _griddyn.gridDynEvent_create(eventString, obj)


gridDynEvent_create = _griddyn.gridDynEvent_create


def gridDynEvent_free(evnt):
    return _griddyn.gridDynEvent_free(evnt)


gridDynEvent_free = _griddyn.gridDynEvent_free


def gridDynEvent_trigger(evnt):
    return _griddyn.gridDynEvent_trigger(evnt)


gridDynEvent_trigger = _griddyn.gridDynEvent_trigger


def gridDynEvent_schedule(evnt, sim):
    return _griddyn.gridDynEvent_schedule(evnt, sim)


gridDynEvent_schedule = _griddyn.gridDynEvent_schedule


def gridDynEvent_setValue(evnt, parameter, value):
    return _griddyn.gridDynEvent_setValue(evnt, parameter, value)


gridDynEvent_setValue = _griddyn.gridDynEvent_setValue


def gridDynEvent_setString(evnt, parameter, value):
    return _griddyn.gridDynEvent_setString(evnt, parameter, value)


gridDynEvent_setString = _griddyn.gridDynEvent_setString


def gridDynEvent_setFlag(evnt, flag, val):
    return _griddyn.gridDynEvent_setFlag(evnt, flag, val)


gridDynEvent_setFlag = _griddyn.gridDynEvent_setFlag


def gridDynEvent_setTarget(evnt, obj):
    return _griddyn.gridDynEvent_setTarget(evnt, obj)


gridDynEvent_setTarget = _griddyn.gridDynEvent_setTarget


def gridDynObject_stateSize(obj, key):
    return _griddyn.gridDynObject_stateSize(obj, key)


gridDynObject_stateSize = _griddyn.gridDynObject_stateSize


def gridDynObject_guessState(obj, time, states, dstate_dt, key):
    return _griddyn.gridDynObject_guessState(obj, time, states, dstate_dt, key)


gridDynObject_guessState = _griddyn.gridDynObject_guessState


def gridDynObject_setState(obj, time, states, dstate_dt, key):
    return _griddyn.gridDynObject_setState(obj, time, states, dstate_dt, key)


gridDynObject_setState = _griddyn.gridDynObject_setState


def gridDynObject_getStateVariableTypes(obj, types, key):
    return _griddyn.gridDynObject_getStateVariableTypes(obj, types, key)


gridDynObject_getStateVariableTypes = _griddyn.gridDynObject_getStateVariableTypes


def gridDynObject_residual(obj, inputs, inputSize, resid, key):
    return _griddyn.gridDynObject_residual(obj, inputs, inputSize, resid, key)


gridDynObject_residual = _griddyn.gridDynObject_residual


def gridDynObject_derivative(obj, inputs, inputSize, deriv, key):
    return _griddyn.gridDynObject_derivative(obj, inputs, inputSize, deriv, key)


gridDynObject_derivative = _griddyn.gridDynObject_derivative


def gridDynObject_algebraicUpdate(obj, inputs, inputSize, update, alpha, key):
    return _griddyn.gridDynObject_algebraicUpdate(obj, inputs, inputSize, update, alpha, key)


gridDynObject_algebraicUpdate = _griddyn.gridDynObject_algebraicUpdate


def gridDynObject_jacobian(obj, inputs, inputSize, cj, insert, key):
    return _griddyn.gridDynObject_jacobian(obj, inputs, inputSize, cj, insert, key)


gridDynObject_jacobian = _griddyn.gridDynObject_jacobian


def gridDynObject_ioPartialDerivatives(obj, inputs, inputSize, insert, key):
    return _griddyn.gridDynObject_ioPartialDerivatives(obj, inputs, inputSize, insert, key)


gridDynObject_ioPartialDerivatives = _griddyn.gridDynObject_ioPartialDerivatives


def gridDynObject_outputPartialDerivatives(obj, inputs, inputSize, insert, key):
    return _griddyn.gridDynObject_outputPartialDerivatives(obj, inputs, inputSize, insert, key)


gridDynObject_outputPartialDerivatives = _griddyn.gridDynObject_outputPartialDerivatives
# This file is compatible with both classic and new-style classes.
