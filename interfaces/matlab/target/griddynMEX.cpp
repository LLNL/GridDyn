/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 3.0.11
 *
 * This file is not intended to be easily readable and contains a number of
 * coding conventions designed to improve portability and efficiency. Do not make
 * changes to this file unless you know what you are doing--modify the SWIG
 * interface file instead.
 * ----------------------------------------------------------------------------- */

#define SWIGMATLAB
#define SWIG_name_d "griddyn"
#define SWIG_name griddyn

#define SWIG_op_prefix "op_"
#define SWIG_pkg_name "griddyn"
#define SwigVar_mxArray mxArray*

#ifdef __cplusplus
/* SwigValueWrapper is described in swig.swg */
template<typename T>
class SwigValueWrapper {
    struct SwigMovePointer {
        T* ptr;
        SwigMovePointer(T* p): ptr(p) {}
        ~SwigMovePointer() { delete ptr; }
        SwigMovePointer& operator=(SwigMovePointer& rhs)
        {
            T* oldptr = ptr;
            ptr = 0;
            delete oldptr;
            ptr = rhs.ptr;
            rhs.ptr = 0;
            return *this;
        }
    } pointer;
    SwigValueWrapper& operator=(const SwigValueWrapper<T>& rhs);
    SwigValueWrapper(const SwigValueWrapper<T>& rhs);

  public:
    SwigValueWrapper(): pointer(0) {}
    SwigValueWrapper& operator=(const T& t)
    {
        SwigMovePointer tmp(new T(t));
        pointer = tmp;
        return *this;
    }
    operator T&() const { return *pointer.ptr; }
    T* operator&() { return pointer.ptr; }
};

template<typename T>
T SwigValueInit()
{
    return T();
}
#endif

/* -----------------------------------------------------------------------------
 *  This section contains generic SWIG labels for method/variable
 *  declarations/attributes, and other compiler dependent labels.
 * ----------------------------------------------------------------------------- */

/* template workaround for compilers that cannot correctly implement the C++ standard */
#ifndef SWIGTEMPLATEDISAMBIGUATOR
#    if defined(__SUNPRO_CC) && (__SUNPRO_CC <= 0x560)
#        define SWIGTEMPLATEDISAMBIGUATOR template
#    elif defined(__HP_aCC)
/* Needed even with `aCC -AA' when `aCC -V' reports HP ANSI C++ B3910B A.03.55 */
/* If we find a maximum version that requires this, the test would be __HP_aCC <= 35500 for A.03.55
 */
#        define SWIGTEMPLATEDISAMBIGUATOR template
#    else
#        define SWIGTEMPLATEDISAMBIGUATOR
#    endif
#endif

/* inline attribute */
#ifndef SWIGINLINE
#    if defined(__cplusplus) || (defined(__GNUC__) && !defined(__STRICT_ANSI__))
#        define SWIGINLINE inline
#    else
#        define SWIGINLINE
#    endif
#endif

/* attribute recognised by some compilers to avoid 'unused' warnings */
#ifndef SWIGUNUSED
#    if defined(__GNUC__)
#        if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#            define SWIGUNUSED __attribute__((__unused__))
#        else
#            define SWIGUNUSED
#        endif
#    elif defined(__ICC)
#        define SWIGUNUSED __attribute__((__unused__))
#    else
#        define SWIGUNUSED
#    endif
#endif

#ifndef SWIG_MSC_UNSUPPRESS_4505
#    if defined(_MSC_VER)
#        pragma warning(disable : 4505) /* unreferenced local function has been removed */
#    endif
#endif

#ifndef SWIGUNUSEDPARM
#    ifdef __cplusplus
#        define SWIGUNUSEDPARM(p)
#    else
#        define SWIGUNUSEDPARM(p) p SWIGUNUSED
#    endif
#endif

/* internal SWIG method */
#ifndef SWIGINTERN
#    define SWIGINTERN static SWIGUNUSED
#endif

/* internal inline SWIG method */
#ifndef SWIGINTERNINLINE
#    define SWIGINTERNINLINE SWIGINTERN SWIGINLINE
#endif

/* exporting methods */
#if defined(__GNUC__)
#    if (__GNUC__ >= 4) || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4)
#        ifndef GCC_HASCLASSVISIBILITY
#            define GCC_HASCLASSVISIBILITY
#        endif
#    endif
#endif

#ifndef SWIGEXPORT
#    if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#        if defined(STATIC_LINKED)
#            define SWIGEXPORT
#        else
#            define SWIGEXPORT __declspec(dllexport)
#        endif
#    else
#        if defined(__GNUC__) && defined(GCC_HASCLASSVISIBILITY)
#            define SWIGEXPORT __attribute__((visibility("default")))
#        else
#            define SWIGEXPORT
#        endif
#    endif
#endif

/* calling conventions for Windows */
#ifndef SWIGSTDCALL
#    if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#        define SWIGSTDCALL __stdcall
#    else
#        define SWIGSTDCALL
#    endif
#endif

/* Deal with Microsoft's attempt at deprecating C standard runtime functions */
#if !defined(SWIG_NO_CRT_SECURE_NO_DEPRECATE) && defined(_MSC_VER) &&                              \
    !defined(_CRT_SECURE_NO_DEPRECATE)
#    define _CRT_SECURE_NO_DEPRECATE
#endif

/* Deal with Microsoft's attempt at deprecating methods in the standard C++ library */
#if !defined(SWIG_NO_SCL_SECURE_NO_DEPRECATE) && defined(_MSC_VER) &&                              \
    !defined(_SCL_SECURE_NO_DEPRECATE)
#    define _SCL_SECURE_NO_DEPRECATE
#endif

/* Deal with Apple's deprecated 'AssertMacros.h' from Carbon-framework */
#if defined(__APPLE__) && !defined(__ASSERT_MACROS_DEFINE_VERSIONS_WITHOUT_UNDERSCORES)
#    define __ASSERT_MACROS_DEFINE_VERSIONS_WITHOUT_UNDERSCORES 0
#endif

/* Intel's compiler complains if a variable which was never initialised is
 * cast to void, which is a common idiom which we use to indicate that we
 * are aware a variable isn't used.  So we just silence that warning.
 * See: https://github.com/swig/swig/issues/192 for more discussion.
 */
#ifdef __INTEL_COMPILER
#    pragma warning disable 592
#endif

/* Workaround, Octave's mex.h lacks uint64_t */
#include <stdint.h>
/* MATLAB's C-API */
#include <mex.h>
/* MISC C libraries */
#include <limits.h>
#include <math.h>
#include <stdarg.h>
#include <stdio.h>
#include <string.h>

/* -----------------------------------------------------------------------------
 * swigrun.swg
 *
 * This file contains generic C API SWIG runtime support for pointer
 * type checking.
 * ----------------------------------------------------------------------------- */

/* This should only be incremented when either the layout of swig_type_info changes,
   or for whatever reason, the runtime changes incompatibly */
#define SWIG_RUNTIME_VERSION "4"

/* define SWIG_TYPE_TABLE_NAME as "SWIG_TYPE_TABLE" */
#ifdef SWIG_TYPE_TABLE
#    define SWIG_QUOTE_STRING(x) #    x
#    define SWIG_EXPAND_AND_QUOTE_STRING(x) SWIG_QUOTE_STRING(x)
#    define SWIG_TYPE_TABLE_NAME SWIG_EXPAND_AND_QUOTE_STRING(SWIG_TYPE_TABLE)
#else
#    define SWIG_TYPE_TABLE_NAME
#endif

/*
  You can use the SWIGRUNTIME and SWIGRUNTIMEINLINE macros for
  creating a static or dynamic library from the SWIG runtime code.
  In 99.9% of the cases, SWIG just needs to declare them as 'static'.

  But only do this if strictly necessary, ie, if you have problems
  with your compiler or suchlike.
*/

#ifndef SWIGRUNTIME
#    define SWIGRUNTIME SWIGINTERN
#endif

#ifndef SWIGRUNTIMEINLINE
#    define SWIGRUNTIMEINLINE SWIGRUNTIME SWIGINLINE
#endif

/*  Generic buffer size */
#ifndef SWIG_BUFFER_SIZE
#    define SWIG_BUFFER_SIZE 1024
#endif

/* Flags for pointer conversions */
#define SWIG_POINTER_DISOWN 0x1
#define SWIG_CAST_NEW_MEMORY 0x2

/* Flags for new pointer objects */
#define SWIG_POINTER_OWN 0x1

/*
   Flags/methods for returning states.

   The SWIG conversion methods, as ConvertPtr, return an integer
   that tells if the conversion was successful or not. And if not,
   an error code can be returned (see swigerrors.swg for the codes).

   Use the following macros/flags to set or process the returning
   states.

   In old versions of SWIG, code such as the following was usually written:

     if (SWIG_ConvertPtr(obj,vptr,ty.flags) != -1) {
       // success code
     } else {
       //fail code
     }

   Now you can be more explicit:

    int res = SWIG_ConvertPtr(obj,vptr,ty.flags);
    if (SWIG_IsOK(res)) {
      // success code
    } else {
      // fail code
    }

   which is the same really, but now you can also do

    Type *ptr;
    int res = SWIG_ConvertPtr(obj,(void **)(&ptr),ty.flags);
    if (SWIG_IsOK(res)) {
      // success code
      if (SWIG_IsNewObj(res) {
        ...
    delete *ptr;
      } else {
        ...
      }
    } else {
      // fail code
    }

   I.e., now SWIG_ConvertPtr can return new objects and you can
   identify the case and take care of the deallocation. Of course that
   also requires SWIG_ConvertPtr to return new result values, such as

      int SWIG_ConvertPtr(obj, ptr,...) {
        if (<obj is ok>) {
          if (<need new object>) {
            *ptr = <ptr to new allocated object>;
            return SWIG_NEWOBJ;
          } else {
            *ptr = <ptr to old object>;
            return SWIG_OLDOBJ;
          }
        } else {
          return SWIG_BADOBJ;
        }
      }

   Of course, returning the plain '0(success)/-1(fail)' still works, but you can be
   more explicit by returning SWIG_BADOBJ, SWIG_ERROR or any of the
   SWIG errors code.

   Finally, if the SWIG_CASTRANK_MODE is enabled, the result code
   allows to return the 'cast rank', for example, if you have this

       int food(double)
       int fooi(int);

   and you call

      food(1)   // cast rank '1'  (1 -> 1.0)
      fooi(1)   // cast rank '0'

   just use the SWIG_AddCast()/SWIG_CheckState()
*/

#define SWIG_OK (0)
#define SWIG_ERROR (-1)
#define SWIG_IsOK(r) (r >= 0)
#define SWIG_ArgError(r) ((r != SWIG_ERROR) ? r : SWIG_TypeError)

/* The CastRankLimit says how many bits are used for the cast rank */
#define SWIG_CASTRANKLIMIT (1 << 8)
/* The NewMask denotes the object was created (using new/malloc) */
#define SWIG_NEWOBJMASK (SWIG_CASTRANKLIMIT << 1)
/* The TmpMask is for in/out typemaps that use temporal objects */
#define SWIG_TMPOBJMASK (SWIG_NEWOBJMASK << 1)
/* Simple returning values */
#define SWIG_BADOBJ (SWIG_ERROR)
#define SWIG_OLDOBJ (SWIG_OK)
#define SWIG_NEWOBJ (SWIG_OK | SWIG_NEWOBJMASK)
#define SWIG_TMPOBJ (SWIG_OK | SWIG_TMPOBJMASK)
/* Check, add and del mask methods */
#define SWIG_AddNewMask(r) (SWIG_IsOK(r) ? (r | SWIG_NEWOBJMASK) : r)
#define SWIG_DelNewMask(r) (SWIG_IsOK(r) ? (r & ~SWIG_NEWOBJMASK) : r)
#define SWIG_IsNewObj(r) (SWIG_IsOK(r) && (r & SWIG_NEWOBJMASK))
#define SWIG_AddTmpMask(r) (SWIG_IsOK(r) ? (r | SWIG_TMPOBJMASK) : r)
#define SWIG_DelTmpMask(r) (SWIG_IsOK(r) ? (r & ~SWIG_TMPOBJMASK) : r)
#define SWIG_IsTmpObj(r) (SWIG_IsOK(r) && (r & SWIG_TMPOBJMASK))

/* Cast-Rank Mode */
#if defined(SWIG_CASTRANK_MODE)
#    ifndef SWIG_TypeRank
#        define SWIG_TypeRank unsigned long
#    endif
#    ifndef SWIG_MAXCASTRANK /* Default cast allowed */
#        define SWIG_MAXCASTRANK (2)
#    endif
#    define SWIG_CASTRANKMASK ((SWIG_CASTRANKLIMIT)-1)
#    define SWIG_CastRank(r) (r & SWIG_CASTRANKMASK)
SWIGINTERNINLINE int SWIG_AddCast(int r)
{
    return SWIG_IsOK(r) ? ((SWIG_CastRank(r) < SWIG_MAXCASTRANK) ? (r + 1) : SWIG_ERROR) : r;
}
SWIGINTERNINLINE int SWIG_CheckState(int r)
{
    return SWIG_IsOK(r) ? SWIG_CastRank(r) + 1 : 0;
}
#else /* no cast-rank mode */
#    define SWIG_AddCast(r) (r)
#    define SWIG_CheckState(r) (SWIG_IsOK(r) ? 1 : 0)
#endif

#include <string.h>

#ifdef __cplusplus
extern "C" {
#endif

typedef void* (*swig_converter_func)(void*, int*);
typedef struct swig_type_info* (*swig_dycast_func)(void**);

/* Structure to store information on one type */
typedef struct swig_type_info {
    const char* name; /* mangled name of this type */
    const char* str; /* human readable name of this type */
    swig_dycast_func dcast; /* dynamic cast function down a hierarchy */
    struct swig_cast_info* cast; /* linked list of types that can cast into this type */
    void* clientdata; /* language specific type data */
    int owndata; /* flag if the structure owns the clientdata */
} swig_type_info;

/* Structure to store a type and conversion function used for casting */
typedef struct swig_cast_info {
    swig_type_info* type; /* pointer to type that is equivalent to this type */
    swig_converter_func converter; /* function to cast the void pointers */
    struct swig_cast_info* next; /* pointer to next cast in linked list */
    struct swig_cast_info* prev; /* pointer to the previous cast */
} swig_cast_info;

/* Structure used to store module information
 * Each module generates one structure like this, and the runtime collects
 * all of these structures and stores them in a circularly linked list.*/
typedef struct swig_module_info {
    swig_type_info**
        types; /* Array of pointers to swig_type_info structures that are in this module */
    size_t size; /* Number of types in this module */
    struct swig_module_info* next; /* Pointer to next element in circularly linked list */
    swig_type_info** type_initial; /* Array of initially generated type structures */
    swig_cast_info** cast_initial; /* Array of initially generated casting structures */
    void* clientdata; /* Language specific module data */
} swig_module_info;

/*
  Compare two type names skipping the space characters, therefore
  "char*" == "char *" and "Class<int>" == "Class<int >", etc.

  Return 0 when the two name types are equivalent, as in
  strncmp, but skipping ' '.
*/
SWIGRUNTIME int SWIG_TypeNameComp(const char* f1, const char* l1, const char* f2, const char* l2)
{
    for (; (f1 != l1) && (f2 != l2); ++f1, ++f2) {
        while ((*f1 == ' ') && (f1 != l1))
            ++f1;
        while ((*f2 == ' ') && (f2 != l2))
            ++f2;
        if (*f1 != *f2) return (*f1 > *f2) ? 1 : -1;
    }
    return (int)((l1 - f1) - (l2 - f2));
}

/*
  Check type equivalence in a name list like <name1>|<name2>|...
  Return 0 if equal, -1 if nb < tb, 1 if nb > tb
*/
SWIGRUNTIME int SWIG_TypeCmp(const char* nb, const char* tb)
{
    int equiv = 1;
    const char* te = tb + strlen(tb);
    const char* ne = nb;
    while (equiv != 0 && *ne) {
        for (nb = ne; *ne; ++ne) {
            if (*ne == '|') break;
        }
        equiv = SWIG_TypeNameComp(nb, ne, tb, te);
        if (*ne) ++ne;
    }
    return equiv;
}

/*
  Check type equivalence in a name list like <name1>|<name2>|...
  Return 0 if not equal, 1 if equal
*/
SWIGRUNTIME int SWIG_TypeEquiv(const char* nb, const char* tb)
{
    return SWIG_TypeCmp(nb, tb) == 0 ? 1 : 0;
}

/*
  Check the typename
*/
SWIGRUNTIME swig_cast_info* SWIG_TypeCheck(const char* c, swig_type_info* ty)
{
    if (ty) {
        swig_cast_info* iter = ty->cast;
        while (iter) {
            if (strcmp(iter->type->name, c) == 0) {
                if (iter == ty->cast) return iter;
                /* Move iter to the top of the linked list */
                iter->prev->next = iter->next;
                if (iter->next) iter->next->prev = iter->prev;
                iter->next = ty->cast;
                iter->prev = 0;
                if (ty->cast) ty->cast->prev = iter;
                ty->cast = iter;
                return iter;
            }
            iter = iter->next;
        }
    }
    return 0;
}

/*
  Identical to SWIG_TypeCheck, except strcmp is replaced with a pointer comparison
*/
SWIGRUNTIME swig_cast_info* SWIG_TypeCheckStruct(swig_type_info* from, swig_type_info* ty)
{
    if (ty) {
        swig_cast_info* iter = ty->cast;
        while (iter) {
            if (iter->type == from) {
                if (iter == ty->cast) return iter;
                /* Move iter to the top of the linked list */
                iter->prev->next = iter->next;
                if (iter->next) iter->next->prev = iter->prev;
                iter->next = ty->cast;
                iter->prev = 0;
                if (ty->cast) ty->cast->prev = iter;
                ty->cast = iter;
                return iter;
            }
            iter = iter->next;
        }
    }
    return 0;
}

/*
  Cast a pointer up an inheritance hierarchy
*/
SWIGRUNTIMEINLINE void* SWIG_TypeCast(swig_cast_info* ty, void* ptr, int* newmemory)
{
    return ((!ty) || (!ty->converter)) ? ptr : (*ty->converter)(ptr, newmemory);
}

/*
   Dynamic pointer casting. Down an inheritance hierarchy
*/
SWIGRUNTIME swig_type_info* SWIG_TypeDynamicCast(swig_type_info* ty, void** ptr)
{
    swig_type_info* lastty = ty;
    if (!ty || !ty->dcast) return ty;
    while (ty && (ty->dcast)) {
        ty = (*ty->dcast)(ptr);
        if (ty) lastty = ty;
    }
    return lastty;
}

/*
  Return the name associated with this type
*/
SWIGRUNTIMEINLINE const char* SWIG_TypeName(const swig_type_info* ty)
{
    return ty->name;
}

/*
  Return the pretty name associated with this type,
  that is an unmangled type name in a form presentable to the user.
*/
SWIGRUNTIME const char* SWIG_TypePrettyName(const swig_type_info* type)
{
    /* The "str" field contains the equivalent pretty names of the
     type, separated by vertical-bar characters.  We choose
     to print the last name, as it is often (?) the most
     specific. */
    if (!type) return NULL;
    if (type->str != NULL) {
        const char* last_name = type->str;
        const char* s;
        for (s = type->str; *s; s++)
            if (*s == '|') last_name = s + 1;
        return last_name;
    } else
        return type->name;
}

/*
   Set the clientdata field for a type
*/
SWIGRUNTIME void SWIG_TypeClientData(swig_type_info* ti, void* clientdata)
{
    swig_cast_info* cast = ti->cast;
    /* if (ti->clientdata == clientdata) return; */
    ti->clientdata = clientdata;

    while (cast) {
        if (!cast->converter) {
            swig_type_info* tc = cast->type;
            if (!tc->clientdata) {
                SWIG_TypeClientData(tc, clientdata);
            }
        }
        cast = cast->next;
    }
}
SWIGRUNTIME void SWIG_TypeNewClientData(swig_type_info* ti, void* clientdata)
{
    SWIG_TypeClientData(ti, clientdata);
    ti->owndata = 1;
}

/*
  Search for a swig_type_info structure only by mangled name
  Search is a O(log #types)

  We start searching at module start, and finish searching when start == end.
  Note: if start == end at the beginning of the function, we go all the way around
  the circular list.
*/
SWIGRUNTIME swig_type_info*
    SWIG_MangledTypeQueryModule(swig_module_info* start, swig_module_info* end, const char* name)
{
    swig_module_info* iter = start;
    do {
        if (iter->size) {
            size_t l = 0;
            size_t r = iter->size - 1;
            do {
                /* since l+r >= 0, we can (>> 1) instead (/ 2) */
                size_t i = (l + r) >> 1;
                const char* iname = iter->types[i]->name;
                if (iname) {
                    int compare = strcmp(name, iname);
                    if (compare == 0) {
                        return iter->types[i];
                    } else if (compare < 0) {
                        if (i) {
                            r = i - 1;
                        } else {
                            break;
                        }
                    } else if (compare > 0) {
                        l = i + 1;
                    }
                } else {
                    break; /* should never happen */
                }
            } while (l <= r);
        }
        iter = iter->next;
    } while (iter != end);
    return 0;
}

/*
  Search for a swig_type_info structure for either a mangled name or a human readable name.
  It first searches the mangled names of the types, which is a O(log #types)
  If a type is not found it then searches the human readable names, which is O(#types).

  We start searching at module start, and finish searching when start == end.
  Note: if start == end at the beginning of the function, we go all the way around
  the circular list.
*/
SWIGRUNTIME swig_type_info*
    SWIG_TypeQueryModule(swig_module_info* start, swig_module_info* end, const char* name)
{
    /* STEP 1: Search the name field using binary search */
    swig_type_info* ret = SWIG_MangledTypeQueryModule(start, end, name);
    if (ret) {
        return ret;
    } else {
        /* STEP 2: If the type hasn't been found, do a complete search
       of the str field (the human readable name) */
        swig_module_info* iter = start;
        do {
            size_t i = 0;
            for (; i < iter->size; ++i) {
                if (iter->types[i]->str && (SWIG_TypeEquiv(iter->types[i]->str, name)))
                    return iter->types[i];
            }
            iter = iter->next;
        } while (iter != end);
    }

    /* neither found a match */
    return 0;
}

/*
   Pack binary data into a string
*/
SWIGRUNTIME char* SWIG_PackData(char* c, void* ptr, size_t sz)
{
    static const char hex[17] = "0123456789abcdef";
    const unsigned char* u = (unsigned char*)ptr;
    const unsigned char* eu = u + sz;
    for (; u != eu; ++u) {
        unsigned char uu = *u;
        *(c++) = hex[(uu & 0xf0) >> 4];
        *(c++) = hex[uu & 0xf];
    }
    return c;
}

/*
   Unpack binary data from a string
*/
SWIGRUNTIME const char* SWIG_UnpackData(const char* c, void* ptr, size_t sz)
{
    unsigned char* u = (unsigned char*)ptr;
    const unsigned char* eu = u + sz;
    for (; u != eu; ++u) {
        char d = *(c++);
        unsigned char uu;
        if ((d >= '0') && (d <= '9'))
            uu = (unsigned char)((d - '0') << 4);
        else if ((d >= 'a') && (d <= 'f'))
            uu = (unsigned char)((d - ('a' - 10)) << 4);
        else
            return (char*)0;
        d = *(c++);
        if ((d >= '0') && (d <= '9'))
            uu |= (unsigned char)(d - '0');
        else if ((d >= 'a') && (d <= 'f'))
            uu |= (unsigned char)(d - ('a' - 10));
        else
            return (char*)0;
        *u = uu;
    }
    return c;
}

/*
   Pack 'void *' into a string buffer.
*/
SWIGRUNTIME char* SWIG_PackVoidPtr(char* buff, void* ptr, const char* name, size_t bsz)
{
    char* r = buff;
    if ((2 * sizeof(void*) + 2) > bsz) return 0;
    *(r++) = '_';
    r = SWIG_PackData(r, &ptr, sizeof(void*));
    if (strlen(name) + 1 > (bsz - (r - buff))) return 0;
    strcpy(r, name);
    return buff;
}

SWIGRUNTIME const char* SWIG_UnpackVoidPtr(const char* c, void** ptr, const char* name)
{
    if (*c != '_') {
        if (strcmp(c, "NULL") == 0) {
            *ptr = (void*)0;
            return name;
        } else {
            return 0;
        }
    }
    return SWIG_UnpackData(++c, ptr, sizeof(void*));
}

SWIGRUNTIME char* SWIG_PackDataName(char* buff, void* ptr, size_t sz, const char* name, size_t bsz)
{
    char* r = buff;
    size_t lname = (name ? strlen(name) : 0);
    if ((2 * sz + 2 + lname) > bsz) return 0;
    *(r++) = '_';
    r = SWIG_PackData(r, ptr, sz);
    if (lname) {
        strncpy(r, name, lname + 1);
    } else {
        *r = 0;
    }
    return buff;
}

SWIGRUNTIME const char* SWIG_UnpackDataName(const char* c, void* ptr, size_t sz, const char* name)
{
    if (*c != '_') {
        if (strcmp(c, "NULL") == 0) {
            memset(ptr, 0, sz);
            return name;
        } else {
            return 0;
        }
    }
    return SWIG_UnpackData(++c, ptr, sz);
}

#ifdef __cplusplus
}
#endif

/*  Errors in SWIG */
#define SWIG_UnknownError -1
#define SWIG_IOError -2
#define SWIG_RuntimeError -3
#define SWIG_IndexError -4
#define SWIG_TypeError -5
#define SWIG_DivisionByZero -6
#define SWIG_OverflowError -7
#define SWIG_SyntaxError -8
#define SWIG_ValueError -9
#define SWIG_SystemError -10
#define SWIG_AttributeError -11
#define SWIG_MemoryError -12
#define SWIG_NullReferenceError -13

/* Last error */
static int SWIG_lasterror_code = 0;
static char SWIG_lasterror_msg[1024];
SWIGRUNTIME void SWIG_Error(int code, const char* format, ...)
{
    SWIG_lasterror_code = code;
    va_list arg;
    va_start(arg, format);
    vsnprintf(SWIG_lasterror_msg, sizeof(SWIG_lasterror_msg), format, arg);
    va_end(arg);
}

SWIGRUNTIME const char* SWIG_ErrorType(int code)
{
    switch (code) {
        case SWIG_MemoryError:
            return "SWIG:MemoryError";
        case SWIG_IOError:
            return "SWIG:IOError";
        case SWIG_RuntimeError:
            return "SWIG:RuntimeError";
        case SWIG_IndexError:
            return "SWIG:IndexError";
        case SWIG_TypeError:
            return "SWIG:TypeError";
        case SWIG_DivisionByZero:
            return "SWIG:DivisionByZero";
        case SWIG_OverflowError:
            return "SWIG:OverflowError";
        case SWIG_SyntaxError:
            return "SWIG:SyntaxError";
        case SWIG_ValueError:
            return "SWIG:ValueError";
        case SWIG_SystemError:
            return "SWIG:SystemError";
        case SWIG_AttributeError:
            return "SWIG:AttributeError";
    }
    return "SWIG:UnknownError";
}

SWIGRUNTIME int SWIG_check_num_args(const char* func_name,
                                    int num_args,
                                    int max_args,
                                    int min_args,
                                    int varargs)
{
    if (num_args > max_args && !varargs) {
        SWIG_Error(SWIG_RuntimeError,
                   "function %s takes at most %i arguments",
                   func_name,
                   max_args);
    } else if (num_args < min_args) {
        SWIG_Error(SWIG_RuntimeError,
                   "function %s requires at least %i arguments",
                   func_name,
                   min_args);
    } else {
        return 1;
    }
    return 0;
}

#define SWIG_fail goto fail

#define SWIG_Matlab_ConvertPtr(obj, pptr, type, flags)                                             \
    SWIG_Matlab_ConvertPtrAndOwn(obj, pptr, type, flags, 0)
#define SWIG_ConvertPtr(obj, pptr, type, flags) SWIG_Matlab_ConvertPtr(obj, pptr, type, flags)
#define SWIG_ConvertPtrAndOwn(obj, pptr, type, flags, own)                                         \
    SWIG_Matlab_ConvertPtrAndOwn(obj, pptr, type, flags, own)
#define SWIG_ConvertPtr(obj, pptr, type, flags) SWIG_Matlab_ConvertPtr(obj, pptr, type, flags)
#define SWIG_NewPointerObj(ptr, type, flags) SWIG_Matlab_NewPointerObj(ptr, type, flags)
#define swig_owntype int

#define SWIG_ConvertPacked(obj, ptr, sz, ty) SWIG_Matlab_ConvertPacked(obj, ptr, sz, ty)
#define SWIG_NewPackedObj(ptr, sz, type) SWIG_Matlab_NewPackedObj(ptr, sz, type)

#define SWIG_ConvertFunctionPtr(obj, pptr, type) SWIG_ConvertPtr(obj, pptr, type, 0)
#define SWIG_NewFunctionPtrObj(ptr, type) SWIG_NewPointerObj(ptr, type, 0)

#define SWIG_ConvertMember(obj, ptr, sz, ty) SWIG_Matlab_ConvertPacked(obj, ptr, sz, ty)
#define SWIG_NewMemberObj(ptr, sz, type) SWIG_Matlab_NewPackedObj(ptr, sz, type)

#define SWIG_GetModule(clientdata) SWIG_Matlab_GetModule(clientdata)
#define SWIG_SetModule(clientdata, pointer) SWIG_Matlab_SetModule(pointer);
#define SWIG_MODULE_CLIENTDATA_TYPE void*

#define Matlab_Error_Occurred() 0
#define SWIG_Matlab_AddErrorMsg(msg)                                                               \
    {                                                                                              \
        ;                                                                                          \
    }

SWIGRUNTIME swig_module_info* SWIG_Matlab_GetModule(void* clientdata);
SWIGRUNTIME void SWIG_Matlab_SetModule(swig_module_info* pointer);

/* For backward compatibility only */
#define SWIG_POINTER_EXCEPTION 0
#define SWIG_arg_fail(arg) 0

/* Pointer to C/C++ object, including type information and reference counters */
typedef struct SwigPtr {
    void* ptr;
    swig_type_info* type;
    int own;
    void* self;
    struct SwigPtr* next;
} SwigPtr;
static swig_module_info* saved_swig_module = 0;

/* Add new pointer object to the memory allocator
   Returns the location of the new element by reference and a return flag by value.
 */
int SWIG_Matlab_NewPointer(SwigPtr** swig_ptr, void* ptr, swig_type_info* type, int own)
{
    /* Check input arguments */
    if (!swig_ptr || !type) return 1;

    /* Allocate memory */
    SwigPtr* obj = (SwigPtr*)malloc(sizeof(SwigPtr));
    if (!obj) return 1;

    /* Initialize object */
    obj->ptr = ptr;
    obj->type = type;
    obj->own = own;
    obj->self = obj;
    obj->next = 0;

    /* Return memory reference and successful return */
    *swig_ptr = obj;
    return 0;
}

/* Free pointer object
   Returns a void* with the object to be freed (if any)
 */
void* SWIG_Matlab_DeletePointer(SwigPtr* p)
{
    /* Quick return if null pointer? */
    if (p == 0) return 0;

    /* Clear and free */
    void* ret = p->own ? p->ptr : 0;
    p->ptr = 0;
    p->type = 0;
    p->own = 0;
    p->self = 0;
    p->next = 0;
    free(p);
    return ret;
}

/* This should probably be moved somewhere else */
#ifdef __cplusplus
extern "C"
#endif /* cplusplus */
    void
    SWIG_Matlab_ExitFcn(void)
{
    /* Unused at the moment */
}

SWIGRUNTIME int SWIG_Matlab_CallInterp(int nlhs,
                                       mxArray* plhs[],
                                       int nrhs,
                                       mxArray* prhs[],
                                       const char* functionName)
{
#ifdef HAVE_OCTAVE
    return mexCallMATLAB(nlhs, plhs, nrhs, prhs, functionName);
#else
    mxArray* ex = mexCallMATLABWithTrap(nlhs, plhs, nrhs, prhs, functionName);
    if (ex) {
        mxDestroyArray(ex);
        return 1;
    } else {
        return 0;
    }
#endif
}

SWIGRUNTIME mxArray* SWIG_Matlab_CallInterpEx(int nlhs,
                                              mxArray* plhs[],
                                              int nrhs,
                                              mxArray* prhs[],
                                              const char* functionName)
{
#ifdef HAVE_OCTAVE
    int flag = mexCallMATLAB(nlhs, plhs, nrhs, prhs, functionName);
    if (flag) {
        mexErrMsgIdAndTxt("SWIG:CallInterpEx", "Not implemented for Octave");
    }
    return 0;
#else
    return mexCallMATLABWithTrap(nlhs, plhs, nrhs, prhs, functionName);
#endif
}

/* Convert a packed value value */
SWIGRUNTIME int SWIG_Matlab_ConvertPacked(mxArray* SWIGUNUSEDPARM(pm),
                                          void* SWIGUNUSEDPARM(ptr),
                                          size_t SWIGUNUSEDPARM(sz),
                                          swig_type_info* SWIGUNUSEDPARM(ty))
{
    mexErrMsgIdAndTxt("SWIG:ConvertPacked", "Not implemented");
    return SWIG_ERROR;
}

/* Runtime API implementation */
SWIGRUNTIME mxArray* SWIG_Matlab_NewPointerObj(void* ptr, swig_type_info* type, int flags)
{
    /* Ownership? */
    int own = (flags & SWIG_POINTER_OWN) ? SWIG_POINTER_OWN : 0;

    /* Allocate a pointer object */
    SwigPtr* swig_ptr = 0;
    if (SWIG_Matlab_NewPointer(&swig_ptr, ptr, type, own)) {
        mexErrMsgIdAndTxt("SWIG:NewPointerObj", "Cannot allocate pointer");
    }

    /* Create a SwigRef instance */
    mxArray* pm = 0;
    int ex = SWIG_Matlab_CallInterp(1, &pm, 0, 0, "SwigRef");
    if (ex) mexErrMsgIdAndTxt("SWIG:NewPointerObj", "Cannot create SwigRef instance");

    /* Set pointer property */
    mxArray* pm_ptr = mxCreateNumericMatrix(1, 1, mxUINT64_CLASS, mxREAL);
    *(uint64_T*)mxGetData(pm_ptr) = (uint64_T)swig_ptr;
    if (!pm_ptr) mexErrMsgIdAndTxt("SWIG:NewPointerObj", "mxCreateNumericMatrix failed");

    mxArray* rhs[2] = {pm, pm_ptr};
    mexCallMATLAB(0, 0, 2, rhs, "SwigSet");
    mxDestroyArray(pm_ptr);

    /* Create a proxy class of the desired type */
    if (type->clientdata) {
        const char* matlab_classname = (const char*)type->clientdata;
        mxArray* pm_test = 0;
        ex = SWIG_Matlab_CallInterp(1, &pm_test, 1, &pm, matlab_classname);
        if (ex) {
            mexWarnMsgIdAndTxt("SWIG:NewPointerObj",
                               "NewPointerObj problem. creating SwigRef as opposed to %s",
                               matlab_classname);
        } else {
            mxDestroyArray(pm);
            pm = pm_test;
        }
    }

    return pm;
}

/* Create a new packed object */

SWIGRUNTIMEINLINE mxArray* SWIG_Matlab_NewPackedObj(void* SWIGUNUSEDPARM(ptr),
                                                    size_t SWIGUNUSEDPARM(sz),
                                                    swig_type_info* SWIGUNUSEDPARM(type))
{
    mexErrMsgIdAndTxt("SWIG:NewPackedOb", "Not implemented");
    return 0;
}

SWIGRUNTIME int SWIG_Matlab_isOwned(mxArray* pm)
{
    /* Get index, represented as a uint64_T scalar */
    mxArray* pm_ptr;
    mexCallMATLAB(1, &pm_ptr, 1, &pm, "SwigGet");
    if (!pm_ptr || mxGetNumberOfElements(pm_ptr) != 1 || mxGetClassID(pm_ptr) != mxUINT64_CLASS ||
        mxIsComplex(pm_ptr)) {
        if (pm_ptr) mxDestroyArray(pm_ptr);
        return SWIG_ERROR;
    }
    SwigPtr* p = (SwigPtr*)(*(uint64_T*)mxGetData(pm_ptr));
    mxDestroyArray(pm_ptr);

    return p ? p->own : 0;
}

SWIGRUNTIME SwigPtr* SWIG_Matlab_getSwigPtr(mxArray* pm)
{
    /* Get index, represented as a uint64_T scalar */
    mxArray* pm_ptr;
    mexCallMATLAB(1, &pm_ptr, 1, &pm, "SwigGet");
    if (!pm_ptr || mxGetNumberOfElements(pm_ptr) != 1 || mxGetClassID(pm_ptr) != mxUINT64_CLASS ||
        mxIsComplex(pm_ptr)) {
        if (pm_ptr) mxDestroyArray(pm_ptr);
        return 0;
    }
    SwigPtr* p = (SwigPtr*)(*(uint64_T*)mxGetData(pm_ptr));
    mxDestroyArray(pm_ptr);

    /* Consistency check */
    if (p->self != p) return 0;

    /* Get pointer object */
    return p;
}

SWIGRUNTIME int
    SWIG_Matlab_ConvertPtrAndOwn(mxArray* pm, void** ptr, swig_type_info* type, int flags, int* own)
{
    /* Get index, represented as a uint64_T scalar */
    mxArray* pm_ptr;
    mexCallMATLAB(1, &pm_ptr, 1, &pm, "SwigGet");
    if (!pm_ptr || mxGetNumberOfElements(pm_ptr) != 1 || mxGetClassID(pm_ptr) != mxUINT64_CLASS ||
        mxIsComplex(pm_ptr)) {
        if (pm_ptr) mxDestroyArray(pm_ptr);
        return SWIG_ERROR;
    }
    SwigPtr* swig_ptr = (SwigPtr*)(*(uint64_T*)mxGetData(pm_ptr));
    mxDestroyArray(pm_ptr);

    /* Get pointer object */
    if (!swig_ptr) return SWIG_ERROR;

    swig_cast_info* tc;
    int same_type = 0;
    SwigPtr* p = swig_ptr;
    while (p) {
        /* Loop over types */
        swig_type_info* p_type = p->type;

        /* No type cast needed */
        if (p_type == type || !type) {
            same_type = 1;
            break;
        }

        /* Check if type conversion is possible */
        tc = SWIG_TypeCheck(p_type->name, type);
        if (tc) break;

        /* Check next type */
        p = p->next;
    }

    /* Conversion not possible */
    if (!same_type && !tc) return SWIG_ERROR;

    /* Get data */
    if (ptr) *ptr = p->ptr;
    if (own) *own = p->own;

    /* Set ownership marker to false? */
    if (flags & SWIG_POINTER_DISOWN) {
        SWIG_Matlab_DeletePointer(swig_ptr);
    }

    /* No type cast needed */
    if (same_type || !ptr) {
        return SWIG_OK;
    }

    /* Do type-cast */
    int newmemory = 0;
    *ptr = SWIG_TypeCast(tc, *ptr, &newmemory);
    if (newmemory == SWIG_CAST_NEW_MEMORY) {
        if (own) {
            *own = *own | SWIG_CAST_NEW_MEMORY;
        } else {
            /* badly formed typemap which will lead to a memory leak - it must set and use own to
             * delete *ptr */
            mexErrMsgIdAndTxt("SWIG:ConvertPointerObj",
                              "SWIG error in converting pointer for type %s. Bad typemap?",
                              type->name);
            return SWIG_ERROR;
        }
    }
    return SWIG_OK;
}

SWIGRUNTIME swig_module_info* SWIG_Matlab_GetModule(void* SWIGUNUSEDPARM(clientdata))
{
    if (!saved_swig_module) {
        /* First call for this module, fetch pointer from MATLAB */
        mxArray* mem = 0;
        int flag = mexCallMATLAB(1, &mem, 0, 0, "SwigMem");
        if (flag || !mem) mexErrMsgIdAndTxt("SWIG:GetModule", "Cannot call SwigMem");
        /* On first call, mem is an empty matrix */
        if (mxGetNumberOfElements(mem) != 0) {
            if (!mxIsStruct(mem)) {
                mexErrMsgIdAndTxt("SWIG:GetModule", "Corrupted memory");
            }
            mxArray* module = mxGetField(
                mem, 0, "swig_runtime_data_type_pointer" SWIG_RUNTIME_VERSION SWIG_TYPE_TABLE_NAME);
            if (module && mxGetNumberOfElements(module) == 1 &&
                mxGetClassID(module) == mxUINT64_CLASS && !mxIsComplex(module)) {
                /* Cast memory as a pointer */
                saved_swig_module = (swig_module_info*)(*(uint64_T*)mxGetData(module));
            }
        }
        mxDestroyArray(mem);
    }
    return saved_swig_module;
}

SWIGRUNTIME void SWIG_Matlab_SetModule(swig_module_info* pointer)
{
    mxArray* mem = 0;
    const char* fields[1] = {
        "swig_runtime_data_type_pointer" SWIG_RUNTIME_VERSION SWIG_TYPE_TABLE_NAME};
    int flag = mexCallMATLAB(1, &mem, 0, 0, "SwigMem");
    if (flag || !mem) mexErrMsgIdAndTxt("SWIG:SetModule", "Cannot call SwigMem");
    /* Under normal circumstances, swigMem is an empty matrix */
    /* but is not required to be for a valid call to SWIG_Matlab_SetModule() */
    if (mxGetNumberOfElements(mem) == 0) {
        mxDestroyArray(mem);
        mem = mxCreateStructMatrix(1, 1, 1, fields);
        if (!mem) mexErrMsgIdAndTxt("SWIG:SetModule", "mxCreateStructMatrix failed");
        mxArray* module = mxCreateNumericMatrix(1, 1, mxUINT64_CLASS, mxREAL);
        if (!module) mexErrMsgIdAndTxt("SWIG:SetModule", "mxCreateNumericMatrix failed");
        *(uint64_T*)mxGetData(module) = (uint64_T)pointer;
        mxSetField(mem, 0, fields[0], module);
    } else {
        int nfields = 0;
        int fieldNum = 0;
        /* Add to existing mem if not the same */
        if (!mxIsStruct(mem)) {
            mexErrMsgIdAndTxt("SWIG:SetModule", "Corrupted memory");
        }
        nfields = mxGetNumberOfFields(mem);
        /* Check if same type table */
        int ii;
        for (ii = 0; ii < nfields; ++ii) {
            if (strcmp(mxGetFieldNameByNumber(mem, ii), fields[0]) == 0) {
                mxDestroyArray(mem);
                return;
            }
        }
        fieldNum = mxAddField(mem, fields[0]);
        if (fieldNum < 0) mexErrMsgIdAndTxt("SWIG:SetModule", "Error adding field to SwigMem");
        mxArray* module = mxCreateNumericMatrix(1, 1, mxUINT64_CLASS, mxREAL);
        if (!module) mexErrMsgIdAndTxt("SWIG:SetModule", "mxCreateNumericMatrix failed");
        *(uint64_T*)mxGetData(module) = (uint64_T)pointer;
        mxSetFieldByNumber(mem, 0, fieldNum, module);
    }
    /* Set variable in SwigMem */
    flag = mexCallMATLAB(0, 0, 1, &mem, "SwigMem");
    mxDestroyArray(mem);
    if (flag) {
        mexErrMsgIdAndTxt("SWIG:SetModule", "Could not set variable in SwigMem.\n");
    }
    saved_swig_module = pointer;
}

/* HACK HACK */
#define SWIG_Matlab_SetConstant(dummy1, dummy2, pm) (pm)

#ifdef __cplusplus
#    include <iostream>
#    include <streambuf>
namespace swig {
// Stream buffer to allow redirecting output to MATLAB
class SWIG_Matlab_streambuf: public std::streambuf {
  public:
    SWIG_Matlab_streambuf() {}

  protected:
    virtual int_type overflow(int_type ch)
    {
        if (ch != traits_type::eof()) {
            mexPrintf("%c", static_cast<char>(ch));
        }
        return ch;
    }
    virtual std::streamsize xsputn(const char* s, std::streamsize num)
    {
        // Pass straight to mexPrintf without buffering
        mexPrintf("%.*s", static_cast<int>(num), s);
        return num;
    }
};

// Instantiation
static SWIG_Matlab_streambuf SWIG_Matlab_buf;
}  // namespace swig
#endif /* cplusplus */

#define SWIG_exception_fail(code, msg)                                                             \
    do {                                                                                           \
        SWIG_Error(code, msg);                                                                     \
        SWIG_fail;                                                                                 \
    } while (0)

#define SWIG_contract_assert(expr, msg)                                                            \
    if (!(expr)) {                                                                                 \
        SWIG_Error(SWIG_RuntimeError, msg);                                                        \
        SWIG_fail;                                                                                 \
    } else

/* -------- TYPES TABLE (BEGIN) -------- */

#define SWIGTYPE_p_char swig_types[0]
#define SWIGTYPE_p_double swig_types[1]
#define SWIGTYPE_p_doubleArray swig_types[2]
#define SWIGTYPE_p_f_int_int_double__void swig_types[3]
#define SWIGTYPE_p_griddyn_status_enum swig_types[4]
#define SWIGTYPE_p_int swig_types[5]
#define SWIGTYPE_p_p_char swig_types[6]
#define SWIGTYPE_p_void swig_types[7]
static swig_type_info* swig_types[9];
static swig_module_info swig_module = {swig_types, 8, 0, 0, 0, 0};
#define SWIG_TypeQuery(name) SWIG_TypeQueryModule(&swig_module, &swig_module, name)
#define SWIG_MangledTypeQuery(name) SWIG_MangledTypeQueryModule(&swig_module, &swig_module, name)

/* -------- TYPES TABLE (END) -------- */

#define SWIGVERSION 0x030011
#define SWIG_VERSION SWIGVERSION

#define SWIG_as_voidptr(a) const_cast<void*>(static_cast<const void*>(a))
#define SWIG_as_voidptrptr(a) ((void)SWIG_as_voidptr(*a), reinterpret_cast<void**>(a))

#include <stdexcept>

static double* new_doublep()
{
    return new double();
}

static double* copy_doublep(double value)
{
    return new double(value);
}

static void delete_doublep(double* obj)
{
    if (obj) delete obj;
}

static void doublep_assign(double* obj, double value)
{
    *obj = value;
}

static double doublep_value(double* obj)
{
    return *obj;
}

SWIGINTERN int SWIG_AsVal_double(mxArray* pm, double* val)
{
    if (!mxIsDouble(pm) || mxGetNumberOfElements(pm) != 1) return SWIG_TypeError;
    if (val) *val = mxGetScalar(pm);
    return SWIG_OK;
}

SWIGINTERNINLINE mxArray* SWIG_From_double(double value)
{
    return mxCreateDoubleScalar(value);
}

static char* new_charp()
{
    return new char();
}

static char* copy_charp(char value)
{
    return new char(value);
}

static void delete_charp(char* obj)
{
    if (obj) delete obj;
}

static void charp_assign(char* obj, char value)
{
    *obj = value;
}

static char charp_value(char* obj)
{
    return *obj;
}

SWIGINTERN swig_type_info* SWIG_pchar_descriptor(void)
{
    static int init = 0;
    static swig_type_info* info = 0;
    if (!init) {
        info = SWIG_TypeQuery("_p_char");
        init = 1;
    }
    return info;
}

SWIGINTERNINLINE mxArray* SWIG_FromCharPtrAndSize(const char* carray, size_t size)
{
    mwSize dims[2] = {1, (mwSize)size};
    mxArray* ret = mxCreateCharArray((mwSize)2, dims);
    if (!ret) mexErrMsgIdAndTxt("SWIG:FromCharPtrAndSize", "mxCreateCharArray failed");
    mxChar* ret_data = (mxChar*)mxGetData(ret);
    size_t i;
    for (i = 0; i < size; ++i)
        ret_data[i] = carray[i];
    return ret;
}

SWIGINTERNINLINE mxArray* SWIG_FromCharPtr(const char* cptr)
{
    return SWIG_FromCharPtrAndSize(cptr, (cptr ? strlen(cptr) : 0));
}

SWIGINTERN int SWIG_AsCharPtrAndSize(mxArray* pm, char** cptr, size_t* psize, int* alloc)
{
    if (!mxIsChar(pm) || (mxGetNumberOfElements(pm) != 0 && mxGetM(pm) != 1)) return SWIG_TypeError;
    size_t len = mxGetN(pm);
    static char buf[256];
    int flag = mxGetString(pm, buf, (mwSize)sizeof(buf));
    if (flag) return SWIG_TypeError;

    if (alloc) {
        *cptr = reinterpret_cast<char*>(memcpy((new char[len + 1]), buf, sizeof(char) * (len + 1)));
        *alloc = SWIG_NEWOBJ;
    } else if (cptr)
        *cptr = buf;
    if (psize) *psize = len + 1;
    return SWIG_OK;
}

SWIGINTERN int SWIG_AsCharArray(mxArray* obj, char* val, size_t size)
{
    char* cptr = 0;
    size_t csize = 0;
    int alloc = SWIG_OLDOBJ;
    int res = SWIG_AsCharPtrAndSize(obj, &cptr, &csize, &alloc);
    if (SWIG_IsOK(res)) {
        /* special case of single char conversion when we don't need space for NUL */
        if (size == 1 && csize == 2 && cptr && !cptr[1]) --csize;
        if (csize <= size) {
            if (val) {
                if (csize) memcpy(val, cptr, csize * sizeof(char));
                if (csize < size) memset(val + csize, 0, (size - csize) * sizeof(char));
            }
            if (alloc == SWIG_NEWOBJ) {
                delete[] cptr;
                res = SWIG_DelNewMask(res);
            }
            return res;
        }
        if (alloc == SWIG_NEWOBJ) delete[] cptr;
    }
    return SWIG_TypeError;
}

#include <limits.h>
#if !defined(SWIG_NO_LLONG_MAX)
#    if !defined(LLONG_MAX) && defined(__GNUC__) && defined(__LONG_LONG_MAX__)
#        define LLONG_MAX __LONG_LONG_MAX__
#        define LLONG_MIN (-LLONG_MAX - 1LL)
#        define ULLONG_MAX (LLONG_MAX * 2ULL + 1ULL)
#    endif
#endif

SWIGINTERN int SWIG_AsVal_long(mxArray* pm, long* val)
{
    if (mxGetNumberOfElements(pm) != 1) return SWIG_TypeError;
    switch (mxGetClassID(pm)) {
        case mxINT8_CLASS:
            if (val) *val = (long)(*(int8_T*)mxGetData(pm));
            break;
        case mxUINT8_CLASS:
            if (val) *val = (long)(*(uint8_T*)mxGetData(pm));
            break;
        case mxINT16_CLASS:
            if (val) *val = (long)(*(int16_T*)mxGetData(pm));
            break;
        case mxUINT16_CLASS:
            if (val) *val = (long)(*(uint16_T*)mxGetData(pm));
            break;
        case mxINT32_CLASS:
            if (val) *val = (long)(*(int32_T*)mxGetData(pm));
            break;
        case mxUINT32_CLASS:
            if (val) *val = (long)(*(uint32_T*)mxGetData(pm));
            break;
        case mxINT64_CLASS:
            if (val) *val = (long)(*(int64_T*)mxGetData(pm));
            break;
        case mxUINT64_CLASS:
            if (val) *val = (long)(*(uint64_T*)mxGetData(pm));
            break;
        case mxDOUBLE_CLASS: {
            double v = mxGetScalar(pm);
            if (v != floor(v)) return SWIG_TypeError;
            if (val) *val = (long)v;
            break;
        }
        default:
            return SWIG_TypeError;
    }
    return SWIG_OK;
}

SWIGINTERN int SWIG_AsVal_char(mxArray* obj, char* val)
{
    int res = SWIG_AsCharArray(obj, val, 1);
    if (!SWIG_IsOK(res)) {
        long v;
        res = SWIG_AddCast(SWIG_AsVal_long(obj, &v));
        if (SWIG_IsOK(res)) {
            if ((CHAR_MIN <= v) && (v <= CHAR_MAX)) {
                if (val) *val = static_cast<char>(v);
            } else {
                res = SWIG_OverflowError;
            }
        }
    }
    return res;
}

SWIGINTERNINLINE mxArray* SWIG_From_char(char c)
{
    return SWIG_FromCharPtrAndSize(&c, 1);
}

typedef double doubleArray;

SWIGINTERN int SWIG_AsVal_unsigned_SS_long(mxArray* pm, unsigned long* val)
{
    if (mxGetNumberOfElements(pm) != 1) return SWIG_TypeError;
    switch (mxGetClassID(pm)) {
        case mxINT8_CLASS:
            if (val) *val = (unsigned long)(*(int8_T*)mxGetData(pm));
            break;
        case mxUINT8_CLASS:
            if (val) *val = (unsigned long)(*(uint8_T*)mxGetData(pm));
            break;
        case mxINT16_CLASS:
            if (val) *val = (unsigned long)(*(int16_T*)mxGetData(pm));
            break;
        case mxUINT16_CLASS:
            if (val) *val = (unsigned long)(*(uint16_T*)mxGetData(pm));
            break;
        case mxINT32_CLASS:
            if (val) *val = (unsigned long)(*(int32_T*)mxGetData(pm));
            break;
        case mxUINT32_CLASS:
            if (val) *val = (unsigned long)(*(uint32_T*)mxGetData(pm));
            break;
        case mxINT64_CLASS:
            if (val) *val = (unsigned long)(*(int64_T*)mxGetData(pm));
            break;
        case mxUINT64_CLASS:
            if (val) *val = (unsigned long)(*(uint64_T*)mxGetData(pm));
            break;
        case mxDOUBLE_CLASS: {
            double v = mxGetScalar(pm);
            if (v != floor(v)) return SWIG_TypeError;
            if (val) *val = (unsigned long)v;
            break;
        }
        default:
            return SWIG_TypeError;
    }
    return SWIG_OK;
}

SWIGINTERN int SWIG_AsVal_unsigned_SS_long_SS_long(mxArray* pm, unsigned long long* val)
{
    if (mxGetNumberOfElements(pm) != 1) return SWIG_TypeError;
    switch (mxGetClassID(pm)) {
        case mxINT8_CLASS:
            if (val) *val = (unsigned long long)(*(int8_T*)mxGetData(pm));
            break;
        case mxUINT8_CLASS:
            if (val) *val = (unsigned long long)(*(uint8_T*)mxGetData(pm));
            break;
        case mxINT16_CLASS:
            if (val) *val = (unsigned long long)(*(int16_T*)mxGetData(pm));
            break;
        case mxUINT16_CLASS:
            if (val) *val = (unsigned long long)(*(uint16_T*)mxGetData(pm));
            break;
        case mxINT32_CLASS:
            if (val) *val = (unsigned long long)(*(int32_T*)mxGetData(pm));
            break;
        case mxUINT32_CLASS:
            if (val) *val = (unsigned long long)(*(uint32_T*)mxGetData(pm));
            break;
        case mxINT64_CLASS:
            if (val) *val = (unsigned long long)(*(int64_T*)mxGetData(pm));
            break;
        case mxUINT64_CLASS:
            if (val) *val = (unsigned long long)(*(uint64_T*)mxGetData(pm));
            break;
        case mxDOUBLE_CLASS: {
            double v = mxGetScalar(pm);
            if (v != floor(v)) return SWIG_TypeError;
            if (val) *val = (unsigned long long)v;
            break;
        }
        default:
            return SWIG_TypeError;
    }
    return SWIG_OK;
}

SWIGINTERNINLINE int SWIG_AsVal_size_t(mxArray* obj, size_t* val)
{
    int res = SWIG_TypeError;
#ifdef SWIG_LONG_LONG_AVAILABLE
    if (sizeof(size_t) <= sizeof(unsigned long)) {
#endif
        unsigned long v;
        res = SWIG_AsVal_unsigned_SS_long(obj, val ? &v : 0);
        if (SWIG_IsOK(res) && val) *val = static_cast<size_t>(v);
#ifdef SWIG_LONG_LONG_AVAILABLE
    } else if (sizeof(size_t) <= sizeof(unsigned long long)) {
        unsigned long long v;
        res = SWIG_AsVal_unsigned_SS_long_SS_long(obj, val ? &v : 0);
        if (SWIG_IsOK(res) && val) *val = static_cast<size_t>(v);
    }
#endif
    return res;
}

SWIGINTERN doubleArray* new_doubleArray(size_t nelements)
{
    return (new double[nelements]);
}
SWIGINTERN void delete_doubleArray(doubleArray* self)
{
    delete[] self;
}
SWIGINTERN double doubleArray_paren(doubleArray* self, size_t index)
{
    return self[index];
}
SWIGINTERN void doubleArray_paren_asgn(doubleArray* self, size_t index, double value)
{
    self[index] = value;
}
SWIGINTERN double* doubleArray_cast(doubleArray* self)
{
    return self;
}
SWIGINTERN doubleArray* doubleArray_frompointer(double* t)
{
    return static_cast<doubleArray*>(t);
}

SWIGINTERN int SWIG_AsVal_int(mxArray* obj, int* val)
{
    long v;
    int res = SWIG_AsVal_long(obj, &v);
    if (SWIG_IsOK(res)) {
        if ((v < INT_MIN || v > INT_MAX)) {
            return SWIG_OverflowError;
        } else {
            if (val) *val = static_cast<int>(v);
        }
    }
    return res;
}

SWIGINTERNINLINE mxArray* SWIG_From_long(long value)
{
    mxArray* out = mxCreateNumericMatrix(1, 1, mxINT64_CLASS, mxREAL);
    *((int64_T*)mxGetData(out)) = (int64_T)value;
    return out;
}

SWIGINTERNINLINE mxArray* SWIG_From_int(int value)
{
    return SWIG_From_long(value);
}

#include "griddyn_export.h"
#include "griddyn_export_advanced.h"

int _wrap_new_doublep(int resc, mxArray* resv[], int argc, mxArray* argv[])
{
    mxArray* _out;
    double* result = 0;

    if (!SWIG_check_num_args("new_doublep", argc, 0, 0, 0)) {
        SWIG_fail;
    }
    (void)argv;
    result = (double*)new_doublep();
    _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_double, 0 | 0);
    if (_out) --resc, *resv++ = _out;
    return 0;
fail:
    return 1;
}

int _wrap_copy_doublep(int resc, mxArray* resv[], int argc, mxArray* argv[])
{
    double arg1;
    double val1;
    int ecode1 = 0;
    mxArray* _out;
    double* result = 0;

    if (!SWIG_check_num_args("copy_doublep", argc, 1, 1, 0)) {
        SWIG_fail;
    }
    ecode1 = SWIG_AsVal_double(argv[0], &val1);
    if (!SWIG_IsOK(ecode1)) {
        SWIG_exception_fail(SWIG_ArgError(ecode1),
                            "in method '"
                            "copy_doublep"
                            "', argument "
                            "1"
                            " of type '"
                            "double"
                            "'");
    }
    arg1 = static_cast<double>(val1);
    result = (double*)copy_doublep(arg1);
    _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_double, 0 | 0);
    if (_out) --resc, *resv++ = _out;
    return 0;
fail:
    return 1;
}

int _wrap_delete_doublep(int resc, mxArray* resv[], int argc, mxArray* argv[])
{
    double* arg1 = (double*)0;
    void* argp1 = 0;
    int res1 = 0;
    mxArray* _out;

    if (!SWIG_check_num_args("delete_doublep", argc, 1, 1, 0)) {
        SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(argv[0], &argp1, SWIGTYPE_p_double, 0 | 0);
    if (!SWIG_IsOK(res1)) {
        SWIG_exception_fail(SWIG_ArgError(res1),
                            "in method '"
                            "delete_doublep"
                            "', argument "
                            "1"
                            " of type '"
                            "double *"
                            "'");
    }
    arg1 = reinterpret_cast<double*>(argp1);
    delete_doublep(arg1);
    _out = (mxArray*)0;
    if (_out) --resc, *resv++ = _out;
    return 0;
fail:
    return 1;
}

int _wrap_doublep_assign(int resc, mxArray* resv[], int argc, mxArray* argv[])
{
    double* arg1 = (double*)0;
    double arg2;
    void* argp1 = 0;
    int res1 = 0;
    double val2;
    int ecode2 = 0;
    mxArray* _out;

    if (!SWIG_check_num_args("doublep_assign", argc, 2, 2, 0)) {
        SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(argv[0], &argp1, SWIGTYPE_p_double, 0 | 0);
    if (!SWIG_IsOK(res1)) {
        SWIG_exception_fail(SWIG_ArgError(res1),
                            "in method '"
                            "doublep_assign"
                            "', argument "
                            "1"
                            " of type '"
                            "double *"
                            "'");
    }
    arg1 = reinterpret_cast<double*>(argp1);
    ecode2 = SWIG_AsVal_double(argv[1], &val2);
    if (!SWIG_IsOK(ecode2)) {
        SWIG_exception_fail(SWIG_ArgError(ecode2),
                            "in method '"
                            "doublep_assign"
                            "', argument "
                            "2"
                            " of type '"
                            "double"
                            "'");
    }
    arg2 = static_cast<double>(val2);
    doublep_assign(arg1, arg2);
    _out = (mxArray*)0;
    if (_out) --resc, *resv++ = _out;
    return 0;
fail:
    return 1;
}

int _wrap_doublep_value(int resc, mxArray* resv[], int argc, mxArray* argv[])
{
    double* arg1 = (double*)0;
    void* argp1 = 0;
    int res1 = 0;
    mxArray* _out;
    double result;

    if (!SWIG_check_num_args("doublep_value", argc, 1, 1, 0)) {
        SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(argv[0], &argp1, SWIGTYPE_p_double, 0 | 0);
    if (!SWIG_IsOK(res1)) {
        SWIG_exception_fail(SWIG_ArgError(res1),
                            "in method '"
                            "doublep_value"
                            "', argument "
                            "1"
                            " of type '"
                            "double *"
                            "'");
    }
    arg1 = reinterpret_cast<double*>(argp1);
    result = (double)doublep_value(arg1);
    _out = SWIG_From_double(static_cast<double>(result));
    if (_out) --resc, *resv++ = _out;
    return 0;
fail:
    return 1;
}

int _wrap_new_charp(int resc, mxArray* resv[], int argc, mxArray* argv[])
{
    mxArray* _out;
    char* result = 0;

    if (!SWIG_check_num_args("new_charp", argc, 0, 0, 0)) {
        SWIG_fail;
    }
    (void)argv;
    result = (char*)new_charp();
    _out = SWIG_FromCharPtr((const char*)result);
    if (_out) --resc, *resv++ = _out;
    return 0;
fail:
    return 1;
}

int _wrap_copy_charp(int resc, mxArray* resv[], int argc, mxArray* argv[])
{
    char arg1;
    char val1;
    int ecode1 = 0;
    mxArray* _out;
    char* result = 0;

    if (!SWIG_check_num_args("copy_charp", argc, 1, 1, 0)) {
        SWIG_fail;
    }
    ecode1 = SWIG_AsVal_char(argv[0], &val1);
    if (!SWIG_IsOK(ecode1)) {
        SWIG_exception_fail(SWIG_ArgError(ecode1),
                            "in method '"
                            "copy_charp"
                            "', argument "
                            "1"
                            " of type '"
                            "char"
                            "'");
    }
    arg1 = static_cast<char>(val1);
    result = (char*)copy_charp(arg1);
    _out = SWIG_FromCharPtr((const char*)result);
    if (_out) --resc, *resv++ = _out;
    return 0;
fail:
    return 1;
}

int _wrap_delete_charp(int resc, mxArray* resv[], int argc, mxArray* argv[])
{
    char* arg1 = (char*)0;
    int res1;
    char* buf1 = 0;
    int alloc1 = 0;
    mxArray* _out;

    if (!SWIG_check_num_args("delete_charp", argc, 1, 1, 0)) {
        SWIG_fail;
    }
    res1 = SWIG_AsCharPtrAndSize(argv[0], &buf1, NULL, &alloc1);
    if (!SWIG_IsOK(res1)) {
        SWIG_exception_fail(SWIG_ArgError(res1),
                            "in method '"
                            "delete_charp"
                            "', argument "
                            "1"
                            " of type '"
                            "char *"
                            "'");
    }
    arg1 = reinterpret_cast<char*>(buf1);
    delete_charp(arg1);
    _out = (mxArray*)0;
    if (_out) --resc, *resv++ = _out;
    if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
    return 0;
fail:
    if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
    return 1;
}

int _wrap_charp_assign(int resc, mxArray* resv[], int argc, mxArray* argv[])
{
    char* arg1 = (char*)0;
    char arg2;
    int res1;
    char* buf1 = 0;
    int alloc1 = 0;
    char val2;
    int ecode2 = 0;
    mxArray* _out;

    if (!SWIG_check_num_args("charp_assign", argc, 2, 2, 0)) {
        SWIG_fail;
    }
    res1 = SWIG_AsCharPtrAndSize(argv[0], &buf1, NULL, &alloc1);
    if (!SWIG_IsOK(res1)) {
        SWIG_exception_fail(SWIG_ArgError(res1),
                            "in method '"
                            "charp_assign"
                            "', argument "
                            "1"
                            " of type '"
                            "char *"
                            "'");
    }
    arg1 = reinterpret_cast<char*>(buf1);
    ecode2 = SWIG_AsVal_char(argv[1], &val2);
    if (!SWIG_IsOK(ecode2)) {
        SWIG_exception_fail(SWIG_ArgError(ecode2),
                            "in method '"
                            "charp_assign"
                            "', argument "
                            "2"
                            " of type '"
                            "char"
                            "'");
    }
    arg2 = static_cast<char>(val2);
    charp_assign(arg1, arg2);
    _out = (mxArray*)0;
    if (_out) --resc, *resv++ = _out;
    if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
    return 0;
fail:
    if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
    return 1;
}

int _wrap_charp_value(int resc, mxArray* resv[], int argc, mxArray* argv[])
{
    char* arg1 = (char*)0;
    int res1;
    char* buf1 = 0;
    int alloc1 = 0;
    mxArray* _out;
    char result;

    if (!SWIG_check_num_args("charp_value", argc, 1, 1, 0)) {
        SWIG_fail;
    }
    res1 = SWIG_AsCharPtrAndSize(argv[0], &buf1, NULL, &alloc1);
    if (!SWIG_IsOK(res1)) {
        SWIG_exception_fail(SWIG_ArgError(res1),
                            "in method '"
                            "charp_value"
                            "', argument "
                            "1"
                            " of type '"
                            "char *"
                            "'");
    }
    arg1 = reinterpret_cast<char*>(buf1);
    result = (char)charp_value(arg1);
    _out = SWIG_From_char(static_cast<char>(result));
    if (_out) --resc, *resv++ = _out;
    if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
    return 0;
fail:
    if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
    return 1;
}

int _wrap_new_doubleArray(int resc, mxArray* resv[], int argc, mxArray* argv[])
{
    size_t arg1;
    size_t val1;
    int ecode1 = 0;
    mxArray* _out;
    doubleArray* result = 0;

    if (!SWIG_check_num_args("new_doubleArray", argc, 1, 1, 0)) {
        SWIG_fail;
    }
    ecode1 = SWIG_AsVal_size_t(argv[0], &val1);
    if (!SWIG_IsOK(ecode1)) {
        SWIG_exception_fail(SWIG_ArgError(ecode1),
                            "in method '"
                            "new_doubleArray"
                            "', argument "
                            "1"
                            " of type '"
                            "size_t"
                            "'");
    }
    arg1 = static_cast<size_t>(val1);
    result = (doubleArray*)new_doubleArray(arg1);
    _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_doubleArray, 1 | 0);
    if (_out) --resc, *resv++ = _out;
    return 0;
fail:
    return 1;
}

int _wrap_delete_doubleArray(int resc, mxArray* resv[], int argc, mxArray* argv[])
{
    doubleArray* arg1 = (doubleArray*)0;
    void* argp1 = 0;
    int res1 = 0;
    mxArray* _out;

    int is_owned;
    if (!SWIG_check_num_args("delete_doubleArray", argc, 1, 1, 0)) {
        SWIG_fail;
    }
    is_owned = SWIG_Matlab_isOwned(argv[0]);
    res1 = SWIG_ConvertPtr(argv[0], &argp1, SWIGTYPE_p_doubleArray, SWIG_POINTER_DISOWN | 0);
    if (!SWIG_IsOK(res1)) {
        SWIG_exception_fail(SWIG_ArgError(res1),
                            "in method '"
                            "delete_doubleArray"
                            "', argument "
                            "1"
                            " of type '"
                            "doubleArray *"
                            "'");
    }
    arg1 = reinterpret_cast<doubleArray*>(argp1);
    if (is_owned) {
        delete_doubleArray(arg1);
    }
    _out = (mxArray*)0;
    if (_out) --resc, *resv++ = _out;
    return 0;
fail:
    return 1;
}

int _wrap_doubleArray_paren(int resc, mxArray* resv[], int argc, mxArray* argv[])
{
    doubleArray* arg1 = (doubleArray*)0;
    size_t arg2;
    void* argp1 = 0;
    int res1 = 0;
    size_t val2;
    int ecode2 = 0;
    mxArray* _out;
    double result;

    if (!SWIG_check_num_args("doubleArray_paren", argc, 2, 2, 0)) {
        SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(argv[0], &argp1, SWIGTYPE_p_doubleArray, 0 | 0);
    if (!SWIG_IsOK(res1)) {
        SWIG_exception_fail(SWIG_ArgError(res1),
                            "in method '"
                            "doubleArray_paren"
                            "', argument "
                            "1"
                            " of type '"
                            "doubleArray *"
                            "'");
    }
    arg1 = reinterpret_cast<doubleArray*>(argp1);
    ecode2 = SWIG_AsVal_size_t(argv[1], &val2);
    if (!SWIG_IsOK(ecode2)) {
        SWIG_exception_fail(SWIG_ArgError(ecode2),
                            "in method '"
                            "doubleArray_paren"
                            "', argument "
                            "2"
                            " of type '"
                            "size_t"
                            "'");
    }
    arg2 = static_cast<size_t>(val2);
    result = (double)doubleArray_paren(arg1, arg2);
    _out = SWIG_From_double(static_cast<double>(result));
    if (_out) --resc, *resv++ = _out;
    return 0;
fail:
    return 1;
}

int _wrap_doubleArray_paren_asgn(int resc, mxArray* resv[], int argc, mxArray* argv[])
{
    doubleArray* arg1 = (doubleArray*)0;
    size_t arg2;
    double arg3;
    void* argp1 = 0;
    int res1 = 0;
    size_t val2;
    int ecode2 = 0;
    double val3;
    int ecode3 = 0;
    mxArray* _out;

    if (!SWIG_check_num_args("doubleArray_paren_asgn", argc, 3, 3, 0)) {
        SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(argv[0], &argp1, SWIGTYPE_p_doubleArray, 0 | 0);
    if (!SWIG_IsOK(res1)) {
        SWIG_exception_fail(SWIG_ArgError(res1),
                            "in method '"
                            "doubleArray_paren_asgn"
                            "', argument "
                            "1"
                            " of type '"
                            "doubleArray *"
                            "'");
    }
    arg1 = reinterpret_cast<doubleArray*>(argp1);
    ecode2 = SWIG_AsVal_size_t(argv[1], &val2);
    if (!SWIG_IsOK(ecode2)) {
        SWIG_exception_fail(SWIG_ArgError(ecode2),
                            "in method '"
                            "doubleArray_paren_asgn"
                            "', argument "
                            "2"
                            " of type '"
                            "size_t"
                            "'");
    }
    arg2 = static_cast<size_t>(val2);
    ecode3 = SWIG_AsVal_double(argv[2], &val3);
    if (!SWIG_IsOK(ecode3)) {
        SWIG_exception_fail(SWIG_ArgError(ecode3),
                            "in method '"
                            "doubleArray_paren_asgn"
                            "', argument "
                            "3"
                            " of type '"
                            "double"
                            "'");
    }
    arg3 = static_cast<double>(val3);
    doubleArray_paren_asgn(arg1, arg2, arg3);
    _out = (mxArray*)0;
    if (_out) --resc, *resv++ = _out;
    return 0;
fail:
    return 1;
}

int _wrap_doubleArray_cast(int resc, mxArray* resv[], int argc, mxArray* argv[])
{
    doubleArray* arg1 = (doubleArray*)0;
    void* argp1 = 0;
    int res1 = 0;
    mxArray* _out;
    double* result = 0;

    if (!SWIG_check_num_args("doubleArray_cast", argc, 1, 1, 0)) {
        SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(argv[0], &argp1, SWIGTYPE_p_doubleArray, 0 | 0);
    if (!SWIG_IsOK(res1)) {
        SWIG_exception_fail(SWIG_ArgError(res1),
                            "in method '"
                            "doubleArray_cast"
                            "', argument "
                            "1"
                            " of type '"
                            "doubleArray *"
                            "'");
    }
    arg1 = reinterpret_cast<doubleArray*>(argp1);
    result = (double*)doubleArray_cast(arg1);
    _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_double, 0 | 0);
    if (_out) --resc, *resv++ = _out;
    return 0;
fail:
    return 1;
}

int _wrap_doubleArray_frompointer(int resc, mxArray* resv[], int argc, mxArray* argv[])
{
    double* arg1 = (double*)0;
    void* argp1 = 0;
    int res1 = 0;
    mxArray* _out;
    doubleArray* result = 0;

    if (!SWIG_check_num_args("doubleArray_frompointer", argc, 1, 1, 0)) {
        SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(argv[0], &argp1, SWIGTYPE_p_double, 0 | 0);
    if (!SWIG_IsOK(res1)) {
        SWIG_exception_fail(SWIG_ArgError(res1),
                            "in method '"
                            "doubleArray_frompointer"
                            "', argument "
                            "1"
                            " of type '"
                            "double *"
                            "'");
    }
    arg1 = reinterpret_cast<double*>(argp1);
    result = (doubleArray*)doubleArray_frompointer(arg1);
    _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_doubleArray, 0 | 0);
    if (_out) --resc, *resv++ = _out;
    return 0;
fail:
    return 1;
}

int _wrap_gridDynSimulation_getResults__SWIG_0(int resc, mxArray* resv[], int argc, mxArray* argv[])
{
    gridDynSimReference arg1 = (gridDynSimReference)0;
    char* arg2 = (char*)0;
    double* arg3;
    int arg4;
    int res1;
    int res2;
    char* buf2 = 0;
    int alloc2 = 0;
    void* argp3 = 0;
    int res3 = 0;
    int val4;
    int ecode4 = 0;
    mxArray* _out;
    int result;

    if (!SWIG_check_num_args("gridDynSimulation_getResults", argc, 4, 4, 0)) {
        SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(argv[0], SWIG_as_voidptrptr(&arg1), 0, 0);
    if (!SWIG_IsOK(res1)) {
        SWIG_exception_fail(SWIG_ArgError(res1),
                            "in method '"
                            "gridDynSimulation_getResults"
                            "', argument "
                            "1"
                            " of type '"
                            "gridDynSimReference"
                            "'");
    }
    res2 = SWIG_AsCharPtrAndSize(argv[1], &buf2, NULL, &alloc2);
    if (!SWIG_IsOK(res2)) {
        SWIG_exception_fail(SWIG_ArgError(res2),
                            "in method '"
                            "gridDynSimulation_getResults"
                            "', argument "
                            "2"
                            " of type '"
                            "char const *"
                            "'");
    }
    arg2 = reinterpret_cast<char*>(buf2);
    res3 = SWIG_ConvertPtr(argv[2], &argp3, SWIGTYPE_p_double, 0 | 0);
    if (!SWIG_IsOK(res3)) {
        SWIG_exception_fail(SWIG_ArgError(res3),
                            "in method '"
                            "gridDynSimulation_getResults"
                            "', argument "
                            "3"
                            " of type '"
                            "double [0]"
                            "'");
    }
    arg3 = reinterpret_cast<double*>(argp3);
    ecode4 = SWIG_AsVal_int(argv[3], &val4);
    if (!SWIG_IsOK(ecode4)) {
        SWIG_exception_fail(SWIG_ArgError(ecode4),
                            "in method '"
                            "gridDynSimulation_getResults"
                            "', argument "
                            "4"
                            " of type '"
                            "int"
                            "'");
    }
    arg4 = static_cast<int>(val4);
    result = (int)gridDynSimulation_getResults(arg1, (char const*)arg2, arg3, arg4);
    _out = SWIG_From_int(static_cast<int>(result));
    if (_out) --resc, *resv++ = _out;
    if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
    return 0;
fail:
    if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
    return 1;
}

int _wrap_gridDynObject_create(int resc, mxArray* resv[], int argc, mxArray* argv[])
{
    char* arg1 = (char*)0;
    char* arg2 = (char*)0;
    int res1;
    char* buf1 = 0;
    int alloc1 = 0;
    int res2;
    char* buf2 = 0;
    int alloc2 = 0;
    mxArray* _out;
    gridDynObject result;

    if (!SWIG_check_num_args("gridDynObject_create", argc, 2, 2, 0)) {
        SWIG_fail;
    }
    res1 = SWIG_AsCharPtrAndSize(argv[0], &buf1, NULL, &alloc1);
    if (!SWIG_IsOK(res1)) {
        SWIG_exception_fail(SWIG_ArgError(res1),
                            "in method '"
                            "gridDynObject_create"
                            "', argument "
                            "1"
                            " of type '"
                            "char const *"
                            "'");
    }
    arg1 = reinterpret_cast<char*>(buf1);
    res2 = SWIG_AsCharPtrAndSize(argv[1], &buf2, NULL, &alloc2);
    if (!SWIG_IsOK(res2)) {
        SWIG_exception_fail(SWIG_ArgError(res2),
                            "in method '"
                            "gridDynObject_create"
                            "', argument "
                            "2"
                            " of type '"
                            "char const *"
                            "'");
    }
    arg2 = reinterpret_cast<char*>(buf2);
    result = (gridDynObject)gridDynObject_create((char const*)arg1, (char const*)arg2);
    _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_void, 0 | 0);
    if (_out) --resc, *resv++ = _out;
    if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
    if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
    return 0;
fail:
    if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
    if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
    return 1;
}

int _wrap_gridDynObject_clone(int resc, mxArray* resv[], int argc, mxArray* argv[])
{
    gridDynObject arg1 = (gridDynObject)(gridDynObject)0;
    int res1;
    mxArray* _out;
    gridDynObject result;

    if (!SWIG_check_num_args("gridDynObject_clone", argc, 1, 1, 0)) {
        SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(argv[0], SWIG_as_voidptrptr(&arg1), 0, 0);
    if (!SWIG_IsOK(res1)) {
        SWIG_exception_fail(SWIG_ArgError(res1),
                            "in method '"
                            "gridDynObject_clone"
                            "', argument "
                            "1"
                            " of type '"
                            "gridDynObject const"
                            "'");
    }
    result = (gridDynObject)gridDynObject_clone(arg1);
    _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_void, 0 | 0);
    if (_out) --resc, *resv++ = _out;
    return 0;
fail:
    return 1;
}

int _wrap_gridDynObject_free(int resc, mxArray* resv[], int argc, mxArray* argv[])
{
    gridDynObject arg1 = (gridDynObject)0;
    int res1;
    mxArray* _out;

    if (!SWIG_check_num_args("gridDynObject_free", argc, 1, 1, 0)) {
        SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(argv[0], SWIG_as_voidptrptr(&arg1), 0, 0);
    if (!SWIG_IsOK(res1)) {
        SWIG_exception_fail(SWIG_ArgError(res1),
                            "in method '"
                            "gridDynObject_free"
                            "', argument "
                            "1"
                            " of type '"
                            "gridDynObject"
                            "'");
    }
    gridDynObject_free(arg1);
    _out = (mxArray*)0;
    if (_out) --resc, *resv++ = _out;
    return 0;
fail:
    return 1;
}

int _wrap_gridDynObject_add(int resc, mxArray* resv[], int argc, mxArray* argv[])
{
    gridDynObject arg1 = (gridDynObject)0;
    gridDynObject arg2 = (gridDynObject)0;
    int res1;
    int res2;
    mxArray* _out;
    griddyn_status result;

    if (!SWIG_check_num_args("gridDynObject_add", argc, 2, 2, 0)) {
        SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(argv[0], SWIG_as_voidptrptr(&arg1), 0, 0);
    if (!SWIG_IsOK(res1)) {
        SWIG_exception_fail(SWIG_ArgError(res1),
                            "in method '"
                            "gridDynObject_add"
                            "', argument "
                            "1"
                            " of type '"
                            "gridDynObject"
                            "'");
    }
    res2 = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&arg2), 0, 0);
    if (!SWIG_IsOK(res2)) {
        SWIG_exception_fail(SWIG_ArgError(res2),
                            "in method '"
                            "gridDynObject_add"
                            "', argument "
                            "2"
                            " of type '"
                            "gridDynObject"
                            "'");
    }
    result = (griddyn_status)gridDynObject_add(arg1, arg2);
    _out = SWIG_From_int(static_cast<int>(result));
    if (_out) --resc, *resv++ = _out;
    return 0;
fail:
    return 1;
}

int _wrap_gridDynObject_remove(int resc, mxArray* resv[], int argc, mxArray* argv[])
{
    gridDynObject arg1 = (gridDynObject)0;
    gridDynObject arg2 = (gridDynObject)0;
    int res1;
    int res2;
    mxArray* _out;
    griddyn_status result;

    if (!SWIG_check_num_args("gridDynObject_remove", argc, 2, 2, 0)) {
        SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(argv[0], SWIG_as_voidptrptr(&arg1), 0, 0);
    if (!SWIG_IsOK(res1)) {
        SWIG_exception_fail(SWIG_ArgError(res1),
                            "in method '"
                            "gridDynObject_remove"
                            "', argument "
                            "1"
                            " of type '"
                            "gridDynObject"
                            "'");
    }
    res2 = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&arg2), 0, 0);
    if (!SWIG_IsOK(res2)) {
        SWIG_exception_fail(SWIG_ArgError(res2),
                            "in method '"
                            "gridDynObject_remove"
                            "', argument "
                            "2"
                            " of type '"
                            "gridDynObject"
                            "'");
    }
    result = (griddyn_status)gridDynObject_remove(arg1, arg2);
    _out = SWIG_From_int(static_cast<int>(result));
    if (_out) --resc, *resv++ = _out;
    return 0;
fail:
    return 1;
}

int _wrap_gridDynObject_setString(int resc, mxArray* resv[], int argc, mxArray* argv[])
{
    gridDynObject arg1 = (gridDynObject)0;
    char* arg2 = (char*)0;
    char* arg3 = (char*)0;
    int res1;
    int res2;
    char* buf2 = 0;
    int alloc2 = 0;
    int res3;
    char* buf3 = 0;
    int alloc3 = 0;
    mxArray* _out;
    griddyn_status result;

    if (!SWIG_check_num_args("gridDynObject_setString", argc, 3, 3, 0)) {
        SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(argv[0], SWIG_as_voidptrptr(&arg1), 0, 0);
    if (!SWIG_IsOK(res1)) {
        SWIG_exception_fail(SWIG_ArgError(res1),
                            "in method '"
                            "gridDynObject_setString"
                            "', argument "
                            "1"
                            " of type '"
                            "gridDynObject"
                            "'");
    }
    res2 = SWIG_AsCharPtrAndSize(argv[1], &buf2, NULL, &alloc2);
    if (!SWIG_IsOK(res2)) {
        SWIG_exception_fail(SWIG_ArgError(res2),
                            "in method '"
                            "gridDynObject_setString"
                            "', argument "
                            "2"
                            " of type '"
                            "char const *"
                            "'");
    }
    arg2 = reinterpret_cast<char*>(buf2);
    res3 = SWIG_AsCharPtrAndSize(argv[2], &buf3, NULL, &alloc3);
    if (!SWIG_IsOK(res3)) {
        SWIG_exception_fail(SWIG_ArgError(res3),
                            "in method '"
                            "gridDynObject_setString"
                            "', argument "
                            "3"
                            " of type '"
                            "char const *"
                            "'");
    }
    arg3 = reinterpret_cast<char*>(buf3);
    result = (griddyn_status)gridDynObject_setString(arg1, (char const*)arg2, (char const*)arg3);
    _out = SWIG_From_int(static_cast<int>(result));
    if (_out) --resc, *resv++ = _out;
    if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
    if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
    return 0;
fail:
    if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
    if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
    return 1;
}

int _wrap_gridDynObject_setValue(int resc, mxArray* resv[], int argc, mxArray* argv[])
{
    gridDynObject arg1 = (gridDynObject)0;
    char* arg2 = (char*)0;
    double arg3;
    int res1;
    int res2;
    char* buf2 = 0;
    int alloc2 = 0;
    double val3;
    int ecode3 = 0;
    mxArray* _out;
    griddyn_status result;

    if (!SWIG_check_num_args("gridDynObject_setValue", argc, 3, 3, 0)) {
        SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(argv[0], SWIG_as_voidptrptr(&arg1), 0, 0);
    if (!SWIG_IsOK(res1)) {
        SWIG_exception_fail(SWIG_ArgError(res1),
                            "in method '"
                            "gridDynObject_setValue"
                            "', argument "
                            "1"
                            " of type '"
                            "gridDynObject"
                            "'");
    }
    res2 = SWIG_AsCharPtrAndSize(argv[1], &buf2, NULL, &alloc2);
    if (!SWIG_IsOK(res2)) {
        SWIG_exception_fail(SWIG_ArgError(res2),
                            "in method '"
                            "gridDynObject_setValue"
                            "', argument "
                            "2"
                            " of type '"
                            "char const *"
                            "'");
    }
    arg2 = reinterpret_cast<char*>(buf2);
    ecode3 = SWIG_AsVal_double(argv[2], &val3);
    if (!SWIG_IsOK(ecode3)) {
        SWIG_exception_fail(SWIG_ArgError(ecode3),
                            "in method '"
                            "gridDynObject_setValue"
                            "', argument "
                            "3"
                            " of type '"
                            "double"
                            "'");
    }
    arg3 = static_cast<double>(val3);
    result = (griddyn_status)gridDynObject_setValue(arg1, (char const*)arg2, arg3);
    _out = SWIG_From_int(static_cast<int>(result));
    if (_out) --resc, *resv++ = _out;
    if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
    return 0;
fail:
    if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
    return 1;
}

int _wrap_gridDynObject_setValueUnits(int resc, mxArray* resv[], int argc, mxArray* argv[])
{
    gridDynObject arg1 = (gridDynObject)0;
    char* arg2 = (char*)0;
    double arg3;
    char* arg4 = (char*)0;
    int res1;
    int res2;
    char* buf2 = 0;
    int alloc2 = 0;
    double val3;
    int ecode3 = 0;
    int res4;
    char* buf4 = 0;
    int alloc4 = 0;
    mxArray* _out;
    griddyn_status result;

    if (!SWIG_check_num_args("gridDynObject_setValueUnits", argc, 4, 4, 0)) {
        SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(argv[0], SWIG_as_voidptrptr(&arg1), 0, 0);
    if (!SWIG_IsOK(res1)) {
        SWIG_exception_fail(SWIG_ArgError(res1),
                            "in method '"
                            "gridDynObject_setValueUnits"
                            "', argument "
                            "1"
                            " of type '"
                            "gridDynObject"
                            "'");
    }
    res2 = SWIG_AsCharPtrAndSize(argv[1], &buf2, NULL, &alloc2);
    if (!SWIG_IsOK(res2)) {
        SWIG_exception_fail(SWIG_ArgError(res2),
                            "in method '"
                            "gridDynObject_setValueUnits"
                            "', argument "
                            "2"
                            " of type '"
                            "char const *"
                            "'");
    }
    arg2 = reinterpret_cast<char*>(buf2);
    ecode3 = SWIG_AsVal_double(argv[2], &val3);
    if (!SWIG_IsOK(ecode3)) {
        SWIG_exception_fail(SWIG_ArgError(ecode3),
                            "in method '"
                            "gridDynObject_setValueUnits"
                            "', argument "
                            "3"
                            " of type '"
                            "double"
                            "'");
    }
    arg3 = static_cast<double>(val3);
    res4 = SWIG_AsCharPtrAndSize(argv[3], &buf4, NULL, &alloc4);
    if (!SWIG_IsOK(res4)) {
        SWIG_exception_fail(SWIG_ArgError(res4),
                            "in method '"
                            "gridDynObject_setValueUnits"
                            "', argument "
                            "4"
                            " of type '"
                            "char const *"
                            "'");
    }
    arg4 = reinterpret_cast<char*>(buf4);
    result = (griddyn_status)
        gridDynObject_setValueUnits(arg1, (char const*)arg2, arg3, (char const*)arg4);
    _out = SWIG_From_int(static_cast<int>(result));
    if (_out) --resc, *resv++ = _out;
    if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
    if (alloc4 == SWIG_NEWOBJ) delete[] buf4;
    return 0;
fail:
    if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
    if (alloc4 == SWIG_NEWOBJ) delete[] buf4;
    return 1;
}

int _wrap_gridDynObject_setFlag(int resc, mxArray* resv[], int argc, mxArray* argv[])
{
    gridDynObject arg1 = (gridDynObject)0;
    char* arg2 = (char*)0;
    int arg3;
    int res1;
    int res2;
    char* buf2 = 0;
    int alloc2 = 0;
    int val3;
    int ecode3 = 0;
    mxArray* _out;
    griddyn_status result;

    if (!SWIG_check_num_args("gridDynObject_setFlag", argc, 3, 3, 0)) {
        SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(argv[0], SWIG_as_voidptrptr(&arg1), 0, 0);
    if (!SWIG_IsOK(res1)) {
        SWIG_exception_fail(SWIG_ArgError(res1),
                            "in method '"
                            "gridDynObject_setFlag"
                            "', argument "
                            "1"
                            " of type '"
                            "gridDynObject"
                            "'");
    }
    res2 = SWIG_AsCharPtrAndSize(argv[1], &buf2, NULL, &alloc2);
    if (!SWIG_IsOK(res2)) {
        SWIG_exception_fail(SWIG_ArgError(res2),
                            "in method '"
                            "gridDynObject_setFlag"
                            "', argument "
                            "2"
                            " of type '"
                            "char const *"
                            "'");
    }
    arg2 = reinterpret_cast<char*>(buf2);
    ecode3 = SWIG_AsVal_int(argv[2], &val3);
    if (!SWIG_IsOK(ecode3)) {
        SWIG_exception_fail(SWIG_ArgError(ecode3),
                            "in method '"
                            "gridDynObject_setFlag"
                            "', argument "
                            "3"
                            " of type '"
                            "int"
                            "'");
    }
    arg3 = static_cast<int>(val3);
    result = (griddyn_status)gridDynObject_setFlag(arg1, (char const*)arg2, arg3);
    _out = SWIG_From_int(static_cast<int>(result));
    if (_out) --resc, *resv++ = _out;
    if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
    return 0;
fail:
    if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
    return 1;
}

int _wrap_gridDynObject_getString(int resc, mxArray* resv[], int argc, mxArray* argv[])
{
    gridDynObject arg1 = (gridDynObject)(gridDynObject)0;
    char* arg2 = (char*)0;
    char* arg3 = (char*)0;
    int arg4;
    int res1;
    int res2;
    char* buf2 = 0;
    int alloc2 = 0;
    int res3;
    char* buf3 = 0;
    int alloc3 = 0;
    int val4;
    int ecode4 = 0;
    mxArray* _out;
    griddyn_status result;

    if (!SWIG_check_num_args("gridDynObject_getString", argc, 4, 4, 0)) {
        SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(argv[0], SWIG_as_voidptrptr(&arg1), 0, 0);
    if (!SWIG_IsOK(res1)) {
        SWIG_exception_fail(SWIG_ArgError(res1),
                            "in method '"
                            "gridDynObject_getString"
                            "', argument "
                            "1"
                            " of type '"
                            "gridDynObject const"
                            "'");
    }
    res2 = SWIG_AsCharPtrAndSize(argv[1], &buf2, NULL, &alloc2);
    if (!SWIG_IsOK(res2)) {
        SWIG_exception_fail(SWIG_ArgError(res2),
                            "in method '"
                            "gridDynObject_getString"
                            "', argument "
                            "2"
                            " of type '"
                            "char const *"
                            "'");
    }
    arg2 = reinterpret_cast<char*>(buf2);
    res3 = SWIG_AsCharPtrAndSize(argv[2], &buf3, NULL, &alloc3);
    if (!SWIG_IsOK(res3)) {
        SWIG_exception_fail(SWIG_ArgError(res3),
                            "in method '"
                            "gridDynObject_getString"
                            "', argument "
                            "3"
                            " of type '"
                            "char *"
                            "'");
    }
    arg3 = reinterpret_cast<char*>(buf3);
    ecode4 = SWIG_AsVal_int(argv[3], &val4);
    if (!SWIG_IsOK(ecode4)) {
        SWIG_exception_fail(SWIG_ArgError(ecode4),
                            "in method '"
                            "gridDynObject_getString"
                            "', argument "
                            "4"
                            " of type '"
                            "int"
                            "'");
    }
    arg4 = static_cast<int>(val4);
    result = (griddyn_status)gridDynObject_getString(arg1, (char const*)arg2, arg3, arg4);
    _out = SWIG_From_int(static_cast<int>(result));
    if (_out) --resc, *resv++ = _out;
    if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
    if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
    return 0;
fail:
    if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
    if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
    return 1;
}

int _wrap_gridDynObject_getValue(int resc, mxArray* resv[], int argc, mxArray* argv[])
{
    gridDynObject arg1 = (gridDynObject)(gridDynObject)0;
    char* arg2 = (char*)0;
    double* arg3 = (double*)0;
    int res1;
    int res2;
    char* buf2 = 0;
    int alloc2 = 0;
    void* argp3 = 0;
    int res3 = 0;
    mxArray* _out;
    griddyn_status result;

    if (!SWIG_check_num_args("gridDynObject_getValue", argc, 3, 3, 0)) {
        SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(argv[0], SWIG_as_voidptrptr(&arg1), 0, 0);
    if (!SWIG_IsOK(res1)) {
        SWIG_exception_fail(SWIG_ArgError(res1),
                            "in method '"
                            "gridDynObject_getValue"
                            "', argument "
                            "1"
                            " of type '"
                            "gridDynObject const"
                            "'");
    }
    res2 = SWIG_AsCharPtrAndSize(argv[1], &buf2, NULL, &alloc2);
    if (!SWIG_IsOK(res2)) {
        SWIG_exception_fail(SWIG_ArgError(res2),
                            "in method '"
                            "gridDynObject_getValue"
                            "', argument "
                            "2"
                            " of type '"
                            "char const *"
                            "'");
    }
    arg2 = reinterpret_cast<char*>(buf2);
    res3 = SWIG_ConvertPtr(argv[2], &argp3, SWIGTYPE_p_double, 0 | 0);
    if (!SWIG_IsOK(res3)) {
        SWIG_exception_fail(SWIG_ArgError(res3),
                            "in method '"
                            "gridDynObject_getValue"
                            "', argument "
                            "3"
                            " of type '"
                            "double *"
                            "'");
    }
    arg3 = reinterpret_cast<double*>(argp3);
    result = (griddyn_status)gridDynObject_getValue(arg1, (char const*)arg2, arg3);
    _out = SWIG_From_int(static_cast<int>(result));
    if (_out) --resc, *resv++ = _out;
    if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
    return 0;
fail:
    if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
    return 1;
}

int _wrap_gridDynObject_getValueUnits(int resc, mxArray* resv[], int argc, mxArray* argv[])
{
    gridDynObject arg1 = (gridDynObject)(gridDynObject)0;
    char* arg2 = (char*)0;
    char* arg3 = (char*)0;
    double* arg4 = (double*)0;
    int res1;
    int res2;
    char* buf2 = 0;
    int alloc2 = 0;
    int res3;
    char* buf3 = 0;
    int alloc3 = 0;
    void* argp4 = 0;
    int res4 = 0;
    mxArray* _out;
    griddyn_status result;

    if (!SWIG_check_num_args("gridDynObject_getValueUnits", argc, 4, 4, 0)) {
        SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(argv[0], SWIG_as_voidptrptr(&arg1), 0, 0);
    if (!SWIG_IsOK(res1)) {
        SWIG_exception_fail(SWIG_ArgError(res1),
                            "in method '"
                            "gridDynObject_getValueUnits"
                            "', argument "
                            "1"
                            " of type '"
                            "gridDynObject const"
                            "'");
    }
    res2 = SWIG_AsCharPtrAndSize(argv[1], &buf2, NULL, &alloc2);
    if (!SWIG_IsOK(res2)) {
        SWIG_exception_fail(SWIG_ArgError(res2),
                            "in method '"
                            "gridDynObject_getValueUnits"
                            "', argument "
                            "2"
                            " of type '"
                            "char const *"
                            "'");
    }
    arg2 = reinterpret_cast<char*>(buf2);
    res3 = SWIG_AsCharPtrAndSize(argv[2], &buf3, NULL, &alloc3);
    if (!SWIG_IsOK(res3)) {
        SWIG_exception_fail(SWIG_ArgError(res3),
                            "in method '"
                            "gridDynObject_getValueUnits"
                            "', argument "
                            "3"
                            " of type '"
                            "char const *"
                            "'");
    }
    arg3 = reinterpret_cast<char*>(buf3);
    res4 = SWIG_ConvertPtr(argv[3], &argp4, SWIGTYPE_p_double, 0 | 0);
    if (!SWIG_IsOK(res4)) {
        SWIG_exception_fail(SWIG_ArgError(res4),
                            "in method '"
                            "gridDynObject_getValueUnits"
                            "', argument "
                            "4"
                            " of type '"
                            "double *"
                            "'");
    }
    arg4 = reinterpret_cast<double*>(argp4);
    result = (griddyn_status)
        gridDynObject_getValueUnits(arg1, (char const*)arg2, (char const*)arg3, arg4);
    _out = SWIG_From_int(static_cast<int>(result));
    if (_out) --resc, *resv++ = _out;
    if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
    if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
    return 0;
fail:
    if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
    if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
    return 1;
}

int _wrap_gridDynObject_getFlag(int resc, mxArray* resv[], int argc, mxArray* argv[])
{
    gridDynObject arg1 = (gridDynObject)(gridDynObject)0;
    char* arg2 = (char*)0;
    int* arg3 = (int*)0;
    int res1;
    int res2;
    char* buf2 = 0;
    int alloc2 = 0;
    void* argp3 = 0;
    int res3 = 0;
    mxArray* _out;
    griddyn_status result;

    if (!SWIG_check_num_args("gridDynObject_getFlag", argc, 3, 3, 0)) {
        SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(argv[0], SWIG_as_voidptrptr(&arg1), 0, 0);
    if (!SWIG_IsOK(res1)) {
        SWIG_exception_fail(SWIG_ArgError(res1),
                            "in method '"
                            "gridDynObject_getFlag"
                            "', argument "
                            "1"
                            " of type '"
                            "gridDynObject const"
                            "'");
    }
    res2 = SWIG_AsCharPtrAndSize(argv[1], &buf2, NULL, &alloc2);
    if (!SWIG_IsOK(res2)) {
        SWIG_exception_fail(SWIG_ArgError(res2),
                            "in method '"
                            "gridDynObject_getFlag"
                            "', argument "
                            "2"
                            " of type '"
                            "char const *"
                            "'");
    }
    arg2 = reinterpret_cast<char*>(buf2);
    res3 = SWIG_ConvertPtr(argv[2], &argp3, SWIGTYPE_p_int, 0 | 0);
    if (!SWIG_IsOK(res3)) {
        SWIG_exception_fail(SWIG_ArgError(res3),
                            "in method '"
                            "gridDynObject_getFlag"
                            "', argument "
                            "3"
                            " of type '"
                            "int *"
                            "'");
    }
    arg3 = reinterpret_cast<int*>(argp3);
    result = (griddyn_status)gridDynObject_getFlag(arg1, (char const*)arg2, arg3);
    _out = SWIG_From_int(static_cast<int>(result));
    if (_out) --resc, *resv++ = _out;
    if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
    return 0;
fail:
    if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
    return 1;
}

int _wrap_gridDynObject_find(int resc, mxArray* resv[], int argc, mxArray* argv[])
{
    gridDynObject arg1 = (gridDynObject)(gridDynObject)0;
    char* arg2 = (char*)0;
    int res1;
    int res2;
    char* buf2 = 0;
    int alloc2 = 0;
    mxArray* _out;
    gridDynObject result;

    if (!SWIG_check_num_args("gridDynObject_find", argc, 2, 2, 0)) {
        SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(argv[0], SWIG_as_voidptrptr(&arg1), 0, 0);
    if (!SWIG_IsOK(res1)) {
        SWIG_exception_fail(SWIG_ArgError(res1),
                            "in method '"
                            "gridDynObject_find"
                            "', argument "
                            "1"
                            " of type '"
                            "gridDynObject const"
                            "'");
    }
    res2 = SWIG_AsCharPtrAndSize(argv[1], &buf2, NULL, &alloc2);
    if (!SWIG_IsOK(res2)) {
        SWIG_exception_fail(SWIG_ArgError(res2),
                            "in method '"
                            "gridDynObject_find"
                            "', argument "
                            "2"
                            " of type '"
                            "char const *"
                            "'");
    }
    arg2 = reinterpret_cast<char*>(buf2);
    result = (gridDynObject)gridDynObject_find(arg1, (char const*)arg2);
    _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_void, 0 | 0);
    if (_out) --resc, *resv++ = _out;
    if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
    return 0;
fail:
    if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
    return 1;
}

int _wrap_gridDynObject_getSubObject(int resc, mxArray* resv[], int argc, mxArray* argv[])
{
    gridDynObject arg1 = (gridDynObject)(gridDynObject)0;
    char* arg2 = (char*)0;
    int arg3;
    int res1;
    int res2;
    char* buf2 = 0;
    int alloc2 = 0;
    int val3;
    int ecode3 = 0;
    mxArray* _out;
    gridDynObject result;

    if (!SWIG_check_num_args("gridDynObject_getSubObject", argc, 3, 3, 0)) {
        SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(argv[0], SWIG_as_voidptrptr(&arg1), 0, 0);
    if (!SWIG_IsOK(res1)) {
        SWIG_exception_fail(SWIG_ArgError(res1),
                            "in method '"
                            "gridDynObject_getSubObject"
                            "', argument "
                            "1"
                            " of type '"
                            "gridDynObject const"
                            "'");
    }
    res2 = SWIG_AsCharPtrAndSize(argv[1], &buf2, NULL, &alloc2);
    if (!SWIG_IsOK(res2)) {
        SWIG_exception_fail(SWIG_ArgError(res2),
                            "in method '"
                            "gridDynObject_getSubObject"
                            "', argument "
                            "2"
                            " of type '"
                            "char const *"
                            "'");
    }
    arg2 = reinterpret_cast<char*>(buf2);
    ecode3 = SWIG_AsVal_int(argv[2], &val3);
    if (!SWIG_IsOK(ecode3)) {
        SWIG_exception_fail(SWIG_ArgError(ecode3),
                            "in method '"
                            "gridDynObject_getSubObject"
                            "', argument "
                            "3"
                            " of type '"
                            "int"
                            "'");
    }
    arg3 = static_cast<int>(val3);
    result = (gridDynObject)gridDynObject_getSubObject(arg1, (char const*)arg2, arg3);
    _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_void, 0 | 0);
    if (_out) --resc, *resv++ = _out;
    if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
    return 0;
fail:
    if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
    return 1;
}

int _wrap_gridDynObject_findByUserId(int resc, mxArray* resv[], int argc, mxArray* argv[])
{
    gridDynObject arg1 = (gridDynObject)(gridDynObject)0;
    char* arg2 = (char*)0;
    int arg3;
    int res1;
    int res2;
    char* buf2 = 0;
    int alloc2 = 0;
    int val3;
    int ecode3 = 0;
    mxArray* _out;
    gridDynObject result;

    if (!SWIG_check_num_args("gridDynObject_findByUserId", argc, 3, 3, 0)) {
        SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(argv[0], SWIG_as_voidptrptr(&arg1), 0, 0);
    if (!SWIG_IsOK(res1)) {
        SWIG_exception_fail(SWIG_ArgError(res1),
                            "in method '"
                            "gridDynObject_findByUserId"
                            "', argument "
                            "1"
                            " of type '"
                            "gridDynObject const"
                            "'");
    }
    res2 = SWIG_AsCharPtrAndSize(argv[1], &buf2, NULL, &alloc2);
    if (!SWIG_IsOK(res2)) {
        SWIG_exception_fail(SWIG_ArgError(res2),
                            "in method '"
                            "gridDynObject_findByUserId"
                            "', argument "
                            "2"
                            " of type '"
                            "char const *"
                            "'");
    }
    arg2 = reinterpret_cast<char*>(buf2);
    ecode3 = SWIG_AsVal_int(argv[2], &val3);
    if (!SWIG_IsOK(ecode3)) {
        SWIG_exception_fail(SWIG_ArgError(ecode3),
                            "in method '"
                            "gridDynObject_findByUserId"
                            "', argument "
                            "3"
                            " of type '"
                            "int"
                            "'");
    }
    arg3 = static_cast<int>(val3);
    result = (gridDynObject)gridDynObject_findByUserId(arg1, (char const*)arg2, arg3);
    _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_void, 0 | 0);
    if (_out) --resc, *resv++ = _out;
    if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
    return 0;
fail:
    if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
    return 1;
}

int _wrap_gridDynObject_getParent(int resc, mxArray* resv[], int argc, mxArray* argv[])
{
    gridDynObject arg1 = (gridDynObject)(gridDynObject)0;
    int res1;
    mxArray* _out;
    gridDynObject result;

    if (!SWIG_check_num_args("gridDynObject_getParent", argc, 1, 1, 0)) {
        SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(argv[0], SWIG_as_voidptrptr(&arg1), 0, 0);
    if (!SWIG_IsOK(res1)) {
        SWIG_exception_fail(SWIG_ArgError(res1),
                            "in method '"
                            "gridDynObject_getParent"
                            "', argument "
                            "1"
                            " of type '"
                            "gridDynObject const"
                            "'");
    }
    result = (gridDynObject)gridDynObject_getParent(arg1);
    _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_void, 0 | 0);
    if (_out) --resc, *resv++ = _out;
    return 0;
fail:
    return 1;
}

int _wrap_gridDynObject_getType(int resc, mxArray* resv[], int argc, mxArray* argv[])
{
    gridDynObject arg1 = (gridDynObject)(gridDynObject)0;
    int res1;
    mxArray* _out;
    char* result = 0;

    if (!SWIG_check_num_args("gridDynObject_getType", argc, 1, 1, 0)) {
        SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(argv[0], SWIG_as_voidptrptr(&arg1), 0, 0);
    if (!SWIG_IsOK(res1)) {
        SWIG_exception_fail(SWIG_ArgError(res1),
                            "in method '"
                            "gridDynObject_getType"
                            "', argument "
                            "1"
                            " of type '"
                            "gridDynObject const"
                            "'");
    }
    result = (char*)gridDynObject_getType(arg1);
    _out = SWIG_FromCharPtr((const char*)result);
    if (_out) --resc, *resv++ = _out;
    return 0;
fail:
    return 1;
}

int _wrap_gridDynSimulation_create(int resc, mxArray* resv[], int argc, mxArray* argv[])
{
    char* arg1 = (char*)0;
    char* arg2 = (char*)0;
    int res1;
    char* buf1 = 0;
    int alloc1 = 0;
    int res2;
    char* buf2 = 0;
    int alloc2 = 0;
    mxArray* _out;
    gridDynSimReference result;

    if (!SWIG_check_num_args("gridDynSimulation_create", argc, 2, 2, 0)) {
        SWIG_fail;
    }
    res1 = SWIG_AsCharPtrAndSize(argv[0], &buf1, NULL, &alloc1);
    if (!SWIG_IsOK(res1)) {
        SWIG_exception_fail(SWIG_ArgError(res1),
                            "in method '"
                            "gridDynSimulation_create"
                            "', argument "
                            "1"
                            " of type '"
                            "char const *"
                            "'");
    }
    arg1 = reinterpret_cast<char*>(buf1);
    res2 = SWIG_AsCharPtrAndSize(argv[1], &buf2, NULL, &alloc2);
    if (!SWIG_IsOK(res2)) {
        SWIG_exception_fail(SWIG_ArgError(res2),
                            "in method '"
                            "gridDynSimulation_create"
                            "', argument "
                            "2"
                            " of type '"
                            "char const *"
                            "'");
    }
    arg2 = reinterpret_cast<char*>(buf2);
    result = (gridDynSimReference)gridDynSimulation_create((char const*)arg1, (char const*)arg2);
    _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_void, 0 | 0);
    if (_out) --resc, *resv++ = _out;
    if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
    if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
    return 0;
fail:
    if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
    if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
    return 1;
}

int _wrap_gridDynSimulation_free(int resc, mxArray* resv[], int argc, mxArray* argv[])
{
    gridDynSimReference arg1 = (gridDynSimReference)0;
    int res1;
    mxArray* _out;

    if (!SWIG_check_num_args("gridDynSimulation_free", argc, 1, 1, 0)) {
        SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(argv[0], SWIG_as_voidptrptr(&arg1), 0, 0);
    if (!SWIG_IsOK(res1)) {
        SWIG_exception_fail(SWIG_ArgError(res1),
                            "in method '"
                            "gridDynSimulation_free"
                            "', argument "
                            "1"
                            " of type '"
                            "gridDynSimReference"
                            "'");
    }
    gridDynSimulation_free(arg1);
    _out = (mxArray*)0;
    if (_out) --resc, *resv++ = _out;
    return 0;
fail:
    return 1;
}

int _wrap_gridDynSimulation_initializeFromString(int resc,
                                                 mxArray* resv[],
                                                 int argc,
                                                 mxArray* argv[])
{
    gridDynSimReference arg1 = (gridDynSimReference)0;
    char* arg2 = (char*)0;
    int res1;
    int res2;
    char* buf2 = 0;
    int alloc2 = 0;
    mxArray* _out;
    griddyn_status result;

    if (!SWIG_check_num_args("gridDynSimulation_initializeFromString", argc, 2, 2, 0)) {
        SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(argv[0], SWIG_as_voidptrptr(&arg1), 0, 0);
    if (!SWIG_IsOK(res1)) {
        SWIG_exception_fail(SWIG_ArgError(res1),
                            "in method '"
                            "gridDynSimulation_initializeFromString"
                            "', argument "
                            "1"
                            " of type '"
                            "gridDynSimReference"
                            "'");
    }
    res2 = SWIG_AsCharPtrAndSize(argv[1], &buf2, NULL, &alloc2);
    if (!SWIG_IsOK(res2)) {
        SWIG_exception_fail(SWIG_ArgError(res2),
                            "in method '"
                            "gridDynSimulation_initializeFromString"
                            "', argument "
                            "2"
                            " of type '"
                            "char const *"
                            "'");
    }
    arg2 = reinterpret_cast<char*>(buf2);
    result = (griddyn_status)gridDynSimulation_initializeFromString(arg1, (char const*)arg2);
    _out = SWIG_From_int(static_cast<int>(result));
    if (_out) --resc, *resv++ = _out;
    if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
    return 0;
fail:
    if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
    return 1;
}

int _wrap_gridDynSimulation_initializeFromArgs(int resc, mxArray* resv[], int argc, mxArray* argv[])
{
    gridDynSimReference arg1 = (gridDynSimReference)0;
    int arg2;
    char** arg3;
    int arg4;
    int res1;
    int val2;
    int ecode2 = 0;
    void* argp3 = 0;
    int res3 = 0;
    int val4;
    int ecode4 = 0;
    mxArray* _out;
    griddyn_status result;

    if (!SWIG_check_num_args("gridDynSimulation_initializeFromArgs", argc, 4, 4, 0)) {
        SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(argv[0], SWIG_as_voidptrptr(&arg1), 0, 0);
    if (!SWIG_IsOK(res1)) {
        SWIG_exception_fail(SWIG_ArgError(res1),
                            "in method '"
                            "gridDynSimulation_initializeFromArgs"
                            "', argument "
                            "1"
                            " of type '"
                            "gridDynSimReference"
                            "'");
    }
    ecode2 = SWIG_AsVal_int(argv[1], &val2);
    if (!SWIG_IsOK(ecode2)) {
        SWIG_exception_fail(SWIG_ArgError(ecode2),
                            "in method '"
                            "gridDynSimulation_initializeFromArgs"
                            "', argument "
                            "2"
                            " of type '"
                            "int"
                            "'");
    }
    arg2 = static_cast<int>(val2);
    res3 = SWIG_ConvertPtr(argv[2], &argp3, SWIGTYPE_p_p_char, 0 | 0);
    if (!SWIG_IsOK(res3)) {
        SWIG_exception_fail(SWIG_ArgError(res3),
                            "in method '"
                            "gridDynSimulation_initializeFromArgs"
                            "', argument "
                            "3"
                            " of type '"
                            "char *[]"
                            "'");
    }
    arg3 = reinterpret_cast<char**>(argp3);
    ecode4 = SWIG_AsVal_int(argv[3], &val4);
    if (!SWIG_IsOK(ecode4)) {
        SWIG_exception_fail(SWIG_ArgError(ecode4),
                            "in method '"
                            "gridDynSimulation_initializeFromArgs"
                            "', argument "
                            "4"
                            " of type '"
                            "int"
                            "'");
    }
    arg4 = static_cast<int>(val4);
    result = (griddyn_status)gridDynSimulation_initializeFromArgs(arg1, arg2, arg3, arg4);
    _out = SWIG_From_int(static_cast<int>(result));
    if (_out) --resc, *resv++ = _out;
    return 0;
fail:
    return 1;
}

int _wrap_gridDynSimulation_loadfile(int resc, mxArray* resv[], int argc, mxArray* argv[])
{
    gridDynSimReference arg1 = (gridDynSimReference)0;
    char* arg2 = (char*)0;
    char* arg3 = (char*)0;
    int res1;
    int res2;
    char* buf2 = 0;
    int alloc2 = 0;
    int res3;
    char* buf3 = 0;
    int alloc3 = 0;
    mxArray* _out;
    griddyn_status result;

    if (!SWIG_check_num_args("gridDynSimulation_loadfile", argc, 3, 3, 0)) {
        SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(argv[0], SWIG_as_voidptrptr(&arg1), 0, 0);
    if (!SWIG_IsOK(res1)) {
        SWIG_exception_fail(SWIG_ArgError(res1),
                            "in method '"
                            "gridDynSimulation_loadfile"
                            "', argument "
                            "1"
                            " of type '"
                            "gridDynSimReference"
                            "'");
    }
    res2 = SWIG_AsCharPtrAndSize(argv[1], &buf2, NULL, &alloc2);
    if (!SWIG_IsOK(res2)) {
        SWIG_exception_fail(SWIG_ArgError(res2),
                            "in method '"
                            "gridDynSimulation_loadfile"
                            "', argument "
                            "2"
                            " of type '"
                            "char const *"
                            "'");
    }
    arg2 = reinterpret_cast<char*>(buf2);
    res3 = SWIG_AsCharPtrAndSize(argv[2], &buf3, NULL, &alloc3);
    if (!SWIG_IsOK(res3)) {
        SWIG_exception_fail(SWIG_ArgError(res3),
                            "in method '"
                            "gridDynSimulation_loadfile"
                            "', argument "
                            "3"
                            " of type '"
                            "char const *"
                            "'");
    }
    arg3 = reinterpret_cast<char*>(buf3);
    result = (griddyn_status)gridDynSimulation_loadfile(arg1, (char const*)arg2, (char const*)arg3);
    _out = SWIG_From_int(static_cast<int>(result));
    if (_out) --resc, *resv++ = _out;
    if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
    if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
    return 0;
fail:
    if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
    if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
    return 1;
}

int _wrap_gridDynSimulation_addCommand(int resc, mxArray* resv[], int argc, mxArray* argv[])
{
    gridDynSimReference arg1 = (gridDynSimReference)0;
    char* arg2 = (char*)0;
    int res1;
    int res2;
    char* buf2 = 0;
    int alloc2 = 0;
    mxArray* _out;
    griddyn_status result;

    if (!SWIG_check_num_args("gridDynSimulation_addCommand", argc, 2, 2, 0)) {
        SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(argv[0], SWIG_as_voidptrptr(&arg1), 0, 0);
    if (!SWIG_IsOK(res1)) {
        SWIG_exception_fail(SWIG_ArgError(res1),
                            "in method '"
                            "gridDynSimulation_addCommand"
                            "', argument "
                            "1"
                            " of type '"
                            "gridDynSimReference"
                            "'");
    }
    res2 = SWIG_AsCharPtrAndSize(argv[1], &buf2, NULL, &alloc2);
    if (!SWIG_IsOK(res2)) {
        SWIG_exception_fail(SWIG_ArgError(res2),
                            "in method '"
                            "gridDynSimulation_addCommand"
                            "', argument "
                            "2"
                            " of type '"
                            "char const *"
                            "'");
    }
    arg2 = reinterpret_cast<char*>(buf2);
    result = (griddyn_status)gridDynSimulation_addCommand(arg1, (char const*)arg2);
    _out = SWIG_From_int(static_cast<int>(result));
    if (_out) --resc, *resv++ = _out;
    if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
    return 0;
fail:
    if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
    return 1;
}

int _wrap_gridDynSimulation_powerflowInitialize(int resc,
                                                mxArray* resv[],
                                                int argc,
                                                mxArray* argv[])
{
    gridDynSimReference arg1 = (gridDynSimReference)0;
    int res1;
    mxArray* _out;
    griddyn_status result;

    if (!SWIG_check_num_args("gridDynSimulation_powerflowInitialize", argc, 1, 1, 0)) {
        SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(argv[0], SWIG_as_voidptrptr(&arg1), 0, 0);
    if (!SWIG_IsOK(res1)) {
        SWIG_exception_fail(SWIG_ArgError(res1),
                            "in method '"
                            "gridDynSimulation_powerflowInitialize"
                            "', argument "
                            "1"
                            " of type '"
                            "gridDynSimReference"
                            "'");
    }
    result = (griddyn_status)gridDynSimulation_powerflowInitialize(arg1);
    _out = SWIG_From_int(static_cast<int>(result));
    if (_out) --resc, *resv++ = _out;
    return 0;
fail:
    return 1;
}

int _wrap_gridDynSimulation_powerflow(int resc, mxArray* resv[], int argc, mxArray* argv[])
{
    gridDynSimReference arg1 = (gridDynSimReference)0;
    int res1;
    mxArray* _out;
    griddyn_status result;

    if (!SWIG_check_num_args("gridDynSimulation_powerflow", argc, 1, 1, 0)) {
        SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(argv[0], SWIG_as_voidptrptr(&arg1), 0, 0);
    if (!SWIG_IsOK(res1)) {
        SWIG_exception_fail(SWIG_ArgError(res1),
                            "in method '"
                            "gridDynSimulation_powerflow"
                            "', argument "
                            "1"
                            " of type '"
                            "gridDynSimReference"
                            "'");
    }
    result = (griddyn_status)gridDynSimulation_powerflow(arg1);
    _out = SWIG_From_int(static_cast<int>(result));
    if (_out) --resc, *resv++ = _out;
    return 0;
fail:
    return 1;
}

int _wrap_gridDynSimulation_dynamicInitialize(int resc, mxArray* resv[], int argc, mxArray* argv[])
{
    gridDynSimReference arg1 = (gridDynSimReference)0;
    int res1;
    mxArray* _out;
    griddyn_status result;

    if (!SWIG_check_num_args("gridDynSimulation_dynamicInitialize", argc, 1, 1, 0)) {
        SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(argv[0], SWIG_as_voidptrptr(&arg1), 0, 0);
    if (!SWIG_IsOK(res1)) {
        SWIG_exception_fail(SWIG_ArgError(res1),
                            "in method '"
                            "gridDynSimulation_dynamicInitialize"
                            "', argument "
                            "1"
                            " of type '"
                            "gridDynSimReference"
                            "'");
    }
    result = (griddyn_status)gridDynSimulation_dynamicInitialize(arg1);
    _out = SWIG_From_int(static_cast<int>(result));
    if (_out) --resc, *resv++ = _out;
    return 0;
fail:
    return 1;
}

int _wrap_gridDynSimulation_reset(int resc, mxArray* resv[], int argc, mxArray* argv[])
{
    gridDynSimReference arg1 = (gridDynSimReference)0;
    int res1;
    mxArray* _out;
    griddyn_status result;

    if (!SWIG_check_num_args("gridDynSimulation_reset", argc, 1, 1, 0)) {
        SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(argv[0], SWIG_as_voidptrptr(&arg1), 0, 0);
    if (!SWIG_IsOK(res1)) {
        SWIG_exception_fail(SWIG_ArgError(res1),
                            "in method '"
                            "gridDynSimulation_reset"
                            "', argument "
                            "1"
                            " of type '"
                            "gridDynSimReference"
                            "'");
    }
    result = (griddyn_status)gridDynSimulation_reset(arg1);
    _out = SWIG_From_int(static_cast<int>(result));
    if (_out) --resc, *resv++ = _out;
    return 0;
fail:
    return 1;
}

int _wrap_gridDynSimulation_getCurrentTime(int resc, mxArray* resv[], int argc, mxArray* argv[])
{
    gridDynSimReference arg1 = (gridDynSimReference)0;
    int res1;
    mxArray* _out;
    double result;

    if (!SWIG_check_num_args("gridDynSimulation_getCurrentTime", argc, 1, 1, 0)) {
        SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(argv[0], SWIG_as_voidptrptr(&arg1), 0, 0);
    if (!SWIG_IsOK(res1)) {
        SWIG_exception_fail(SWIG_ArgError(res1),
                            "in method '"
                            "gridDynSimulation_getCurrentTime"
                            "', argument "
                            "1"
                            " of type '"
                            "gridDynSimReference"
                            "'");
    }
    result = (double)gridDynSimulation_getCurrentTime(arg1);
    _out = SWIG_From_double(static_cast<double>(result));
    if (_out) --resc, *resv++ = _out;
    return 0;
fail:
    return 1;
}

int _wrap_gridDynSimulation_run(int resc, mxArray* resv[], int argc, mxArray* argv[])
{
    gridDynSimReference arg1 = (gridDynSimReference)0;
    int res1;
    mxArray* _out;
    griddyn_status result;

    if (!SWIG_check_num_args("gridDynSimulation_run", argc, 1, 1, 0)) {
        SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(argv[0], SWIG_as_voidptrptr(&arg1), 0, 0);
    if (!SWIG_IsOK(res1)) {
        SWIG_exception_fail(SWIG_ArgError(res1),
                            "in method '"
                            "gridDynSimulation_run"
                            "', argument "
                            "1"
                            " of type '"
                            "gridDynSimReference"
                            "'");
    }
    result = (griddyn_status)gridDynSimulation_run(arg1);
    _out = SWIG_From_int(static_cast<int>(result));
    if (_out) --resc, *resv++ = _out;
    return 0;
fail:
    return 1;
}

int _wrap_gridDynSimulation_runTo(int resc, mxArray* resv[], int argc, mxArray* argv[])
{
    gridDynSimReference arg1 = (gridDynSimReference)0;
    double arg2;
    int res1;
    double val2;
    int ecode2 = 0;
    mxArray* _out;
    griddyn_status result;

    if (!SWIG_check_num_args("gridDynSimulation_runTo", argc, 2, 2, 0)) {
        SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(argv[0], SWIG_as_voidptrptr(&arg1), 0, 0);
    if (!SWIG_IsOK(res1)) {
        SWIG_exception_fail(SWIG_ArgError(res1),
                            "in method '"
                            "gridDynSimulation_runTo"
                            "', argument "
                            "1"
                            " of type '"
                            "gridDynSimReference"
                            "'");
    }
    ecode2 = SWIG_AsVal_double(argv[1], &val2);
    if (!SWIG_IsOK(ecode2)) {
        SWIG_exception_fail(SWIG_ArgError(ecode2),
                            "in method '"
                            "gridDynSimulation_runTo"
                            "', argument "
                            "2"
                            " of type '"
                            "double"
                            "'");
    }
    arg2 = static_cast<double>(val2);
    result = (griddyn_status)gridDynSimulation_runTo(arg1, arg2);
    _out = SWIG_From_int(static_cast<int>(result));
    if (_out) --resc, *resv++ = _out;
    return 0;
fail:
    return 1;
}

int _wrap_gridDynSimulation_Step(int resc, mxArray* resv[], int argc, mxArray* argv[])
{
    gridDynSimReference arg1 = (gridDynSimReference)0;
    int res1;
    mxArray* _out;
    griddyn_status result;

    if (!SWIG_check_num_args("gridDynSimulation_Step", argc, 1, 1, 0)) {
        SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(argv[0], SWIG_as_voidptrptr(&arg1), 0, 0);
    if (!SWIG_IsOK(res1)) {
        SWIG_exception_fail(SWIG_ArgError(res1),
                            "in method '"
                            "gridDynSimulation_Step"
                            "', argument "
                            "1"
                            " of type '"
                            "gridDynSimReference"
                            "'");
    }
    result = (griddyn_status)gridDynSimulation_Step(arg1);
    _out = SWIG_From_int(static_cast<int>(result));
    if (_out) --resc, *resv++ = _out;
    return 0;
fail:
    return 1;
}

int _wrap_gridDynSimulation_runAsync(int resc, mxArray* resv[], int argc, mxArray* argv[])
{
    gridDynSimReference arg1 = (gridDynSimReference)0;
    int res1;
    mxArray* _out;
    griddyn_status result;

    if (!SWIG_check_num_args("gridDynSimulation_runAsync", argc, 1, 1, 0)) {
        SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(argv[0], SWIG_as_voidptrptr(&arg1), 0, 0);
    if (!SWIG_IsOK(res1)) {
        SWIG_exception_fail(SWIG_ArgError(res1),
                            "in method '"
                            "gridDynSimulation_runAsync"
                            "', argument "
                            "1"
                            " of type '"
                            "gridDynSimReference"
                            "'");
    }
    result = (griddyn_status)gridDynSimulation_runAsync(arg1);
    _out = SWIG_From_int(static_cast<int>(result));
    if (_out) --resc, *resv++ = _out;
    return 0;
fail:
    return 1;
}

int _wrap_gridDynSimulation_runToAsync(int resc, mxArray* resv[], int argc, mxArray* argv[])
{
    gridDynSimReference arg1 = (gridDynSimReference)0;
    double arg2;
    int res1;
    double val2;
    int ecode2 = 0;
    mxArray* _out;
    griddyn_status result;

    if (!SWIG_check_num_args("gridDynSimulation_runToAsync", argc, 2, 2, 0)) {
        SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(argv[0], SWIG_as_voidptrptr(&arg1), 0, 0);
    if (!SWIG_IsOK(res1)) {
        SWIG_exception_fail(SWIG_ArgError(res1),
                            "in method '"
                            "gridDynSimulation_runToAsync"
                            "', argument "
                            "1"
                            " of type '"
                            "gridDynSimReference"
                            "'");
    }
    ecode2 = SWIG_AsVal_double(argv[1], &val2);
    if (!SWIG_IsOK(ecode2)) {
        SWIG_exception_fail(SWIG_ArgError(ecode2),
                            "in method '"
                            "gridDynSimulation_runToAsync"
                            "', argument "
                            "2"
                            " of type '"
                            "double"
                            "'");
    }
    arg2 = static_cast<double>(val2);
    result = (griddyn_status)gridDynSimulation_runToAsync(arg1, arg2);
    _out = SWIG_From_int(static_cast<int>(result));
    if (_out) --resc, *resv++ = _out;
    return 0;
fail:
    return 1;
}

int _wrap_gridDynSimulation_StepAsync(int resc, mxArray* resv[], int argc, mxArray* argv[])
{
    gridDynSimReference arg1 = (gridDynSimReference)0;
    int res1;
    mxArray* _out;
    griddyn_status result;

    if (!SWIG_check_num_args("gridDynSimulation_StepAsync", argc, 1, 1, 0)) {
        SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(argv[0], SWIG_as_voidptrptr(&arg1), 0, 0);
    if (!SWIG_IsOK(res1)) {
        SWIG_exception_fail(SWIG_ArgError(res1),
                            "in method '"
                            "gridDynSimulation_StepAsync"
                            "', argument "
                            "1"
                            " of type '"
                            "gridDynSimReference"
                            "'");
    }
    result = (griddyn_status)gridDynSimulation_StepAsync(arg1);
    _out = SWIG_From_int(static_cast<int>(result));
    if (_out) --resc, *resv++ = _out;
    return 0;
fail:
    return 1;
}

int _wrap_gridDynSimulation_getStatus(int resc, mxArray* resv[], int argc, mxArray* argv[])
{
    gridDynSimReference arg1 = (gridDynSimReference)0;
    int res1;
    mxArray* _out;
    int result;

    if (!SWIG_check_num_args("gridDynSimulation_getStatus", argc, 1, 1, 0)) {
        SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(argv[0], SWIG_as_voidptrptr(&arg1), 0, 0);
    if (!SWIG_IsOK(res1)) {
        SWIG_exception_fail(SWIG_ArgError(res1),
                            "in method '"
                            "gridDynSimulation_getStatus"
                            "', argument "
                            "1"
                            " of type '"
                            "gridDynSimReference"
                            "'");
    }
    result = (int)gridDynSimulation_getStatus(arg1);
    _out = SWIG_From_int(static_cast<int>(result));
    if (_out) --resc, *resv++ = _out;
    return 0;
fail:
    return 1;
}

int _wrap_getSimulationObject(int resc, mxArray* resv[], int argc, mxArray* argv[])
{
    gridDynSimReference arg1 = (gridDynSimReference)0;
    int res1;
    mxArray* _out;
    gridDynObject result;

    if (!SWIG_check_num_args("getSimulationObject", argc, 1, 1, 0)) {
        SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(argv[0], SWIG_as_voidptrptr(&arg1), 0, 0);
    if (!SWIG_IsOK(res1)) {
        SWIG_exception_fail(SWIG_ArgError(res1),
                            "in method '"
                            "getSimulationObject"
                            "', argument "
                            "1"
                            " of type '"
                            "gridDynSimReference"
                            "'");
    }
    result = (gridDynObject)getSimulationObject(arg1);
    _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_void, 0 | 0);
    if (_out) --resc, *resv++ = _out;
    return 0;
fail:
    return 1;
}

int _wrap_gridDynSimulation_getSolverKey(int resc, mxArray* resv[], int argc, mxArray* argv[])
{
    gridDynSimReference arg1 = (gridDynSimReference)0;
    char* arg2 = (char*)0;
    int res1;
    int res2;
    char* buf2 = 0;
    int alloc2 = 0;
    mxArray* _out;
    solverKey result;

    if (!SWIG_check_num_args("gridDynSimulation_getSolverKey", argc, 2, 2, 0)) {
        SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(argv[0], SWIG_as_voidptrptr(&arg1), 0, 0);
    if (!SWIG_IsOK(res1)) {
        SWIG_exception_fail(SWIG_ArgError(res1),
                            "in method '"
                            "gridDynSimulation_getSolverKey"
                            "', argument "
                            "1"
                            " of type '"
                            "gridDynSimReference"
                            "'");
    }
    res2 = SWIG_AsCharPtrAndSize(argv[1], &buf2, NULL, &alloc2);
    if (!SWIG_IsOK(res2)) {
        SWIG_exception_fail(SWIG_ArgError(res2),
                            "in method '"
                            "gridDynSimulation_getSolverKey"
                            "', argument "
                            "2"
                            " of type '"
                            "char const *"
                            "'");
    }
    arg2 = reinterpret_cast<char*>(buf2);
    result = (solverKey)gridDynSimulation_getSolverKey(arg1, (char const*)arg2);
    _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_void, 0 | 0);
    if (_out) --resc, *resv++ = _out;
    if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
    return 0;
fail:
    if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
    return 1;
}

int _wrap_gridDynSolverKey_free(int resc, mxArray* resv[], int argc, mxArray* argv[])
{
    solverKey arg1 = (solverKey)0;
    int res1;
    mxArray* _out;

    if (!SWIG_check_num_args("gridDynSolverKey_free", argc, 1, 1, 0)) {
        SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(argv[0], SWIG_as_voidptrptr(&arg1), 0, 0);
    if (!SWIG_IsOK(res1)) {
        SWIG_exception_fail(SWIG_ArgError(res1),
                            "in method '"
                            "gridDynSolverKey_free"
                            "', argument "
                            "1"
                            " of type '"
                            "solverKey"
                            "'");
    }
    gridDynSolverKey_free(arg1);
    _out = (mxArray*)0;
    if (_out) --resc, *resv++ = _out;
    return 0;
fail:
    return 1;
}

int _wrap_gridDynSimulation_stateSize(int resc, mxArray* resv[], int argc, mxArray* argv[])
{
    gridDynSimReference arg1 = (gridDynSimReference)0;
    solverKey arg2 = (solverKey)0;
    int res1;
    int res2;
    mxArray* _out;
    int result;

    if (!SWIG_check_num_args("gridDynSimulation_stateSize", argc, 2, 2, 0)) {
        SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(argv[0], SWIG_as_voidptrptr(&arg1), 0, 0);
    if (!SWIG_IsOK(res1)) {
        SWIG_exception_fail(SWIG_ArgError(res1),
                            "in method '"
                            "gridDynSimulation_stateSize"
                            "', argument "
                            "1"
                            " of type '"
                            "gridDynSimReference"
                            "'");
    }
    res2 = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&arg2), 0, 0);
    if (!SWIG_IsOK(res2)) {
        SWIG_exception_fail(SWIG_ArgError(res2),
                            "in method '"
                            "gridDynSimulation_stateSize"
                            "', argument "
                            "2"
                            " of type '"
                            "solverKey"
                            "'");
    }
    result = (int)gridDynSimulation_stateSize(arg1, arg2);
    _out = SWIG_From_int(static_cast<int>(result));
    if (_out) --resc, *resv++ = _out;
    return 0;
fail:
    return 1;
}

int _wrap_gridDynSimulation_busCount(int resc, mxArray* resv[], int argc, mxArray* argv[])
{
    gridDynSimReference arg1 = (gridDynSimReference)0;
    int res1;
    mxArray* _out;
    int result;

    if (!SWIG_check_num_args("gridDynSimulation_busCount", argc, 1, 1, 0)) {
        SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(argv[0], SWIG_as_voidptrptr(&arg1), 0, 0);
    if (!SWIG_IsOK(res1)) {
        SWIG_exception_fail(SWIG_ArgError(res1),
                            "in method '"
                            "gridDynSimulation_busCount"
                            "', argument "
                            "1"
                            " of type '"
                            "gridDynSimReference"
                            "'");
    }
    result = (int)gridDynSimulation_busCount(arg1);
    _out = SWIG_From_int(static_cast<int>(result));
    if (_out) --resc, *resv++ = _out;
    return 0;
fail:
    return 1;
}

int _wrap_gridDynSimulation_lineCount(int resc, mxArray* resv[], int argc, mxArray* argv[])
{
    gridDynSimReference arg1 = (gridDynSimReference)0;
    int res1;
    mxArray* _out;
    int result;

    if (!SWIG_check_num_args("gridDynSimulation_lineCount", argc, 1, 1, 0)) {
        SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(argv[0], SWIG_as_voidptrptr(&arg1), 0, 0);
    if (!SWIG_IsOK(res1)) {
        SWIG_exception_fail(SWIG_ArgError(res1),
                            "in method '"
                            "gridDynSimulation_lineCount"
                            "', argument "
                            "1"
                            " of type '"
                            "gridDynSimReference"
                            "'");
    }
    result = (int)gridDynSimulation_lineCount(arg1);
    _out = SWIG_From_int(static_cast<int>(result));
    if (_out) --resc, *resv++ = _out;
    return 0;
fail:
    return 1;
}

int _wrap_gridDynSimulation_getResults__SWIG_1(int resc, mxArray* resv[], int argc, mxArray* argv[])
{
    gridDynSimReference arg1 = (gridDynSimReference)0;
    char* arg2 = (char*)0;
    double* arg3 = (double*)0;
    int arg4;
    int res1;
    int res2;
    char* buf2 = 0;
    int alloc2 = 0;
    void* argp3 = 0;
    int res3 = 0;
    int val4;
    int ecode4 = 0;
    mxArray* _out;
    int result;

    if (!SWIG_check_num_args("gridDynSimulation_getResults", argc, 4, 4, 0)) {
        SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(argv[0], SWIG_as_voidptrptr(&arg1), 0, 0);
    if (!SWIG_IsOK(res1)) {
        SWIG_exception_fail(SWIG_ArgError(res1),
                            "in method '"
                            "gridDynSimulation_getResults"
                            "', argument "
                            "1"
                            " of type '"
                            "gridDynSimReference"
                            "'");
    }
    res2 = SWIG_AsCharPtrAndSize(argv[1], &buf2, NULL, &alloc2);
    if (!SWIG_IsOK(res2)) {
        SWIG_exception_fail(SWIG_ArgError(res2),
                            "in method '"
                            "gridDynSimulation_getResults"
                            "', argument "
                            "2"
                            " of type '"
                            "char const *"
                            "'");
    }
    arg2 = reinterpret_cast<char*>(buf2);
    res3 = SWIG_ConvertPtr(argv[2], &argp3, SWIGTYPE_p_double, 0 | 0);
    if (!SWIG_IsOK(res3)) {
        SWIG_exception_fail(SWIG_ArgError(res3),
                            "in method '"
                            "gridDynSimulation_getResults"
                            "', argument "
                            "3"
                            " of type '"
                            "double *"
                            "'");
    }
    arg3 = reinterpret_cast<double*>(argp3);
    ecode4 = SWIG_AsVal_int(argv[3], &val4);
    if (!SWIG_IsOK(ecode4)) {
        SWIG_exception_fail(SWIG_ArgError(ecode4),
                            "in method '"
                            "gridDynSimulation_getResults"
                            "', argument "
                            "4"
                            " of type '"
                            "int"
                            "'");
    }
    arg4 = static_cast<int>(val4);
    result = (int)gridDynSimulation_getResults(arg1, (char const*)arg2, arg3, arg4);
    _out = SWIG_From_int(static_cast<int>(result));
    if (_out) --resc, *resv++ = _out;
    if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
    return 0;
fail:
    if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
    return 1;
}

int _wrap_gridDynSimulation_getResults(int resc, mxArray* resv[], int argc, mxArray* argv[])
{
    if (argc == 4) {
        int _v;
        void* ptr = 0;
        int res = SWIG_ConvertPtr(argv[0], &ptr, 0, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
            int res = SWIG_AsCharPtrAndSize(argv[1], 0, NULL, 0);
            _v = SWIG_CheckState(res);
            if (_v) {
                void* vptr = 0;
                int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_double, 0);
                _v = SWIG_CheckState(res);
                if (_v) {
                    {
                        int res = SWIG_AsVal_int(argv[3], NULL);
                        _v = SWIG_CheckState(res);
                    }
                    if (_v) {
                        return _wrap_gridDynSimulation_getResults__SWIG_0(resc, resv, argc, argv);
                    }
                }
            }
        }
    }
    if (argc == 4) {
        int _v;
        void* ptr = 0;
        int res = SWIG_ConvertPtr(argv[0], &ptr, 0, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
            int res = SWIG_AsCharPtrAndSize(argv[1], 0, NULL, 0);
            _v = SWIG_CheckState(res);
            if (_v) {
                void* vptr = 0;
                int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_double, 0);
                _v = SWIG_CheckState(res);
                if (_v) {
                    {
                        int res = SWIG_AsVal_int(argv[3], NULL);
                        _v = SWIG_CheckState(res);
                    }
                    if (_v) {
                        return _wrap_gridDynSimulation_getResults__SWIG_1(resc, resv, argc, argv);
                    }
                }
            }
        }
    }

    SWIG_Error(SWIG_RuntimeError,
               "No matching function for overload function 'gridDynSimulation_getResults'."
               "  Possible C/C++ prototypes are:\n"
               "    gridDynSimulation_getResults(gridDynSimReference,char const *,double [0],int)\n"
               "    gridDynSimulation_getResults(gridDynSimReference,char const *,double *,int)\n");
    return 1;
}

int _wrap_gridDynSimulation_guessState(int resc, mxArray* resv[], int argc, mxArray* argv[])
{
    gridDynSimReference arg1 = (gridDynSimReference)0;
    double arg2;
    double* arg3 = (double*)0;
    double* arg4 = (double*)0;
    solverKey arg5 = (solverKey)0;
    int res1;
    double val2;
    int ecode2 = 0;
    void* argp3 = 0;
    int res3 = 0;
    void* argp4 = 0;
    int res4 = 0;
    int res5;
    mxArray* _out;
    griddyn_status result;

    if (!SWIG_check_num_args("gridDynSimulation_guessState", argc, 5, 5, 0)) {
        SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(argv[0], SWIG_as_voidptrptr(&arg1), 0, 0);
    if (!SWIG_IsOK(res1)) {
        SWIG_exception_fail(SWIG_ArgError(res1),
                            "in method '"
                            "gridDynSimulation_guessState"
                            "', argument "
                            "1"
                            " of type '"
                            "gridDynSimReference"
                            "'");
    }
    ecode2 = SWIG_AsVal_double(argv[1], &val2);
    if (!SWIG_IsOK(ecode2)) {
        SWIG_exception_fail(SWIG_ArgError(ecode2),
                            "in method '"
                            "gridDynSimulation_guessState"
                            "', argument "
                            "2"
                            " of type '"
                            "double"
                            "'");
    }
    arg2 = static_cast<double>(val2);
    res3 = SWIG_ConvertPtr(argv[2], &argp3, SWIGTYPE_p_double, 0 | 0);
    if (!SWIG_IsOK(res3)) {
        SWIG_exception_fail(SWIG_ArgError(res3),
                            "in method '"
                            "gridDynSimulation_guessState"
                            "', argument "
                            "3"
                            " of type '"
                            "double *"
                            "'");
    }
    arg3 = reinterpret_cast<double*>(argp3);
    res4 = SWIG_ConvertPtr(argv[3], &argp4, SWIGTYPE_p_double, 0 | 0);
    if (!SWIG_IsOK(res4)) {
        SWIG_exception_fail(SWIG_ArgError(res4),
                            "in method '"
                            "gridDynSimulation_guessState"
                            "', argument "
                            "4"
                            " of type '"
                            "double *"
                            "'");
    }
    arg4 = reinterpret_cast<double*>(argp4);
    res5 = SWIG_ConvertPtr(argv[4], SWIG_as_voidptrptr(&arg5), 0, 0);
    if (!SWIG_IsOK(res5)) {
        SWIG_exception_fail(SWIG_ArgError(res5),
                            "in method '"
                            "gridDynSimulation_guessState"
                            "', argument "
                            "5"
                            " of type '"
                            "solverKey"
                            "'");
    }
    result = (griddyn_status)gridDynSimulation_guessState(arg1, arg2, arg3, arg4, arg5);
    _out = SWIG_From_int(static_cast<int>(result));
    if (_out) --resc, *resv++ = _out;
    return 0;
fail:
    return 1;
}

int _wrap_gridDynSimulation_setState(int resc, mxArray* resv[], int argc, mxArray* argv[])
{
    gridDynSimReference arg1 = (gridDynSimReference)0;
    double arg2;
    double* arg3 = (double*)0;
    double* arg4 = (double*)0;
    solverKey arg5 = (solverKey)0;
    int res1;
    double val2;
    int ecode2 = 0;
    void* argp3 = 0;
    int res3 = 0;
    void* argp4 = 0;
    int res4 = 0;
    int res5;
    mxArray* _out;
    griddyn_status result;

    if (!SWIG_check_num_args("gridDynSimulation_setState", argc, 5, 5, 0)) {
        SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(argv[0], SWIG_as_voidptrptr(&arg1), 0, 0);
    if (!SWIG_IsOK(res1)) {
        SWIG_exception_fail(SWIG_ArgError(res1),
                            "in method '"
                            "gridDynSimulation_setState"
                            "', argument "
                            "1"
                            " of type '"
                            "gridDynSimReference"
                            "'");
    }
    ecode2 = SWIG_AsVal_double(argv[1], &val2);
    if (!SWIG_IsOK(ecode2)) {
        SWIG_exception_fail(SWIG_ArgError(ecode2),
                            "in method '"
                            "gridDynSimulation_setState"
                            "', argument "
                            "2"
                            " of type '"
                            "double"
                            "'");
    }
    arg2 = static_cast<double>(val2);
    res3 = SWIG_ConvertPtr(argv[2], &argp3, SWIGTYPE_p_double, 0 | 0);
    if (!SWIG_IsOK(res3)) {
        SWIG_exception_fail(SWIG_ArgError(res3),
                            "in method '"
                            "gridDynSimulation_setState"
                            "', argument "
                            "3"
                            " of type '"
                            "double const *"
                            "'");
    }
    arg3 = reinterpret_cast<double*>(argp3);
    res4 = SWIG_ConvertPtr(argv[3], &argp4, SWIGTYPE_p_double, 0 | 0);
    if (!SWIG_IsOK(res4)) {
        SWIG_exception_fail(SWIG_ArgError(res4),
                            "in method '"
                            "gridDynSimulation_setState"
                            "', argument "
                            "4"
                            " of type '"
                            "double const *"
                            "'");
    }
    arg4 = reinterpret_cast<double*>(argp4);
    res5 = SWIG_ConvertPtr(argv[4], SWIG_as_voidptrptr(&arg5), 0, 0);
    if (!SWIG_IsOK(res5)) {
        SWIG_exception_fail(SWIG_ArgError(res5),
                            "in method '"
                            "gridDynSimulation_setState"
                            "', argument "
                            "5"
                            " of type '"
                            "solverKey"
                            "'");
    }
    result = (griddyn_status)
        gridDynSimulation_setState(arg1, arg2, (double const*)arg3, (double const*)arg4, arg5);
    _out = SWIG_From_int(static_cast<int>(result));
    if (_out) --resc, *resv++ = _out;
    return 0;
fail:
    return 1;
}

int _wrap_gridDynSimulation_getStateVariableTypes(int resc,
                                                  mxArray* resv[],
                                                  int argc,
                                                  mxArray* argv[])
{
    gridDynSimReference arg1 = (gridDynSimReference)0;
    double* arg2 = (double*)0;
    solverKey arg3 = (solverKey)0;
    int res1;
    void* argp2 = 0;
    int res2 = 0;
    int res3;
    mxArray* _out;
    griddyn_status result;

    if (!SWIG_check_num_args("gridDynSimulation_getStateVariableTypes", argc, 3, 3, 0)) {
        SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(argv[0], SWIG_as_voidptrptr(&arg1), 0, 0);
    if (!SWIG_IsOK(res1)) {
        SWIG_exception_fail(SWIG_ArgError(res1),
                            "in method '"
                            "gridDynSimulation_getStateVariableTypes"
                            "', argument "
                            "1"
                            " of type '"
                            "gridDynSimReference"
                            "'");
    }
    res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_double, 0 | 0);
    if (!SWIG_IsOK(res2)) {
        SWIG_exception_fail(SWIG_ArgError(res2),
                            "in method '"
                            "gridDynSimulation_getStateVariableTypes"
                            "', argument "
                            "2"
                            " of type '"
                            "double *"
                            "'");
    }
    arg2 = reinterpret_cast<double*>(argp2);
    res3 = SWIG_ConvertPtr(argv[2], SWIG_as_voidptrptr(&arg3), 0, 0);
    if (!SWIG_IsOK(res3)) {
        SWIG_exception_fail(SWIG_ArgError(res3),
                            "in method '"
                            "gridDynSimulation_getStateVariableTypes"
                            "', argument "
                            "3"
                            " of type '"
                            "solverKey"
                            "'");
    }
    result = (griddyn_status)gridDynSimulation_getStateVariableTypes(arg1, arg2, arg3);
    _out = SWIG_From_int(static_cast<int>(result));
    if (_out) --resc, *resv++ = _out;
    return 0;
fail:
    return 1;
}

int _wrap_gridDynSimulation_residual(int resc, mxArray* resv[], int argc, mxArray* argv[])
{
    gridDynSimReference arg1 = (gridDynSimReference)0;
    double arg2;
    double* arg3 = (double*)0;
    double* arg4 = (double*)0;
    double* arg5 = (double*)0;
    solverKey arg6 = (solverKey)0;
    int res1;
    double val2;
    int ecode2 = 0;
    void* argp3 = 0;
    int res3 = 0;
    void* argp4 = 0;
    int res4 = 0;
    void* argp5 = 0;
    int res5 = 0;
    int res6;
    mxArray* _out;
    griddyn_status result;

    if (!SWIG_check_num_args("gridDynSimulation_residual", argc, 6, 6, 0)) {
        SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(argv[0], SWIG_as_voidptrptr(&arg1), 0, 0);
    if (!SWIG_IsOK(res1)) {
        SWIG_exception_fail(SWIG_ArgError(res1),
                            "in method '"
                            "gridDynSimulation_residual"
                            "', argument "
                            "1"
                            " of type '"
                            "gridDynSimReference"
                            "'");
    }
    ecode2 = SWIG_AsVal_double(argv[1], &val2);
    if (!SWIG_IsOK(ecode2)) {
        SWIG_exception_fail(SWIG_ArgError(ecode2),
                            "in method '"
                            "gridDynSimulation_residual"
                            "', argument "
                            "2"
                            " of type '"
                            "double"
                            "'");
    }
    arg2 = static_cast<double>(val2);
    res3 = SWIG_ConvertPtr(argv[2], &argp3, SWIGTYPE_p_double, 0 | 0);
    if (!SWIG_IsOK(res3)) {
        SWIG_exception_fail(SWIG_ArgError(res3),
                            "in method '"
                            "gridDynSimulation_residual"
                            "', argument "
                            "3"
                            " of type '"
                            "double *"
                            "'");
    }
    arg3 = reinterpret_cast<double*>(argp3);
    res4 = SWIG_ConvertPtr(argv[3], &argp4, SWIGTYPE_p_double, 0 | 0);
    if (!SWIG_IsOK(res4)) {
        SWIG_exception_fail(SWIG_ArgError(res4),
                            "in method '"
                            "gridDynSimulation_residual"
                            "', argument "
                            "4"
                            " of type '"
                            "double const *"
                            "'");
    }
    arg4 = reinterpret_cast<double*>(argp4);
    res5 = SWIG_ConvertPtr(argv[4], &argp5, SWIGTYPE_p_double, 0 | 0);
    if (!SWIG_IsOK(res5)) {
        SWIG_exception_fail(SWIG_ArgError(res5),
                            "in method '"
                            "gridDynSimulation_residual"
                            "', argument "
                            "5"
                            " of type '"
                            "double const *"
                            "'");
    }
    arg5 = reinterpret_cast<double*>(argp5);
    res6 = SWIG_ConvertPtr(argv[5], SWIG_as_voidptrptr(&arg6), 0, 0);
    if (!SWIG_IsOK(res6)) {
        SWIG_exception_fail(SWIG_ArgError(res6),
                            "in method '"
                            "gridDynSimulation_residual"
                            "', argument "
                            "6"
                            " of type '"
                            "solverKey"
                            "'");
    }
    result = (griddyn_status)gridDynSimulation_residual(
        arg1, arg2, arg3, (double const*)arg4, (double const*)arg5, arg6);
    _out = SWIG_From_int(static_cast<int>(result));
    if (_out) --resc, *resv++ = _out;
    return 0;
fail:
    return 1;
}

int _wrap_gridDynSimulation_derivative(int resc, mxArray* resv[], int argc, mxArray* argv[])
{
    gridDynSimReference arg1 = (gridDynSimReference)0;
    double arg2;
    double* arg3 = (double*)0;
    double* arg4 = (double*)0;
    solverKey arg5 = (solverKey)0;
    int res1;
    double val2;
    int ecode2 = 0;
    void* argp3 = 0;
    int res3 = 0;
    void* argp4 = 0;
    int res4 = 0;
    int res5;
    mxArray* _out;
    griddyn_status result;

    if (!SWIG_check_num_args("gridDynSimulation_derivative", argc, 5, 5, 0)) {
        SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(argv[0], SWIG_as_voidptrptr(&arg1), 0, 0);
    if (!SWIG_IsOK(res1)) {
        SWIG_exception_fail(SWIG_ArgError(res1),
                            "in method '"
                            "gridDynSimulation_derivative"
                            "', argument "
                            "1"
                            " of type '"
                            "gridDynSimReference"
                            "'");
    }
    ecode2 = SWIG_AsVal_double(argv[1], &val2);
    if (!SWIG_IsOK(ecode2)) {
        SWIG_exception_fail(SWIG_ArgError(ecode2),
                            "in method '"
                            "gridDynSimulation_derivative"
                            "', argument "
                            "2"
                            " of type '"
                            "double"
                            "'");
    }
    arg2 = static_cast<double>(val2);
    res3 = SWIG_ConvertPtr(argv[2], &argp3, SWIGTYPE_p_double, 0 | 0);
    if (!SWIG_IsOK(res3)) {
        SWIG_exception_fail(SWIG_ArgError(res3),
                            "in method '"
                            "gridDynSimulation_derivative"
                            "', argument "
                            "3"
                            " of type '"
                            "double *"
                            "'");
    }
    arg3 = reinterpret_cast<double*>(argp3);
    res4 = SWIG_ConvertPtr(argv[3], &argp4, SWIGTYPE_p_double, 0 | 0);
    if (!SWIG_IsOK(res4)) {
        SWIG_exception_fail(SWIG_ArgError(res4),
                            "in method '"
                            "gridDynSimulation_derivative"
                            "', argument "
                            "4"
                            " of type '"
                            "double const *"
                            "'");
    }
    arg4 = reinterpret_cast<double*>(argp4);
    res5 = SWIG_ConvertPtr(argv[4], SWIG_as_voidptrptr(&arg5), 0, 0);
    if (!SWIG_IsOK(res5)) {
        SWIG_exception_fail(SWIG_ArgError(res5),
                            "in method '"
                            "gridDynSimulation_derivative"
                            "', argument "
                            "5"
                            " of type '"
                            "solverKey"
                            "'");
    }
    result =
        (griddyn_status)gridDynSimulation_derivative(arg1, arg2, arg3, (double const*)arg4, arg5);
    _out = SWIG_From_int(static_cast<int>(result));
    if (_out) --resc, *resv++ = _out;
    return 0;
fail:
    return 1;
}

int _wrap_gridDynSimulation_algebraicUpdate(int resc, mxArray* resv[], int argc, mxArray* argv[])
{
    gridDynSimReference arg1 = (gridDynSimReference)0;
    double arg2;
    double* arg3 = (double*)0;
    double* arg4 = (double*)0;
    double arg5;
    solverKey arg6 = (solverKey)0;
    int res1;
    double val2;
    int ecode2 = 0;
    void* argp3 = 0;
    int res3 = 0;
    void* argp4 = 0;
    int res4 = 0;
    double val5;
    int ecode5 = 0;
    int res6;
    mxArray* _out;
    griddyn_status result;

    if (!SWIG_check_num_args("gridDynSimulation_algebraicUpdate", argc, 6, 6, 0)) {
        SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(argv[0], SWIG_as_voidptrptr(&arg1), 0, 0);
    if (!SWIG_IsOK(res1)) {
        SWIG_exception_fail(SWIG_ArgError(res1),
                            "in method '"
                            "gridDynSimulation_algebraicUpdate"
                            "', argument "
                            "1"
                            " of type '"
                            "gridDynSimReference"
                            "'");
    }
    ecode2 = SWIG_AsVal_double(argv[1], &val2);
    if (!SWIG_IsOK(ecode2)) {
        SWIG_exception_fail(SWIG_ArgError(ecode2),
                            "in method '"
                            "gridDynSimulation_algebraicUpdate"
                            "', argument "
                            "2"
                            " of type '"
                            "double"
                            "'");
    }
    arg2 = static_cast<double>(val2);
    res3 = SWIG_ConvertPtr(argv[2], &argp3, SWIGTYPE_p_double, 0 | 0);
    if (!SWIG_IsOK(res3)) {
        SWIG_exception_fail(SWIG_ArgError(res3),
                            "in method '"
                            "gridDynSimulation_algebraicUpdate"
                            "', argument "
                            "3"
                            " of type '"
                            "double *"
                            "'");
    }
    arg3 = reinterpret_cast<double*>(argp3);
    res4 = SWIG_ConvertPtr(argv[3], &argp4, SWIGTYPE_p_double, 0 | 0);
    if (!SWIG_IsOK(res4)) {
        SWIG_exception_fail(SWIG_ArgError(res4),
                            "in method '"
                            "gridDynSimulation_algebraicUpdate"
                            "', argument "
                            "4"
                            " of type '"
                            "double const *"
                            "'");
    }
    arg4 = reinterpret_cast<double*>(argp4);
    ecode5 = SWIG_AsVal_double(argv[4], &val5);
    if (!SWIG_IsOK(ecode5)) {
        SWIG_exception_fail(SWIG_ArgError(ecode5),
                            "in method '"
                            "gridDynSimulation_algebraicUpdate"
                            "', argument "
                            "5"
                            " of type '"
                            "double"
                            "'");
    }
    arg5 = static_cast<double>(val5);
    res6 = SWIG_ConvertPtr(argv[5], SWIG_as_voidptrptr(&arg6), 0, 0);
    if (!SWIG_IsOK(res6)) {
        SWIG_exception_fail(SWIG_ArgError(res6),
                            "in method '"
                            "gridDynSimulation_algebraicUpdate"
                            "', argument "
                            "6"
                            " of type '"
                            "solverKey"
                            "'");
    }
    result = (griddyn_status)
        gridDynSimulation_algebraicUpdate(arg1, arg2, arg3, (double const*)arg4, arg5, arg6);
    _out = SWIG_From_int(static_cast<int>(result));
    if (_out) --resc, *resv++ = _out;
    return 0;
fail:
    return 1;
}

int _wrap_gridDynSimulation_jacobian(int resc, mxArray* resv[], int argc, mxArray* argv[])
{
    gridDynSimReference arg1 = (gridDynSimReference)0;
    double arg2;
    double* arg3 = (double*)0;
    double* arg4 = (double*)0;
    double arg5;
    solverKey arg6 = (solverKey)0;
    void (*arg7)(int, int, double) = (void (*)(int, int, double))0;
    int res1;
    double val2;
    int ecode2 = 0;
    void* argp3 = 0;
    int res3 = 0;
    void* argp4 = 0;
    int res4 = 0;
    double val5;
    int ecode5 = 0;
    int res6;
    mxArray* _out;
    griddyn_status result;

    if (!SWIG_check_num_args("gridDynSimulation_jacobian", argc, 7, 7, 0)) {
        SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(argv[0], SWIG_as_voidptrptr(&arg1), 0, 0);
    if (!SWIG_IsOK(res1)) {
        SWIG_exception_fail(SWIG_ArgError(res1),
                            "in method '"
                            "gridDynSimulation_jacobian"
                            "', argument "
                            "1"
                            " of type '"
                            "gridDynSimReference"
                            "'");
    }
    ecode2 = SWIG_AsVal_double(argv[1], &val2);
    if (!SWIG_IsOK(ecode2)) {
        SWIG_exception_fail(SWIG_ArgError(ecode2),
                            "in method '"
                            "gridDynSimulation_jacobian"
                            "', argument "
                            "2"
                            " of type '"
                            "double"
                            "'");
    }
    arg2 = static_cast<double>(val2);
    res3 = SWIG_ConvertPtr(argv[2], &argp3, SWIGTYPE_p_double, 0 | 0);
    if (!SWIG_IsOK(res3)) {
        SWIG_exception_fail(SWIG_ArgError(res3),
                            "in method '"
                            "gridDynSimulation_jacobian"
                            "', argument "
                            "3"
                            " of type '"
                            "double const *"
                            "'");
    }
    arg3 = reinterpret_cast<double*>(argp3);
    res4 = SWIG_ConvertPtr(argv[3], &argp4, SWIGTYPE_p_double, 0 | 0);
    if (!SWIG_IsOK(res4)) {
        SWIG_exception_fail(SWIG_ArgError(res4),
                            "in method '"
                            "gridDynSimulation_jacobian"
                            "', argument "
                            "4"
                            " of type '"
                            "double const *"
                            "'");
    }
    arg4 = reinterpret_cast<double*>(argp4);
    ecode5 = SWIG_AsVal_double(argv[4], &val5);
    if (!SWIG_IsOK(ecode5)) {
        SWIG_exception_fail(SWIG_ArgError(ecode5),
                            "in method '"
                            "gridDynSimulation_jacobian"
                            "', argument "
                            "5"
                            " of type '"
                            "double"
                            "'");
    }
    arg5 = static_cast<double>(val5);
    res6 = SWIG_ConvertPtr(argv[5], SWIG_as_voidptrptr(&arg6), 0, 0);
    if (!SWIG_IsOK(res6)) {
        SWIG_exception_fail(SWIG_ArgError(res6),
                            "in method '"
                            "gridDynSimulation_jacobian"
                            "', argument "
                            "6"
                            " of type '"
                            "solverKey"
                            "'");
    }
    {
        int res =
            SWIG_ConvertFunctionPtr(argv[6], (void**)(&arg7), SWIGTYPE_p_f_int_int_double__void);
        if (!SWIG_IsOK(res)) {
            SWIG_exception_fail(SWIG_ArgError(res),
                                "in method '"
                                "gridDynSimulation_jacobian"
                                "', argument "
                                "7"
                                " of type '"
                                "void (*)(int,int,double)"
                                "'");
        }
    }
    result = (griddyn_status)gridDynSimulation_jacobian(
        arg1, arg2, (double const*)arg3, (double const*)arg4, arg5, arg6, arg7);
    _out = SWIG_From_int(static_cast<int>(result));
    if (_out) --resc, *resv++ = _out;
    return 0;
fail:
    return 1;
}

int _wrap_gridDynSingleQuery_create(int resc, mxArray* resv[], int argc, mxArray* argv[])
{
    gridDynObject arg1 = (gridDynObject)0;
    char* arg2 = (char*)0;
    int res1;
    int res2;
    char* buf2 = 0;
    int alloc2 = 0;
    mxArray* _out;
    gridDynSingleQuery result;

    if (!SWIG_check_num_args("gridDynSingleQuery_create", argc, 2, 2, 0)) {
        SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(argv[0], SWIG_as_voidptrptr(&arg1), 0, 0);
    if (!SWIG_IsOK(res1)) {
        SWIG_exception_fail(SWIG_ArgError(res1),
                            "in method '"
                            "gridDynSingleQuery_create"
                            "', argument "
                            "1"
                            " of type '"
                            "gridDynObject"
                            "'");
    }
    res2 = SWIG_AsCharPtrAndSize(argv[1], &buf2, NULL, &alloc2);
    if (!SWIG_IsOK(res2)) {
        SWIG_exception_fail(SWIG_ArgError(res2),
                            "in method '"
                            "gridDynSingleQuery_create"
                            "', argument "
                            "2"
                            " of type '"
                            "char const *"
                            "'");
    }
    arg2 = reinterpret_cast<char*>(buf2);
    result = (gridDynSingleQuery)gridDynSingleQuery_create(arg1, (char const*)arg2);
    _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_void, 0 | 0);
    if (_out) --resc, *resv++ = _out;
    if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
    return 0;
fail:
    if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
    return 1;
}

int _wrap_gridDynVectorQuery_create(int resc, mxArray* resv[], int argc, mxArray* argv[])
{
    gridDynObject arg1 = (gridDynObject)0;
    char* arg2 = (char*)0;
    int res1;
    int res2;
    char* buf2 = 0;
    int alloc2 = 0;
    mxArray* _out;
    gridDynVectorQuery result;

    if (!SWIG_check_num_args("gridDynVectorQuery_create", argc, 2, 2, 0)) {
        SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(argv[0], SWIG_as_voidptrptr(&arg1), 0, 0);
    if (!SWIG_IsOK(res1)) {
        SWIG_exception_fail(SWIG_ArgError(res1),
                            "in method '"
                            "gridDynVectorQuery_create"
                            "', argument "
                            "1"
                            " of type '"
                            "gridDynObject"
                            "'");
    }
    res2 = SWIG_AsCharPtrAndSize(argv[1], &buf2, NULL, &alloc2);
    if (!SWIG_IsOK(res2)) {
        SWIG_exception_fail(SWIG_ArgError(res2),
                            "in method '"
                            "gridDynVectorQuery_create"
                            "', argument "
                            "2"
                            " of type '"
                            "char const *"
                            "'");
    }
    arg2 = reinterpret_cast<char*>(buf2);
    result = (gridDynVectorQuery)gridDynVectorQuery_create(arg1, (char const*)arg2);
    _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_void, 0 | 0);
    if (_out) --resc, *resv++ = _out;
    if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
    return 0;
fail:
    if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
    return 1;
}

int _wrap_gridDynSingleQuery_free(int resc, mxArray* resv[], int argc, mxArray* argv[])
{
    gridDynSingleQuery arg1 = (gridDynSingleQuery)0;
    int res1;
    mxArray* _out;

    if (!SWIG_check_num_args("gridDynSingleQuery_free", argc, 1, 1, 0)) {
        SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(argv[0], SWIG_as_voidptrptr(&arg1), 0, 0);
    if (!SWIG_IsOK(res1)) {
        SWIG_exception_fail(SWIG_ArgError(res1),
                            "in method '"
                            "gridDynSingleQuery_free"
                            "', argument "
                            "1"
                            " of type '"
                            "gridDynSingleQuery"
                            "'");
    }
    gridDynSingleQuery_free(arg1);
    _out = (mxArray*)0;
    if (_out) --resc, *resv++ = _out;
    return 0;
fail:
    return 1;
}

int _wrap_gridDynVectorQuery_free(int resc, mxArray* resv[], int argc, mxArray* argv[])
{
    gridDynVectorQuery arg1 = (gridDynVectorQuery)0;
    int res1;
    mxArray* _out;

    if (!SWIG_check_num_args("gridDynVectorQuery_free", argc, 1, 1, 0)) {
        SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(argv[0], SWIG_as_voidptrptr(&arg1), 0, 0);
    if (!SWIG_IsOK(res1)) {
        SWIG_exception_fail(SWIG_ArgError(res1),
                            "in method '"
                            "gridDynVectorQuery_free"
                            "', argument "
                            "1"
                            " of type '"
                            "gridDynVectorQuery"
                            "'");
    }
    gridDynVectorQuery_free(arg1);
    _out = (mxArray*)0;
    if (_out) --resc, *resv++ = _out;
    return 0;
fail:
    return 1;
}

int _wrap_gridDynSingleQuery_run(int resc, mxArray* resv[], int argc, mxArray* argv[])
{
    gridDynSingleQuery arg1 = (gridDynSingleQuery)0;
    int res1;
    mxArray* _out;
    double result;

    if (!SWIG_check_num_args("gridDynSingleQuery_run", argc, 1, 1, 0)) {
        SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(argv[0], SWIG_as_voidptrptr(&arg1), 0, 0);
    if (!SWIG_IsOK(res1)) {
        SWIG_exception_fail(SWIG_ArgError(res1),
                            "in method '"
                            "gridDynSingleQuery_run"
                            "', argument "
                            "1"
                            " of type '"
                            "gridDynSingleQuery"
                            "'");
    }
    result = (double)gridDynSingleQuery_run(arg1);
    _out = SWIG_From_double(static_cast<double>(result));
    if (_out) --resc, *resv++ = _out;
    return 0;
fail:
    return 1;
}

int _wrap_gridDynVectorQuery_run(int resc, mxArray* resv[], int argc, mxArray* argv[])
{
    gridDynVectorQuery arg1 = (gridDynVectorQuery)0;
    double* arg2 = (double*)0;
    int arg3;
    int res1;
    void* argp2 = 0;
    int res2 = 0;
    int val3;
    int ecode3 = 0;
    mxArray* _out;
    griddyn_status result;

    if (!SWIG_check_num_args("gridDynVectorQuery_run", argc, 3, 3, 0)) {
        SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(argv[0], SWIG_as_voidptrptr(&arg1), 0, 0);
    if (!SWIG_IsOK(res1)) {
        SWIG_exception_fail(SWIG_ArgError(res1),
                            "in method '"
                            "gridDynVectorQuery_run"
                            "', argument "
                            "1"
                            " of type '"
                            "gridDynVectorQuery"
                            "'");
    }
    res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_double, 0 | 0);
    if (!SWIG_IsOK(res2)) {
        SWIG_exception_fail(SWIG_ArgError(res2),
                            "in method '"
                            "gridDynVectorQuery_run"
                            "', argument "
                            "2"
                            " of type '"
                            "double *"
                            "'");
    }
    arg2 = reinterpret_cast<double*>(argp2);
    ecode3 = SWIG_AsVal_int(argv[2], &val3);
    if (!SWIG_IsOK(ecode3)) {
        SWIG_exception_fail(SWIG_ArgError(ecode3),
                            "in method '"
                            "gridDynVectorQuery_run"
                            "', argument "
                            "3"
                            " of type '"
                            "int"
                            "'");
    }
    arg3 = static_cast<int>(val3);
    result = (griddyn_status)gridDynVectorQuery_run(arg1, arg2, arg3);
    _out = SWIG_From_int(static_cast<int>(result));
    if (_out) --resc, *resv++ = _out;
    return 0;
fail:
    return 1;
}

int _wrap_gridDynVectorQuery_append(int resc, mxArray* resv[], int argc, mxArray* argv[])
{
    gridDynVectorQuery arg1 = (gridDynVectorQuery)0;
    gridDynObject arg2 = (gridDynObject)0;
    char* arg3 = (char*)0;
    int res1;
    int res2;
    int res3;
    char* buf3 = 0;
    int alloc3 = 0;
    mxArray* _out;
    griddyn_status result;

    if (!SWIG_check_num_args("gridDynVectorQuery_append", argc, 3, 3, 0)) {
        SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(argv[0], SWIG_as_voidptrptr(&arg1), 0, 0);
    if (!SWIG_IsOK(res1)) {
        SWIG_exception_fail(SWIG_ArgError(res1),
                            "in method '"
                            "gridDynVectorQuery_append"
                            "', argument "
                            "1"
                            " of type '"
                            "gridDynVectorQuery"
                            "'");
    }
    res2 = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&arg2), 0, 0);
    if (!SWIG_IsOK(res2)) {
        SWIG_exception_fail(SWIG_ArgError(res2),
                            "in method '"
                            "gridDynVectorQuery_append"
                            "', argument "
                            "2"
                            " of type '"
                            "gridDynObject"
                            "'");
    }
    res3 = SWIG_AsCharPtrAndSize(argv[2], &buf3, NULL, &alloc3);
    if (!SWIG_IsOK(res3)) {
        SWIG_exception_fail(SWIG_ArgError(res3),
                            "in method '"
                            "gridDynVectorQuery_append"
                            "', argument "
                            "3"
                            " of type '"
                            "char const *"
                            "'");
    }
    arg3 = reinterpret_cast<char*>(buf3);
    result = (griddyn_status)gridDynVectorQuery_append(arg1, arg2, (char const*)arg3);
    _out = SWIG_From_int(static_cast<int>(result));
    if (_out) --resc, *resv++ = _out;
    if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
    return 0;
fail:
    if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
    return 1;
}

int _wrap_gridDynSingleQuery_update(int resc, mxArray* resv[], int argc, mxArray* argv[])
{
    gridDynSingleQuery arg1 = (gridDynSingleQuery)0;
    gridDynObject arg2 = (gridDynObject)0;
    char* arg3 = (char*)0;
    int res1;
    int res2;
    int res3;
    char* buf3 = 0;
    int alloc3 = 0;
    mxArray* _out;
    griddyn_status result;

    if (!SWIG_check_num_args("gridDynSingleQuery_update", argc, 3, 3, 0)) {
        SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(argv[0], SWIG_as_voidptrptr(&arg1), 0, 0);
    if (!SWIG_IsOK(res1)) {
        SWIG_exception_fail(SWIG_ArgError(res1),
                            "in method '"
                            "gridDynSingleQuery_update"
                            "', argument "
                            "1"
                            " of type '"
                            "gridDynSingleQuery"
                            "'");
    }
    res2 = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&arg2), 0, 0);
    if (!SWIG_IsOK(res2)) {
        SWIG_exception_fail(SWIG_ArgError(res2),
                            "in method '"
                            "gridDynSingleQuery_update"
                            "', argument "
                            "2"
                            " of type '"
                            "gridDynObject"
                            "'");
    }
    res3 = SWIG_AsCharPtrAndSize(argv[2], &buf3, NULL, &alloc3);
    if (!SWIG_IsOK(res3)) {
        SWIG_exception_fail(SWIG_ArgError(res3),
                            "in method '"
                            "gridDynSingleQuery_update"
                            "', argument "
                            "3"
                            " of type '"
                            "char const *"
                            "'");
    }
    arg3 = reinterpret_cast<char*>(buf3);
    result = (griddyn_status)gridDynSingleQuery_update(arg1, arg2, (char const*)arg3);
    _out = SWIG_From_int(static_cast<int>(result));
    if (_out) --resc, *resv++ = _out;
    if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
    return 0;
fail:
    if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
    return 1;
}

int _wrap_gridDynVectorQuery_update(int resc, mxArray* resv[], int argc, mxArray* argv[])
{
    gridDynVectorQuery arg1 = (gridDynVectorQuery)0;
    gridDynObject arg2 = (gridDynObject)0;
    char* arg3 = (char*)0;
    int res1;
    int res2;
    int res3;
    char* buf3 = 0;
    int alloc3 = 0;
    mxArray* _out;
    griddyn_status result;

    if (!SWIG_check_num_args("gridDynVectorQuery_update", argc, 3, 3, 0)) {
        SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(argv[0], SWIG_as_voidptrptr(&arg1), 0, 0);
    if (!SWIG_IsOK(res1)) {
        SWIG_exception_fail(SWIG_ArgError(res1),
                            "in method '"
                            "gridDynVectorQuery_update"
                            "', argument "
                            "1"
                            " of type '"
                            "gridDynVectorQuery"
                            "'");
    }
    res2 = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&arg2), 0, 0);
    if (!SWIG_IsOK(res2)) {
        SWIG_exception_fail(SWIG_ArgError(res2),
                            "in method '"
                            "gridDynVectorQuery_update"
                            "', argument "
                            "2"
                            " of type '"
                            "gridDynObject"
                            "'");
    }
    res3 = SWIG_AsCharPtrAndSize(argv[2], &buf3, NULL, &alloc3);
    if (!SWIG_IsOK(res3)) {
        SWIG_exception_fail(SWIG_ArgError(res3),
                            "in method '"
                            "gridDynVectorQuery_update"
                            "', argument "
                            "3"
                            " of type '"
                            "char const *"
                            "'");
    }
    arg3 = reinterpret_cast<char*>(buf3);
    result = (griddyn_status)gridDynVectorQuery_update(arg1, arg2, (char const*)arg3);
    _out = SWIG_From_int(static_cast<int>(result));
    if (_out) --resc, *resv++ = _out;
    if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
    return 0;
fail:
    if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
    return 1;
}

int _wrap_gridDynEvent_create(int resc, mxArray* resv[], int argc, mxArray* argv[])
{
    char* arg1 = (char*)0;
    gridDynObject arg2 = (gridDynObject)0;
    int res1;
    char* buf1 = 0;
    int alloc1 = 0;
    int res2;
    mxArray* _out;
    gridDynEvent result;

    if (!SWIG_check_num_args("gridDynEvent_create", argc, 2, 2, 0)) {
        SWIG_fail;
    }
    res1 = SWIG_AsCharPtrAndSize(argv[0], &buf1, NULL, &alloc1);
    if (!SWIG_IsOK(res1)) {
        SWIG_exception_fail(SWIG_ArgError(res1),
                            "in method '"
                            "gridDynEvent_create"
                            "', argument "
                            "1"
                            " of type '"
                            "char const *"
                            "'");
    }
    arg1 = reinterpret_cast<char*>(buf1);
    res2 = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&arg2), 0, 0);
    if (!SWIG_IsOK(res2)) {
        SWIG_exception_fail(SWIG_ArgError(res2),
                            "in method '"
                            "gridDynEvent_create"
                            "', argument "
                            "2"
                            " of type '"
                            "gridDynObject"
                            "'");
    }
    result = (gridDynEvent)gridDynEvent_create((char const*)arg1, arg2);
    _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_void, 0 | 0);
    if (_out) --resc, *resv++ = _out;
    if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
    return 0;
fail:
    if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
    return 1;
}

int _wrap_gridDynEvent_free(int resc, mxArray* resv[], int argc, mxArray* argv[])
{
    gridDynEvent arg1 = (gridDynEvent)0;
    int res1;
    mxArray* _out;

    if (!SWIG_check_num_args("gridDynEvent_free", argc, 1, 1, 0)) {
        SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(argv[0], SWIG_as_voidptrptr(&arg1), 0, 0);
    if (!SWIG_IsOK(res1)) {
        SWIG_exception_fail(SWIG_ArgError(res1),
                            "in method '"
                            "gridDynEvent_free"
                            "', argument "
                            "1"
                            " of type '"
                            "gridDynEvent"
                            "'");
    }
    gridDynEvent_free(arg1);
    _out = (mxArray*)0;
    if (_out) --resc, *resv++ = _out;
    return 0;
fail:
    return 1;
}

int _wrap_gridDynEvent_trigger(int resc, mxArray* resv[], int argc, mxArray* argv[])
{
    gridDynEvent arg1 = (gridDynEvent)0;
    int res1;
    mxArray* _out;
    griddyn_status result;

    if (!SWIG_check_num_args("gridDynEvent_trigger", argc, 1, 1, 0)) {
        SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(argv[0], SWIG_as_voidptrptr(&arg1), 0, 0);
    if (!SWIG_IsOK(res1)) {
        SWIG_exception_fail(SWIG_ArgError(res1),
                            "in method '"
                            "gridDynEvent_trigger"
                            "', argument "
                            "1"
                            " of type '"
                            "gridDynEvent"
                            "'");
    }
    result = (griddyn_status)gridDynEvent_trigger(arg1);
    _out = SWIG_From_int(static_cast<int>(result));
    if (_out) --resc, *resv++ = _out;
    return 0;
fail:
    return 1;
}

int _wrap_gridDynEvent_schedule(int resc, mxArray* resv[], int argc, mxArray* argv[])
{
    gridDynEvent arg1 = (gridDynEvent)0;
    gridDynSimReference arg2 = (gridDynSimReference)0;
    int res1;
    int res2;
    mxArray* _out;
    griddyn_status result;

    if (!SWIG_check_num_args("gridDynEvent_schedule", argc, 2, 2, 0)) {
        SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(argv[0], SWIG_as_voidptrptr(&arg1), 0, 0);
    if (!SWIG_IsOK(res1)) {
        SWIG_exception_fail(SWIG_ArgError(res1),
                            "in method '"
                            "gridDynEvent_schedule"
                            "', argument "
                            "1"
                            " of type '"
                            "gridDynEvent"
                            "'");
    }
    res2 = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&arg2), 0, 0);
    if (!SWIG_IsOK(res2)) {
        SWIG_exception_fail(SWIG_ArgError(res2),
                            "in method '"
                            "gridDynEvent_schedule"
                            "', argument "
                            "2"
                            " of type '"
                            "gridDynSimReference"
                            "'");
    }
    result = (griddyn_status)gridDynEvent_schedule(arg1, arg2);
    _out = SWIG_From_int(static_cast<int>(result));
    if (_out) --resc, *resv++ = _out;
    return 0;
fail:
    return 1;
}

int _wrap_gridDynEvent_setValue(int resc, mxArray* resv[], int argc, mxArray* argv[])
{
    gridDynEvent arg1 = (gridDynEvent)0;
    char* arg2 = (char*)0;
    double arg3;
    int res1;
    int res2;
    char* buf2 = 0;
    int alloc2 = 0;
    double val3;
    int ecode3 = 0;
    mxArray* _out;
    griddyn_status result;

    if (!SWIG_check_num_args("gridDynEvent_setValue", argc, 3, 3, 0)) {
        SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(argv[0], SWIG_as_voidptrptr(&arg1), 0, 0);
    if (!SWIG_IsOK(res1)) {
        SWIG_exception_fail(SWIG_ArgError(res1),
                            "in method '"
                            "gridDynEvent_setValue"
                            "', argument "
                            "1"
                            " of type '"
                            "gridDynEvent"
                            "'");
    }
    res2 = SWIG_AsCharPtrAndSize(argv[1], &buf2, NULL, &alloc2);
    if (!SWIG_IsOK(res2)) {
        SWIG_exception_fail(SWIG_ArgError(res2),
                            "in method '"
                            "gridDynEvent_setValue"
                            "', argument "
                            "2"
                            " of type '"
                            "char const *"
                            "'");
    }
    arg2 = reinterpret_cast<char*>(buf2);
    ecode3 = SWIG_AsVal_double(argv[2], &val3);
    if (!SWIG_IsOK(ecode3)) {
        SWIG_exception_fail(SWIG_ArgError(ecode3),
                            "in method '"
                            "gridDynEvent_setValue"
                            "', argument "
                            "3"
                            " of type '"
                            "double"
                            "'");
    }
    arg3 = static_cast<double>(val3);
    result = (griddyn_status)gridDynEvent_setValue(arg1, (char const*)arg2, arg3);
    _out = SWIG_From_int(static_cast<int>(result));
    if (_out) --resc, *resv++ = _out;
    if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
    return 0;
fail:
    if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
    return 1;
}

int _wrap_gridDynEvent_setString(int resc, mxArray* resv[], int argc, mxArray* argv[])
{
    gridDynEvent arg1 = (gridDynEvent)0;
    char* arg2 = (char*)0;
    char* arg3 = (char*)0;
    int res1;
    int res2;
    char* buf2 = 0;
    int alloc2 = 0;
    int res3;
    char* buf3 = 0;
    int alloc3 = 0;
    mxArray* _out;
    griddyn_status result;

    if (!SWIG_check_num_args("gridDynEvent_setString", argc, 3, 3, 0)) {
        SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(argv[0], SWIG_as_voidptrptr(&arg1), 0, 0);
    if (!SWIG_IsOK(res1)) {
        SWIG_exception_fail(SWIG_ArgError(res1),
                            "in method '"
                            "gridDynEvent_setString"
                            "', argument "
                            "1"
                            " of type '"
                            "gridDynEvent"
                            "'");
    }
    res2 = SWIG_AsCharPtrAndSize(argv[1], &buf2, NULL, &alloc2);
    if (!SWIG_IsOK(res2)) {
        SWIG_exception_fail(SWIG_ArgError(res2),
                            "in method '"
                            "gridDynEvent_setString"
                            "', argument "
                            "2"
                            " of type '"
                            "char const *"
                            "'");
    }
    arg2 = reinterpret_cast<char*>(buf2);
    res3 = SWIG_AsCharPtrAndSize(argv[2], &buf3, NULL, &alloc3);
    if (!SWIG_IsOK(res3)) {
        SWIG_exception_fail(SWIG_ArgError(res3),
                            "in method '"
                            "gridDynEvent_setString"
                            "', argument "
                            "3"
                            " of type '"
                            "char const *"
                            "'");
    }
    arg3 = reinterpret_cast<char*>(buf3);
    result = (griddyn_status)gridDynEvent_setString(arg1, (char const*)arg2, (char const*)arg3);
    _out = SWIG_From_int(static_cast<int>(result));
    if (_out) --resc, *resv++ = _out;
    if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
    if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
    return 0;
fail:
    if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
    if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
    return 1;
}

int _wrap_gridDynEvent_setFlag(int resc, mxArray* resv[], int argc, mxArray* argv[])
{
    gridDynEvent arg1 = (gridDynEvent)0;
    char* arg2 = (char*)0;
    int arg3;
    int res1;
    int res2;
    char* buf2 = 0;
    int alloc2 = 0;
    int val3;
    int ecode3 = 0;
    mxArray* _out;
    griddyn_status result;

    if (!SWIG_check_num_args("gridDynEvent_setFlag", argc, 3, 3, 0)) {
        SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(argv[0], SWIG_as_voidptrptr(&arg1), 0, 0);
    if (!SWIG_IsOK(res1)) {
        SWIG_exception_fail(SWIG_ArgError(res1),
                            "in method '"
                            "gridDynEvent_setFlag"
                            "', argument "
                            "1"
                            " of type '"
                            "gridDynEvent"
                            "'");
    }
    res2 = SWIG_AsCharPtrAndSize(argv[1], &buf2, NULL, &alloc2);
    if (!SWIG_IsOK(res2)) {
        SWIG_exception_fail(SWIG_ArgError(res2),
                            "in method '"
                            "gridDynEvent_setFlag"
                            "', argument "
                            "2"
                            " of type '"
                            "char const *"
                            "'");
    }
    arg2 = reinterpret_cast<char*>(buf2);
    ecode3 = SWIG_AsVal_int(argv[2], &val3);
    if (!SWIG_IsOK(ecode3)) {
        SWIG_exception_fail(SWIG_ArgError(ecode3),
                            "in method '"
                            "gridDynEvent_setFlag"
                            "', argument "
                            "3"
                            " of type '"
                            "int"
                            "'");
    }
    arg3 = static_cast<int>(val3);
    result = (griddyn_status)gridDynEvent_setFlag(arg1, (char const*)arg2, arg3);
    _out = SWIG_From_int(static_cast<int>(result));
    if (_out) --resc, *resv++ = _out;
    if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
    return 0;
fail:
    if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
    return 1;
}

int _wrap_gridDynEvent_setTarget(int resc, mxArray* resv[], int argc, mxArray* argv[])
{
    gridDynEvent arg1 = (gridDynEvent)0;
    gridDynObject arg2 = (gridDynObject)0;
    int res1;
    int res2;
    mxArray* _out;
    griddyn_status result;

    if (!SWIG_check_num_args("gridDynEvent_setTarget", argc, 2, 2, 0)) {
        SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(argv[0], SWIG_as_voidptrptr(&arg1), 0, 0);
    if (!SWIG_IsOK(res1)) {
        SWIG_exception_fail(SWIG_ArgError(res1),
                            "in method '"
                            "gridDynEvent_setTarget"
                            "', argument "
                            "1"
                            " of type '"
                            "gridDynEvent"
                            "'");
    }
    res2 = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&arg2), 0, 0);
    if (!SWIG_IsOK(res2)) {
        SWIG_exception_fail(SWIG_ArgError(res2),
                            "in method '"
                            "gridDynEvent_setTarget"
                            "', argument "
                            "2"
                            " of type '"
                            "gridDynObject"
                            "'");
    }
    result = (griddyn_status)gridDynEvent_setTarget(arg1, arg2);
    _out = SWIG_From_int(static_cast<int>(result));
    if (_out) --resc, *resv++ = _out;
    return 0;
fail:
    return 1;
}

int _wrap_gridDynObject_stateSize(int resc, mxArray* resv[], int argc, mxArray* argv[])
{
    gridDynObject arg1 = (gridDynObject)0;
    solverKey arg2 = (solverKey)0;
    int res1;
    int res2;
    mxArray* _out;
    griddyn_status result;

    if (!SWIG_check_num_args("gridDynObject_stateSize", argc, 2, 2, 0)) {
        SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(argv[0], SWIG_as_voidptrptr(&arg1), 0, 0);
    if (!SWIG_IsOK(res1)) {
        SWIG_exception_fail(SWIG_ArgError(res1),
                            "in method '"
                            "gridDynObject_stateSize"
                            "', argument "
                            "1"
                            " of type '"
                            "gridDynObject"
                            "'");
    }
    res2 = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&arg2), 0, 0);
    if (!SWIG_IsOK(res2)) {
        SWIG_exception_fail(SWIG_ArgError(res2),
                            "in method '"
                            "gridDynObject_stateSize"
                            "', argument "
                            "2"
                            " of type '"
                            "solverKey"
                            "'");
    }
    result = (griddyn_status)gridDynObject_stateSize(arg1, arg2);
    _out = SWIG_From_int(static_cast<int>(result));
    if (_out) --resc, *resv++ = _out;
    return 0;
fail:
    return 1;
}

int _wrap_gridDynObject_guessState(int resc, mxArray* resv[], int argc, mxArray* argv[])
{
    gridDynObject arg1 = (gridDynObject)0;
    double arg2;
    double* arg3 = (double*)0;
    double* arg4 = (double*)0;
    solverKey arg5 = (solverKey)0;
    int res1;
    double val2;
    int ecode2 = 0;
    void* argp3 = 0;
    int res3 = 0;
    void* argp4 = 0;
    int res4 = 0;
    int res5;
    mxArray* _out;
    griddyn_status result;

    if (!SWIG_check_num_args("gridDynObject_guessState", argc, 5, 5, 0)) {
        SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(argv[0], SWIG_as_voidptrptr(&arg1), 0, 0);
    if (!SWIG_IsOK(res1)) {
        SWIG_exception_fail(SWIG_ArgError(res1),
                            "in method '"
                            "gridDynObject_guessState"
                            "', argument "
                            "1"
                            " of type '"
                            "gridDynObject"
                            "'");
    }
    ecode2 = SWIG_AsVal_double(argv[1], &val2);
    if (!SWIG_IsOK(ecode2)) {
        SWIG_exception_fail(SWIG_ArgError(ecode2),
                            "in method '"
                            "gridDynObject_guessState"
                            "', argument "
                            "2"
                            " of type '"
                            "double"
                            "'");
    }
    arg2 = static_cast<double>(val2);
    res3 = SWIG_ConvertPtr(argv[2], &argp3, SWIGTYPE_p_double, 0 | 0);
    if (!SWIG_IsOK(res3)) {
        SWIG_exception_fail(SWIG_ArgError(res3),
                            "in method '"
                            "gridDynObject_guessState"
                            "', argument "
                            "3"
                            " of type '"
                            "double *"
                            "'");
    }
    arg3 = reinterpret_cast<double*>(argp3);
    res4 = SWIG_ConvertPtr(argv[3], &argp4, SWIGTYPE_p_double, 0 | 0);
    if (!SWIG_IsOK(res4)) {
        SWIG_exception_fail(SWIG_ArgError(res4),
                            "in method '"
                            "gridDynObject_guessState"
                            "', argument "
                            "4"
                            " of type '"
                            "double *"
                            "'");
    }
    arg4 = reinterpret_cast<double*>(argp4);
    res5 = SWIG_ConvertPtr(argv[4], SWIG_as_voidptrptr(&arg5), 0, 0);
    if (!SWIG_IsOK(res5)) {
        SWIG_exception_fail(SWIG_ArgError(res5),
                            "in method '"
                            "gridDynObject_guessState"
                            "', argument "
                            "5"
                            " of type '"
                            "solverKey"
                            "'");
    }
    result = (griddyn_status)gridDynObject_guessState(arg1, arg2, arg3, arg4, arg5);
    _out = SWIG_From_int(static_cast<int>(result));
    if (_out) --resc, *resv++ = _out;
    return 0;
fail:
    return 1;
}

int _wrap_gridDynObject_setState(int resc, mxArray* resv[], int argc, mxArray* argv[])
{
    gridDynObject arg1 = (gridDynObject)0;
    double arg2;
    double* arg3 = (double*)0;
    double* arg4 = (double*)0;
    solverKey arg5 = (solverKey)0;
    int res1;
    double val2;
    int ecode2 = 0;
    void* argp3 = 0;
    int res3 = 0;
    void* argp4 = 0;
    int res4 = 0;
    int res5;
    mxArray* _out;
    griddyn_status result;

    if (!SWIG_check_num_args("gridDynObject_setState", argc, 5, 5, 0)) {
        SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(argv[0], SWIG_as_voidptrptr(&arg1), 0, 0);
    if (!SWIG_IsOK(res1)) {
        SWIG_exception_fail(SWIG_ArgError(res1),
                            "in method '"
                            "gridDynObject_setState"
                            "', argument "
                            "1"
                            " of type '"
                            "gridDynObject"
                            "'");
    }
    ecode2 = SWIG_AsVal_double(argv[1], &val2);
    if (!SWIG_IsOK(ecode2)) {
        SWIG_exception_fail(SWIG_ArgError(ecode2),
                            "in method '"
                            "gridDynObject_setState"
                            "', argument "
                            "2"
                            " of type '"
                            "double"
                            "'");
    }
    arg2 = static_cast<double>(val2);
    res3 = SWIG_ConvertPtr(argv[2], &argp3, SWIGTYPE_p_double, 0 | 0);
    if (!SWIG_IsOK(res3)) {
        SWIG_exception_fail(SWIG_ArgError(res3),
                            "in method '"
                            "gridDynObject_setState"
                            "', argument "
                            "3"
                            " of type '"
                            "double const *"
                            "'");
    }
    arg3 = reinterpret_cast<double*>(argp3);
    res4 = SWIG_ConvertPtr(argv[3], &argp4, SWIGTYPE_p_double, 0 | 0);
    if (!SWIG_IsOK(res4)) {
        SWIG_exception_fail(SWIG_ArgError(res4),
                            "in method '"
                            "gridDynObject_setState"
                            "', argument "
                            "4"
                            " of type '"
                            "double const *"
                            "'");
    }
    arg4 = reinterpret_cast<double*>(argp4);
    res5 = SWIG_ConvertPtr(argv[4], SWIG_as_voidptrptr(&arg5), 0, 0);
    if (!SWIG_IsOK(res5)) {
        SWIG_exception_fail(SWIG_ArgError(res5),
                            "in method '"
                            "gridDynObject_setState"
                            "', argument "
                            "5"
                            " of type '"
                            "solverKey"
                            "'");
    }
    result = (griddyn_status)
        gridDynObject_setState(arg1, arg2, (double const*)arg3, (double const*)arg4, arg5);
    _out = SWIG_From_int(static_cast<int>(result));
    if (_out) --resc, *resv++ = _out;
    return 0;
fail:
    return 1;
}

int _wrap_gridDynObject_getStateVariableTypes(int resc, mxArray* resv[], int argc, mxArray* argv[])
{
    gridDynObject arg1 = (gridDynObject)0;
    double* arg2 = (double*)0;
    solverKey arg3 = (solverKey)0;
    int res1;
    void* argp2 = 0;
    int res2 = 0;
    int res3;
    mxArray* _out;
    griddyn_status result;

    if (!SWIG_check_num_args("gridDynObject_getStateVariableTypes", argc, 3, 3, 0)) {
        SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(argv[0], SWIG_as_voidptrptr(&arg1), 0, 0);
    if (!SWIG_IsOK(res1)) {
        SWIG_exception_fail(SWIG_ArgError(res1),
                            "in method '"
                            "gridDynObject_getStateVariableTypes"
                            "', argument "
                            "1"
                            " of type '"
                            "gridDynObject"
                            "'");
    }
    res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_double, 0 | 0);
    if (!SWIG_IsOK(res2)) {
        SWIG_exception_fail(SWIG_ArgError(res2),
                            "in method '"
                            "gridDynObject_getStateVariableTypes"
                            "', argument "
                            "2"
                            " of type '"
                            "double *"
                            "'");
    }
    arg2 = reinterpret_cast<double*>(argp2);
    res3 = SWIG_ConvertPtr(argv[2], SWIG_as_voidptrptr(&arg3), 0, 0);
    if (!SWIG_IsOK(res3)) {
        SWIG_exception_fail(SWIG_ArgError(res3),
                            "in method '"
                            "gridDynObject_getStateVariableTypes"
                            "', argument "
                            "3"
                            " of type '"
                            "solverKey"
                            "'");
    }
    result = (griddyn_status)gridDynObject_getStateVariableTypes(arg1, arg2, arg3);
    _out = SWIG_From_int(static_cast<int>(result));
    if (_out) --resc, *resv++ = _out;
    return 0;
fail:
    return 1;
}

int _wrap_gridDynObject_residual(int resc, mxArray* resv[], int argc, mxArray* argv[])
{
    gridDynObject arg1 = (gridDynObject)0;
    double* arg2 = (double*)0;
    int arg3;
    double* arg4 = (double*)0;
    solverKey arg5 = (solverKey)0;
    int res1;
    void* argp2 = 0;
    int res2 = 0;
    int val3;
    int ecode3 = 0;
    void* argp4 = 0;
    int res4 = 0;
    int res5;
    mxArray* _out;
    griddyn_status result;

    if (!SWIG_check_num_args("gridDynObject_residual", argc, 5, 5, 0)) {
        SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(argv[0], SWIG_as_voidptrptr(&arg1), 0, 0);
    if (!SWIG_IsOK(res1)) {
        SWIG_exception_fail(SWIG_ArgError(res1),
                            "in method '"
                            "gridDynObject_residual"
                            "', argument "
                            "1"
                            " of type '"
                            "gridDynObject"
                            "'");
    }
    res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_double, 0 | 0);
    if (!SWIG_IsOK(res2)) {
        SWIG_exception_fail(SWIG_ArgError(res2),
                            "in method '"
                            "gridDynObject_residual"
                            "', argument "
                            "2"
                            " of type '"
                            "double const *"
                            "'");
    }
    arg2 = reinterpret_cast<double*>(argp2);
    ecode3 = SWIG_AsVal_int(argv[2], &val3);
    if (!SWIG_IsOK(ecode3)) {
        SWIG_exception_fail(SWIG_ArgError(ecode3),
                            "in method '"
                            "gridDynObject_residual"
                            "', argument "
                            "3"
                            " of type '"
                            "int"
                            "'");
    }
    arg3 = static_cast<int>(val3);
    res4 = SWIG_ConvertPtr(argv[3], &argp4, SWIGTYPE_p_double, 0 | 0);
    if (!SWIG_IsOK(res4)) {
        SWIG_exception_fail(SWIG_ArgError(res4),
                            "in method '"
                            "gridDynObject_residual"
                            "', argument "
                            "4"
                            " of type '"
                            "double *"
                            "'");
    }
    arg4 = reinterpret_cast<double*>(argp4);
    res5 = SWIG_ConvertPtr(argv[4], SWIG_as_voidptrptr(&arg5), 0, 0);
    if (!SWIG_IsOK(res5)) {
        SWIG_exception_fail(SWIG_ArgError(res5),
                            "in method '"
                            "gridDynObject_residual"
                            "', argument "
                            "5"
                            " of type '"
                            "solverKey"
                            "'");
    }
    result = (griddyn_status)gridDynObject_residual(arg1, (double const*)arg2, arg3, arg4, arg5);
    _out = SWIG_From_int(static_cast<int>(result));
    if (_out) --resc, *resv++ = _out;
    return 0;
fail:
    return 1;
}

int _wrap_gridDynObject_derivative(int resc, mxArray* resv[], int argc, mxArray* argv[])
{
    gridDynObject arg1 = (gridDynObject)0;
    double* arg2 = (double*)0;
    int arg3;
    double* arg4 = (double*)0;
    solverKey arg5 = (solverKey)0;
    int res1;
    void* argp2 = 0;
    int res2 = 0;
    int val3;
    int ecode3 = 0;
    void* argp4 = 0;
    int res4 = 0;
    int res5;
    mxArray* _out;
    griddyn_status result;

    if (!SWIG_check_num_args("gridDynObject_derivative", argc, 5, 5, 0)) {
        SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(argv[0], SWIG_as_voidptrptr(&arg1), 0, 0);
    if (!SWIG_IsOK(res1)) {
        SWIG_exception_fail(SWIG_ArgError(res1),
                            "in method '"
                            "gridDynObject_derivative"
                            "', argument "
                            "1"
                            " of type '"
                            "gridDynObject"
                            "'");
    }
    res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_double, 0 | 0);
    if (!SWIG_IsOK(res2)) {
        SWIG_exception_fail(SWIG_ArgError(res2),
                            "in method '"
                            "gridDynObject_derivative"
                            "', argument "
                            "2"
                            " of type '"
                            "double const *"
                            "'");
    }
    arg2 = reinterpret_cast<double*>(argp2);
    ecode3 = SWIG_AsVal_int(argv[2], &val3);
    if (!SWIG_IsOK(ecode3)) {
        SWIG_exception_fail(SWIG_ArgError(ecode3),
                            "in method '"
                            "gridDynObject_derivative"
                            "', argument "
                            "3"
                            " of type '"
                            "int"
                            "'");
    }
    arg3 = static_cast<int>(val3);
    res4 = SWIG_ConvertPtr(argv[3], &argp4, SWIGTYPE_p_double, 0 | 0);
    if (!SWIG_IsOK(res4)) {
        SWIG_exception_fail(SWIG_ArgError(res4),
                            "in method '"
                            "gridDynObject_derivative"
                            "', argument "
                            "4"
                            " of type '"
                            "double *"
                            "'");
    }
    arg4 = reinterpret_cast<double*>(argp4);
    res5 = SWIG_ConvertPtr(argv[4], SWIG_as_voidptrptr(&arg5), 0, 0);
    if (!SWIG_IsOK(res5)) {
        SWIG_exception_fail(SWIG_ArgError(res5),
                            "in method '"
                            "gridDynObject_derivative"
                            "', argument "
                            "5"
                            " of type '"
                            "solverKey"
                            "'");
    }
    result = (griddyn_status)gridDynObject_derivative(arg1, (double const*)arg2, arg3, arg4, arg5);
    _out = SWIG_From_int(static_cast<int>(result));
    if (_out) --resc, *resv++ = _out;
    return 0;
fail:
    return 1;
}

int _wrap_gridDynObject_algebraicUpdate(int resc, mxArray* resv[], int argc, mxArray* argv[])
{
    gridDynObject arg1 = (gridDynObject)0;
    double* arg2 = (double*)0;
    int arg3;
    double* arg4 = (double*)0;
    double arg5;
    solverKey arg6 = (solverKey)0;
    int res1;
    void* argp2 = 0;
    int res2 = 0;
    int val3;
    int ecode3 = 0;
    void* argp4 = 0;
    int res4 = 0;
    double val5;
    int ecode5 = 0;
    int res6;
    mxArray* _out;
    griddyn_status result;

    if (!SWIG_check_num_args("gridDynObject_algebraicUpdate", argc, 6, 6, 0)) {
        SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(argv[0], SWIG_as_voidptrptr(&arg1), 0, 0);
    if (!SWIG_IsOK(res1)) {
        SWIG_exception_fail(SWIG_ArgError(res1),
                            "in method '"
                            "gridDynObject_algebraicUpdate"
                            "', argument "
                            "1"
                            " of type '"
                            "gridDynObject"
                            "'");
    }
    res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_double, 0 | 0);
    if (!SWIG_IsOK(res2)) {
        SWIG_exception_fail(SWIG_ArgError(res2),
                            "in method '"
                            "gridDynObject_algebraicUpdate"
                            "', argument "
                            "2"
                            " of type '"
                            "double const *"
                            "'");
    }
    arg2 = reinterpret_cast<double*>(argp2);
    ecode3 = SWIG_AsVal_int(argv[2], &val3);
    if (!SWIG_IsOK(ecode3)) {
        SWIG_exception_fail(SWIG_ArgError(ecode3),
                            "in method '"
                            "gridDynObject_algebraicUpdate"
                            "', argument "
                            "3"
                            " of type '"
                            "int"
                            "'");
    }
    arg3 = static_cast<int>(val3);
    res4 = SWIG_ConvertPtr(argv[3], &argp4, SWIGTYPE_p_double, 0 | 0);
    if (!SWIG_IsOK(res4)) {
        SWIG_exception_fail(SWIG_ArgError(res4),
                            "in method '"
                            "gridDynObject_algebraicUpdate"
                            "', argument "
                            "4"
                            " of type '"
                            "double *"
                            "'");
    }
    arg4 = reinterpret_cast<double*>(argp4);
    ecode5 = SWIG_AsVal_double(argv[4], &val5);
    if (!SWIG_IsOK(ecode5)) {
        SWIG_exception_fail(SWIG_ArgError(ecode5),
                            "in method '"
                            "gridDynObject_algebraicUpdate"
                            "', argument "
                            "5"
                            " of type '"
                            "double"
                            "'");
    }
    arg5 = static_cast<double>(val5);
    res6 = SWIG_ConvertPtr(argv[5], SWIG_as_voidptrptr(&arg6), 0, 0);
    if (!SWIG_IsOK(res6)) {
        SWIG_exception_fail(SWIG_ArgError(res6),
                            "in method '"
                            "gridDynObject_algebraicUpdate"
                            "', argument "
                            "6"
                            " of type '"
                            "solverKey"
                            "'");
    }
    result = (griddyn_status)
        gridDynObject_algebraicUpdate(arg1, (double const*)arg2, arg3, arg4, arg5, arg6);
    _out = SWIG_From_int(static_cast<int>(result));
    if (_out) --resc, *resv++ = _out;
    return 0;
fail:
    return 1;
}

int _wrap_gridDynObject_jacobian(int resc, mxArray* resv[], int argc, mxArray* argv[])
{
    gridDynObject arg1 = (gridDynObject)0;
    double* arg2 = (double*)0;
    int arg3;
    double arg4;
    void (*arg5)(int, int, double) = (void (*)(int, int, double))0;
    solverKey arg6 = (solverKey)0;
    int res1;
    void* argp2 = 0;
    int res2 = 0;
    int val3;
    int ecode3 = 0;
    double val4;
    int ecode4 = 0;
    int res6;
    mxArray* _out;
    griddyn_status result;

    if (!SWIG_check_num_args("gridDynObject_jacobian", argc, 6, 6, 0)) {
        SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(argv[0], SWIG_as_voidptrptr(&arg1), 0, 0);
    if (!SWIG_IsOK(res1)) {
        SWIG_exception_fail(SWIG_ArgError(res1),
                            "in method '"
                            "gridDynObject_jacobian"
                            "', argument "
                            "1"
                            " of type '"
                            "gridDynObject"
                            "'");
    }
    res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_double, 0 | 0);
    if (!SWIG_IsOK(res2)) {
        SWIG_exception_fail(SWIG_ArgError(res2),
                            "in method '"
                            "gridDynObject_jacobian"
                            "', argument "
                            "2"
                            " of type '"
                            "double const *"
                            "'");
    }
    arg2 = reinterpret_cast<double*>(argp2);
    ecode3 = SWIG_AsVal_int(argv[2], &val3);
    if (!SWIG_IsOK(ecode3)) {
        SWIG_exception_fail(SWIG_ArgError(ecode3),
                            "in method '"
                            "gridDynObject_jacobian"
                            "', argument "
                            "3"
                            " of type '"
                            "int"
                            "'");
    }
    arg3 = static_cast<int>(val3);
    ecode4 = SWIG_AsVal_double(argv[3], &val4);
    if (!SWIG_IsOK(ecode4)) {
        SWIG_exception_fail(SWIG_ArgError(ecode4),
                            "in method '"
                            "gridDynObject_jacobian"
                            "', argument "
                            "4"
                            " of type '"
                            "double"
                            "'");
    }
    arg4 = static_cast<double>(val4);
    {
        int res =
            SWIG_ConvertFunctionPtr(argv[4], (void**)(&arg5), SWIGTYPE_p_f_int_int_double__void);
        if (!SWIG_IsOK(res)) {
            SWIG_exception_fail(SWIG_ArgError(res),
                                "in method '"
                                "gridDynObject_jacobian"
                                "', argument "
                                "5"
                                " of type '"
                                "void (*)(int,int,double)"
                                "'");
        }
    }
    res6 = SWIG_ConvertPtr(argv[5], SWIG_as_voidptrptr(&arg6), 0, 0);
    if (!SWIG_IsOK(res6)) {
        SWIG_exception_fail(SWIG_ArgError(res6),
                            "in method '"
                            "gridDynObject_jacobian"
                            "', argument "
                            "6"
                            " of type '"
                            "solverKey"
                            "'");
    }
    result =
        (griddyn_status)gridDynObject_jacobian(arg1, (double const*)arg2, arg3, arg4, arg5, arg6);
    _out = SWIG_From_int(static_cast<int>(result));
    if (_out) --resc, *resv++ = _out;
    return 0;
fail:
    return 1;
}

int _wrap_gridDynObject_ioPartialDerivatives(int resc, mxArray* resv[], int argc, mxArray* argv[])
{
    gridDynObject arg1 = (gridDynObject)0;
    double* arg2 = (double*)0;
    int arg3;
    void (*arg4)(int, int, double) = (void (*)(int, int, double))0;
    solverKey arg5 = (solverKey)0;
    int res1;
    void* argp2 = 0;
    int res2 = 0;
    int val3;
    int ecode3 = 0;
    int res5;
    mxArray* _out;
    griddyn_status result;

    if (!SWIG_check_num_args("gridDynObject_ioPartialDerivatives", argc, 5, 5, 0)) {
        SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(argv[0], SWIG_as_voidptrptr(&arg1), 0, 0);
    if (!SWIG_IsOK(res1)) {
        SWIG_exception_fail(SWIG_ArgError(res1),
                            "in method '"
                            "gridDynObject_ioPartialDerivatives"
                            "', argument "
                            "1"
                            " of type '"
                            "gridDynObject"
                            "'");
    }
    res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_double, 0 | 0);
    if (!SWIG_IsOK(res2)) {
        SWIG_exception_fail(SWIG_ArgError(res2),
                            "in method '"
                            "gridDynObject_ioPartialDerivatives"
                            "', argument "
                            "2"
                            " of type '"
                            "double const *"
                            "'");
    }
    arg2 = reinterpret_cast<double*>(argp2);
    ecode3 = SWIG_AsVal_int(argv[2], &val3);
    if (!SWIG_IsOK(ecode3)) {
        SWIG_exception_fail(SWIG_ArgError(ecode3),
                            "in method '"
                            "gridDynObject_ioPartialDerivatives"
                            "', argument "
                            "3"
                            " of type '"
                            "int"
                            "'");
    }
    arg3 = static_cast<int>(val3);
    {
        int res =
            SWIG_ConvertFunctionPtr(argv[3], (void**)(&arg4), SWIGTYPE_p_f_int_int_double__void);
        if (!SWIG_IsOK(res)) {
            SWIG_exception_fail(SWIG_ArgError(res),
                                "in method '"
                                "gridDynObject_ioPartialDerivatives"
                                "', argument "
                                "4"
                                " of type '"
                                "void (*)(int,int,double)"
                                "'");
        }
    }
    res5 = SWIG_ConvertPtr(argv[4], SWIG_as_voidptrptr(&arg5), 0, 0);
    if (!SWIG_IsOK(res5)) {
        SWIG_exception_fail(SWIG_ArgError(res5),
                            "in method '"
                            "gridDynObject_ioPartialDerivatives"
                            "', argument "
                            "5"
                            " of type '"
                            "solverKey"
                            "'");
    }
    result = (griddyn_status)
        gridDynObject_ioPartialDerivatives(arg1, (double const*)arg2, arg3, arg4, arg5);
    _out = SWIG_From_int(static_cast<int>(result));
    if (_out) --resc, *resv++ = _out;
    return 0;
fail:
    return 1;
}

int _wrap_gridDynObject_outputPartialDerivatives(int resc,
                                                 mxArray* resv[],
                                                 int argc,
                                                 mxArray* argv[])
{
    gridDynObject arg1 = (gridDynObject)0;
    double* arg2 = (double*)0;
    int arg3;
    void (*arg4)(int, int, double) = (void (*)(int, int, double))0;
    solverKey arg5 = (solverKey)0;
    int res1;
    void* argp2 = 0;
    int res2 = 0;
    int val3;
    int ecode3 = 0;
    int res5;
    mxArray* _out;
    griddyn_status result;

    if (!SWIG_check_num_args("gridDynObject_outputPartialDerivatives", argc, 5, 5, 0)) {
        SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(argv[0], SWIG_as_voidptrptr(&arg1), 0, 0);
    if (!SWIG_IsOK(res1)) {
        SWIG_exception_fail(SWIG_ArgError(res1),
                            "in method '"
                            "gridDynObject_outputPartialDerivatives"
                            "', argument "
                            "1"
                            " of type '"
                            "gridDynObject"
                            "'");
    }
    res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_double, 0 | 0);
    if (!SWIG_IsOK(res2)) {
        SWIG_exception_fail(SWIG_ArgError(res2),
                            "in method '"
                            "gridDynObject_outputPartialDerivatives"
                            "', argument "
                            "2"
                            " of type '"
                            "double const *"
                            "'");
    }
    arg2 = reinterpret_cast<double*>(argp2);
    ecode3 = SWIG_AsVal_int(argv[2], &val3);
    if (!SWIG_IsOK(ecode3)) {
        SWIG_exception_fail(SWIG_ArgError(ecode3),
                            "in method '"
                            "gridDynObject_outputPartialDerivatives"
                            "', argument "
                            "3"
                            " of type '"
                            "int"
                            "'");
    }
    arg3 = static_cast<int>(val3);
    {
        int res =
            SWIG_ConvertFunctionPtr(argv[3], (void**)(&arg4), SWIGTYPE_p_f_int_int_double__void);
        if (!SWIG_IsOK(res)) {
            SWIG_exception_fail(SWIG_ArgError(res),
                                "in method '"
                                "gridDynObject_outputPartialDerivatives"
                                "', argument "
                                "4"
                                " of type '"
                                "void (*)(int,int,double)"
                                "'");
        }
    }
    res5 = SWIG_ConvertPtr(argv[4], SWIG_as_voidptrptr(&arg5), 0, 0);
    if (!SWIG_IsOK(res5)) {
        SWIG_exception_fail(SWIG_ArgError(res5),
                            "in method '"
                            "gridDynObject_outputPartialDerivatives"
                            "', argument "
                            "5"
                            " of type '"
                            "solverKey"
                            "'");
    }
    result = (griddyn_status)
        gridDynObject_outputPartialDerivatives(arg1, (double const*)arg2, arg3, arg4, arg5);
    _out = SWIG_From_int(static_cast<int>(result));
    if (_out) --resc, *resv++ = _out;
    return 0;
fail:
    return 1;
}

/* -------- TYPE CONVERSION AND EQUIVALENCE RULES (BEGIN) -------- */

static void* _p_doubleArrayTo_p_double(void* x, int* SWIGUNUSEDPARM(newmemory))
{
    return (void*)((double*)((doubleArray*)x));
}
static swig_type_info _swigt__p_char = {"_p_char", "char *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_double = {"_p_double", "double *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_doubleArray =
    {"_p_doubleArray", "doubleArray *", 0, 0, (void*)"griddyn.doubleArray", 0};
static swig_type_info _swigt__p_f_int_int_double__void =
    {"_p_f_int_int_double__void", "void (*)(int,int,double)", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_griddyn_status_enum = {
    "_p_griddyn_status_enum",
    "enum griddyn_status_enum *|griddyn_status_enum *",
    0,
    0,
    (void*)0,
    0};
static swig_type_info _swigt__p_int = {"_p_int", "int *|griddyn_status *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_p_char = {"_p_p_char", "char **", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_void = {
    "_p_void",
    "gridDynObject|gridDynVectorQuery|gridDynSimReference|gridDynEvent|void *|solverKey|gridDynSingleQuery",
    0,
    0,
    (void*)0,
    0};

static swig_type_info* swig_type_initial[] = {
    &_swigt__p_char,
    &_swigt__p_double,
    &_swigt__p_doubleArray,
    &_swigt__p_f_int_int_double__void,
    &_swigt__p_griddyn_status_enum,
    &_swigt__p_int,
    &_swigt__p_p_char,
    &_swigt__p_void,
};

static swig_cast_info _swigc__p_char[] = {{&_swigt__p_char, 0, 0, 0}, {0, 0, 0, 0}};
static swig_cast_info _swigc__p_double[] = {
    {&_swigt__p_doubleArray, _p_doubleArrayTo_p_double, 0, 0},
    {&_swigt__p_double, 0, 0, 0},
    {0, 0, 0, 0}};
static swig_cast_info _swigc__p_doubleArray[] = {{&_swigt__p_doubleArray, 0, 0, 0}, {0, 0, 0, 0}};
static swig_cast_info _swigc__p_f_int_int_double__void[] =
    {{&_swigt__p_f_int_int_double__void, 0, 0, 0}, {0, 0, 0, 0}};
static swig_cast_info _swigc__p_griddyn_status_enum[] = {{&_swigt__p_griddyn_status_enum, 0, 0, 0},
                                                         {0, 0, 0, 0}};
static swig_cast_info _swigc__p_int[] = {{&_swigt__p_int, 0, 0, 0}, {0, 0, 0, 0}};
static swig_cast_info _swigc__p_p_char[] = {{&_swigt__p_p_char, 0, 0, 0}, {0, 0, 0, 0}};
static swig_cast_info _swigc__p_void[] = {{&_swigt__p_void, 0, 0, 0}, {0, 0, 0, 0}};

static swig_cast_info* swig_cast_initial[] = {
    _swigc__p_char,
    _swigc__p_double,
    _swigc__p_doubleArray,
    _swigc__p_f_int_int_double__void,
    _swigc__p_griddyn_status_enum,
    _swigc__p_int,
    _swigc__p_p_char,
    _swigc__p_void,
};

/* -------- TYPE CONVERSION AND EQUIVALENCE RULES (END) -------- */

/* -----------------------------------------------------------------------------
 * Type initialization:
 * This problem is tough by the requirement that no dynamic
 * memory is used. Also, since swig_type_info structures store pointers to
 * swig_cast_info structures and swig_cast_info structures store pointers back
 * to swig_type_info structures, we need some lookup code at initialization.
 * The idea is that swig generates all the structures that are needed.
 * The runtime then collects these partially filled structures.
 * The SWIG_InitializeModule function takes these initial arrays out of
 * swig_module, and does all the lookup, filling in the swig_module.types
 * array with the correct data and linking the correct swig_cast_info
 * structures together.
 *
 * The generated swig_type_info structures are assigned statically to an initial
 * array. We just loop through that array, and handle each type individually.
 * First we lookup if this type has been already loaded, and if so, use the
 * loaded structure instead of the generated one. Then we have to fill in the
 * cast linked list. The cast data is initially stored in something like a
 * two-dimensional array. Each row corresponds to a type (there are the same
 * number of rows as there are in the swig_type_initial array). Each entry in
 * a column is one of the swig_cast_info structures for that type.
 * The cast_initial array is actually an array of arrays, because each row has
 * a variable number of columns. So to actually build the cast linked list,
 * we find the array of casts associated with the type, and loop through it
 * adding the casts to the list. The one last trick we need to do is making
 * sure the type pointer in the swig_cast_info struct is correct.
 *
 * First off, we lookup the cast->type name to see if it is already loaded.
 * There are three cases to handle:
 *  1) If the cast->type has already been loaded AND the type we are adding
 *     casting info to has not been loaded (it is in this module), THEN we
 *     replace the cast->type pointer with the type pointer that has already
 *     been loaded.
 *  2) If BOTH types (the one we are adding casting info to, and the
 *     cast->type) are loaded, THEN the cast info has already been loaded by
 *     the previous module so we just ignore it.
 *  3) Finally, if cast->type has not already been loaded, then we add that
 *     swig_cast_info to the linked list (because the cast->type) pointer will
 *     be correct.
 * ----------------------------------------------------------------------------- */

#ifdef __cplusplus
extern "C" {
#    if 0
} /* c-mode */
#    endif
#endif

#if 0
#    define SWIGRUNTIME_DEBUG
#endif

SWIGRUNTIME void SWIG_InitializeModule(void* clientdata)
{
    size_t i;
    swig_module_info *module_head, *iter;
    int init;

    /* check to see if the circular list has been setup, if not, set it up */
    if (swig_module.next == 0) {
        /* Initialize the swig_module */
        swig_module.type_initial = swig_type_initial;
        swig_module.cast_initial = swig_cast_initial;
        swig_module.next = &swig_module;
        init = 1;
    } else {
        init = 0;
    }

    /* Try and load any already created modules */
    module_head = SWIG_GetModule(clientdata);
    if (!module_head) {
        /* This is the first module loaded for this interpreter */
        /* so set the swig module into the interpreter */
        SWIG_SetModule(clientdata, &swig_module);
    } else {
        /* the interpreter has loaded a SWIG module, but has it loaded this one? */
        iter = module_head;
        do {
            if (iter == &swig_module) {
                /* Our module is already in the list, so there's nothing more to do. */
                return;
            }
            iter = iter->next;
        } while (iter != module_head);

        /* otherwise we must add our module into the list */
        swig_module.next = module_head->next;
        module_head->next = &swig_module;
    }

    /* When multiple interpreters are used, a module could have already been initialized in
     a different interpreter, but not yet have a pointer in this interpreter.
     In this case, we do not want to continue adding types... everything should be
     set up already */
    if (init == 0) return;

        /* Now work on filling in swig_module.types */
#ifdef SWIGRUNTIME_DEBUG
    printf("SWIG_InitializeModule: size %d\n", swig_module.size);
#endif
    for (i = 0; i < swig_module.size; ++i) {
        swig_type_info* type = 0;
        swig_type_info* ret;
        swig_cast_info* cast;

#ifdef SWIGRUNTIME_DEBUG
        printf("SWIG_InitializeModule: type %d %s\n", i, swig_module.type_initial[i]->name);
#endif

        /* if there is another module already loaded */
        if (swig_module.next != &swig_module) {
            type = SWIG_MangledTypeQueryModule(swig_module.next,
                                               &swig_module,
                                               swig_module.type_initial[i]->name);
        }
        if (type) {
            /* Overwrite clientdata field */
#ifdef SWIGRUNTIME_DEBUG
            printf("SWIG_InitializeModule: found type %s\n", type->name);
#endif
            if (swig_module.type_initial[i]->clientdata) {
                type->clientdata = swig_module.type_initial[i]->clientdata;
#ifdef SWIGRUNTIME_DEBUG
                printf("SWIG_InitializeModule: found and overwrite type %s \n", type->name);
#endif
            }
        } else {
            type = swig_module.type_initial[i];
        }

        /* Insert casting types */
        cast = swig_module.cast_initial[i];
        while (cast->type) {
            /* Don't need to add information already in the list */
            ret = 0;
#ifdef SWIGRUNTIME_DEBUG
            printf("SWIG_InitializeModule: look cast %s\n", cast->type->name);
#endif
            if (swig_module.next != &swig_module) {
                ret = SWIG_MangledTypeQueryModule(swig_module.next, &swig_module, cast->type->name);
#ifdef SWIGRUNTIME_DEBUG
                if (ret) printf("SWIG_InitializeModule: found cast %s\n", ret->name);
#endif
            }
            if (ret) {
                if (type == swig_module.type_initial[i]) {
#ifdef SWIGRUNTIME_DEBUG
                    printf("SWIG_InitializeModule: skip old type %s\n", ret->name);
#endif
                    cast->type = ret;
                    ret = 0;
                } else {
                    /* Check for casting already in the list */
                    swig_cast_info* ocast = SWIG_TypeCheck(ret->name, type);
#ifdef SWIGRUNTIME_DEBUG
                    if (ocast) printf("SWIG_InitializeModule: skip old cast %s\n", ret->name);
#endif
                    if (!ocast) ret = 0;
                }
            }

            if (!ret) {
#ifdef SWIGRUNTIME_DEBUG
                printf("SWIG_InitializeModule: adding cast %s\n", cast->type->name);
#endif
                if (type->cast) {
                    type->cast->prev = cast;
                    cast->next = type->cast;
                }
                type->cast = cast;
            }
            cast++;
        }
        /* Set entry in modules->types array equal to the type */
        swig_module.types[i] = type;
    }
    swig_module.types[i] = 0;

#ifdef SWIGRUNTIME_DEBUG
    printf("**** SWIG_InitializeModule: Cast List ******\n");
    for (i = 0; i < swig_module.size; ++i) {
        int j = 0;
        swig_cast_info* cast = swig_module.cast_initial[i];
        printf("SWIG_InitializeModule: type %d %s\n", i, swig_module.type_initial[i]->name);
        while (cast->type) {
            printf("SWIG_InitializeModule: cast type %s\n", cast->type->name);
            cast++;
            ++j;
        }
        printf("---- Total casts: %d\n", j);
    }
    printf("**** SWIG_InitializeModule: Cast List ******\n");
#endif
}

/* This function will propagate the clientdata field of type to
 * any new swig_type_info structures that have been added into the list
 * of equivalent types.  It is like calling
 * SWIG_TypeClientData(type, clientdata) a second time.
 */
SWIGRUNTIME void SWIG_PropagateClientData(void)
{
    size_t i;
    swig_cast_info* equiv;
    static int init_run = 0;

    if (init_run) return;
    init_run = 1;

    for (i = 0; i < swig_module.size; i++) {
        if (swig_module.types[i]->clientdata) {
            equiv = swig_module.types[i]->cast;
            while (equiv) {
                if (!equiv->converter) {
                    if (equiv->type && !equiv->type->clientdata)
                        SWIG_TypeClientData(equiv->type, swig_module.types[i]->clientdata);
                }
                equiv = equiv->next;
            }
        }
    }
}

#ifdef __cplusplus
#    if 0
{ /* c-mode */
#    endif
}
#endif

void SWIG_Matlab_LoadModule()
{
    /* Only call once */
    static int moduleIsLoaded = 0;
    if (moduleIsLoaded) return;
    moduleIsLoaded = 1;

    /* Prevent unloading this file until MATLAB exits */
    mexLock();

    /* Exit function (called when unloaded) */
    mexAtExit(SWIG_Matlab_ExitFcn);

    /* Load dependent modules and initialize */

    SWIG_InitializeModule(0);
}

SWIGINTERN const char* SwigConstantName(int con_id)
{
    switch (con_id) {
        case 0:
            return "griddyn_ok";
        case 1:
            return "griddyn_invalid_object";
        case 2:
            return "griddyn_invalid_parameter_value";
        case 3:
            return "griddyn_unknown_parameter";
        case 4:
            return "griddyn_add_failure";
        case 5:
            return "griddyn_remove_failure";
        case 6:
            return "griddyn_query_load_failure";
        case 7:
            return "griddyn_file_load_failure";
        case 8:
            return "griddyn_solve_error";
        case 9:
            return "griddyn_object_not_initialized";
        case 10:
            return "griddyn_invalid_function_call";
        case 11:
            return "griddyn_function_failure";
        case 12:
            return "GRIDDYN_PENDING";
        case 13:
            return "GRIDDYN_COMPLETE";
        default:
            return 0;
    }
}

SWIGINTERN int swigConstantName(int resc, mxArray* resv[], int argc, mxArray* argv[])
{
    if (argc != 1 || !mxIsDouble(*argv) || mxGetNumberOfElements(*argv) != 1) {
        SWIG_Error(
            SWIG_RuntimeError,
            "This mex file should only be called from inside the .m files generated by SWIG. The input should be the constant ID.");
        return 1;
    }
    if (resc != 1) {
        SWIG_Error(SWIG_RuntimeError, "The function should have one output.");
        return 1;
    }
    int con_id = (int)mxGetScalar(*argv);
    const char* s = SwigConstantName(con_id);
    if (s == 0) {
        SWIG_Error(SWIG_RuntimeError, "No such constant ID.");
        return 1;
    }
    *resv = mxCreateString(s);
    return 0;
}

SWIGINTERN int swigConstant(int SWIGUNUSEDPARM(resc), mxArray* resv[], int argc, mxArray* argv[])
{
    if (--argc < 0 || !mxIsDouble(*argv) || mxGetNumberOfElements(*argv) != 1) {
        SWIG_Error(
            SWIG_RuntimeError,
            "This function should only be called from inside the .m files generated by SWIG. First input should be the constant ID .");
        return 1;
    }
    int con_id = (int)mxGetScalar(*argv++);
    switch (con_id) {
        case 0:
            *resv = SWIG_Matlab_SetConstant(module_ns,
                                            "griddyn_ok",
                                            SWIG_From_int(static_cast<int>(griddyn_ok)));
            ;
            break;
        case 1:
            *resv =
                SWIG_Matlab_SetConstant(module_ns,
                                        "griddyn_invalid_object",
                                        SWIG_From_int(static_cast<int>(griddyn_invalid_object)));
            ;
            break;
        case 2:
            *resv = SWIG_Matlab_SetConstant(module_ns,
                                            "griddyn_invalid_parameter_value",
                                            SWIG_From_int(
                                                static_cast<int>(griddyn_invalid_parameter_value)));
            ;
            break;
        case 3:
            *resv =
                SWIG_Matlab_SetConstant(module_ns,
                                        "griddyn_unknown_parameter",
                                        SWIG_From_int(static_cast<int>(griddyn_unknown_parameter)));
            ;
            break;
        case 4:
            *resv = SWIG_Matlab_SetConstant(module_ns,
                                            "griddyn_add_failure",
                                            SWIG_From_int(static_cast<int>(griddyn_add_failure)));
            ;
            break;
        case 5:
            *resv =
                SWIG_Matlab_SetConstant(module_ns,
                                        "griddyn_remove_failure",
                                        SWIG_From_int(static_cast<int>(griddyn_remove_failure)));
            ;
            break;
        case 6:
            *resv = SWIG_Matlab_SetConstant(module_ns,
                                            "griddyn_query_load_failure",
                                            SWIG_From_int(
                                                static_cast<int>(griddyn_query_load_failure)));
            ;
            break;
        case 7:
            *resv =
                SWIG_Matlab_SetConstant(module_ns,
                                        "griddyn_file_load_failure",
                                        SWIG_From_int(static_cast<int>(griddyn_file_load_failure)));
            ;
            break;
        case 8:
            *resv = SWIG_Matlab_SetConstant(module_ns,
                                            "griddyn_solve_error",
                                            SWIG_From_int(static_cast<int>(griddyn_solve_error)));
            ;
            break;
        case 9:
            *resv = SWIG_Matlab_SetConstant(module_ns,
                                            "griddyn_object_not_initialized",
                                            SWIG_From_int(
                                                static_cast<int>(griddyn_object_not_initialized)));
            ;
            break;
        case 10:
            *resv = SWIG_Matlab_SetConstant(module_ns,
                                            "griddyn_invalid_function_call",
                                            SWIG_From_int(
                                                static_cast<int>(griddyn_invalid_function_call)));
            ;
            break;
        case 11:
            *resv =
                SWIG_Matlab_SetConstant(module_ns,
                                        "griddyn_function_failure",
                                        SWIG_From_int(static_cast<int>(griddyn_function_failure)));
            ;
            break;
        case 12:
            *resv = SWIG_Matlab_SetConstant(module_ns,
                                            "GRIDDYN_PENDING",
                                            SWIG_From_int(static_cast<int>((25))));
            ;
            break;
        case 13:
            *resv = SWIG_Matlab_SetConstant(module_ns,
                                            "GRIDDYN_COMPLETE",
                                            SWIG_From_int(static_cast<int>((30))));
            ;
            break;
        default:
            SWIG_Error(SWIG_RuntimeError, "No such constant.");
            return 1;
    }
    return 0;
}

SWIGINTERN const char* SwigFunctionName(int fcn_id)
{
    switch (fcn_id) {
        case 0:
            return "swigConstant";
        case 1:
            return "swigFunctionName";
        case 2:
            return "swigConstantName";
        case 3:
            return "swigThis";
        case 4:
            return "swigTouch";
        case 5:
            return "_wrap_new_doublep";
        case 6:
            return "_wrap_copy_doublep";
        case 7:
            return "_wrap_delete_doublep";
        case 8:
            return "_wrap_doublep_assign";
        case 9:
            return "_wrap_doublep_value";
        case 10:
            return "_wrap_new_charp";
        case 11:
            return "_wrap_copy_charp";
        case 12:
            return "_wrap_delete_charp";
        case 13:
            return "_wrap_charp_assign";
        case 14:
            return "_wrap_charp_value";
        case 15:
            return "new_doubleArray";
        case 16:
            return "delete_doubleArray";
        case 17:
            return "doubleArray_paren";
        case 18:
            return "doubleArray_paren_asgn";
        case 19:
            return "doubleArray_cast";
        case 20:
            return "doubleArray_frompointer";
        case 21:
            return "_wrap_gridDynObject_create";
        case 22:
            return "_wrap_gridDynObject_clone";
        case 23:
            return "_wrap_gridDynObject_free";
        case 24:
            return "_wrap_gridDynObject_add";
        case 25:
            return "_wrap_gridDynObject_remove";
        case 26:
            return "_wrap_gridDynObject_setString";
        case 27:
            return "_wrap_gridDynObject_setValue";
        case 28:
            return "_wrap_gridDynObject_setValueUnits";
        case 29:
            return "_wrap_gridDynObject_setFlag";
        case 30:
            return "_wrap_gridDynObject_getString";
        case 31:
            return "_wrap_gridDynObject_getValue";
        case 32:
            return "_wrap_gridDynObject_getValueUnits";
        case 33:
            return "_wrap_gridDynObject_getFlag";
        case 34:
            return "_wrap_gridDynObject_find";
        case 35:
            return "_wrap_gridDynObject_getSubObject";
        case 36:
            return "_wrap_gridDynObject_findByUserId";
        case 37:
            return "_wrap_gridDynObject_getParent";
        case 38:
            return "_wrap_gridDynObject_getType";
        case 39:
            return "_wrap_gridDynSimulation_create";
        case 40:
            return "_wrap_gridDynSimulation_free";
        case 41:
            return "_wrap_gridDynSimulation_initializeFromString";
        case 42:
            return "_wrap_gridDynSimulation_initializeFromArgs";
        case 43:
            return "_wrap_gridDynSimulation_loadfile";
        case 44:
            return "_wrap_gridDynSimulation_addCommand";
        case 45:
            return "_wrap_gridDynSimulation_powerflowInitialize";
        case 46:
            return "_wrap_gridDynSimulation_powerflow";
        case 47:
            return "_wrap_gridDynSimulation_dynamicInitialize";
        case 48:
            return "_wrap_gridDynSimulation_reset";
        case 49:
            return "_wrap_gridDynSimulation_getCurrentTime";
        case 50:
            return "_wrap_gridDynSimulation_run";
        case 51:
            return "_wrap_gridDynSimulation_runTo";
        case 52:
            return "_wrap_gridDynSimulation_Step";
        case 53:
            return "_wrap_gridDynSimulation_runAsync";
        case 54:
            return "_wrap_gridDynSimulation_runToAsync";
        case 55:
            return "_wrap_gridDynSimulation_StepAsync";
        case 56:
            return "_wrap_gridDynSimulation_getStatus";
        case 57:
            return "_wrap_getSimulationObject";
        case 58:
            return "_wrap_gridDynSimulation_getSolverKey";
        case 59:
            return "_wrap_gridDynSolverKey_free";
        case 60:
            return "_wrap_gridDynSimulation_stateSize";
        case 61:
            return "_wrap_gridDynSimulation_busCount";
        case 62:
            return "_wrap_gridDynSimulation_lineCount";
        case 63:
            return "_wrap_gridDynSimulation_getResults";
        case 64:
            return "_wrap_gridDynSimulation_guessState";
        case 65:
            return "_wrap_gridDynSimulation_setState";
        case 66:
            return "_wrap_gridDynSimulation_getStateVariableTypes";
        case 67:
            return "_wrap_gridDynSimulation_residual";
        case 68:
            return "_wrap_gridDynSimulation_derivative";
        case 69:
            return "_wrap_gridDynSimulation_algebraicUpdate";
        case 70:
            return "_wrap_gridDynSimulation_jacobian";
        case 71:
            return "_wrap_gridDynSingleQuery_create";
        case 72:
            return "_wrap_gridDynVectorQuery_create";
        case 73:
            return "_wrap_gridDynSingleQuery_free";
        case 74:
            return "_wrap_gridDynVectorQuery_free";
        case 75:
            return "_wrap_gridDynSingleQuery_run";
        case 76:
            return "_wrap_gridDynVectorQuery_run";
        case 77:
            return "_wrap_gridDynVectorQuery_append";
        case 78:
            return "_wrap_gridDynSingleQuery_update";
        case 79:
            return "_wrap_gridDynVectorQuery_update";
        case 80:
            return "_wrap_gridDynEvent_create";
        case 81:
            return "_wrap_gridDynEvent_free";
        case 82:
            return "_wrap_gridDynEvent_trigger";
        case 83:
            return "_wrap_gridDynEvent_schedule";
        case 84:
            return "_wrap_gridDynEvent_setValue";
        case 85:
            return "_wrap_gridDynEvent_setString";
        case 86:
            return "_wrap_gridDynEvent_setFlag";
        case 87:
            return "_wrap_gridDynEvent_setTarget";
        case 88:
            return "_wrap_gridDynObject_stateSize";
        case 89:
            return "_wrap_gridDynObject_guessState";
        case 90:
            return "_wrap_gridDynObject_setState";
        case 91:
            return "_wrap_gridDynObject_getStateVariableTypes";
        case 92:
            return "_wrap_gridDynObject_residual";
        case 93:
            return "_wrap_gridDynObject_derivative";
        case 94:
            return "_wrap_gridDynObject_algebraicUpdate";
        case 95:
            return "_wrap_gridDynObject_jacobian";
        case 96:
            return "_wrap_gridDynObject_ioPartialDerivatives";
        case 97:
            return "_wrap_gridDynObject_outputPartialDerivatives";
        default:
            return 0;
    }
}

SWIGINTERN int swigFunctionName(int resc, mxArray* resv[], int argc, mxArray* argv[])
{
    if (argc != 1 || !mxIsDouble(*argv) || mxGetNumberOfElements(*argv) != 1) {
        SWIG_Error(
            SWIG_RuntimeError,
            "This mex file should only be called from inside the .m files generated by SWIG. The input should be the function ID.");
        return 1;
    }
    if (resc != 1) {
        SWIG_Error(SWIG_RuntimeError, "The function should have one output.");
        return 1;
    }
    int fcn_id = (int)mxGetScalar(*argv);
    const char* s = SwigFunctionName(fcn_id);
    if (s == 0) {
        SWIG_Error(SWIG_RuntimeError, "No such function ID.");
        return 1;
    }
    *resv = mxCreateString(s);
    return 0;
}

SWIGINTERN int swigThis(int resc, mxArray* resv[], int argc, mxArray* argv[])
{
    if (argc != 1 || resc != 1) {
        SWIG_Error(SWIG_RuntimeError, "swigThis should have one input and one output.");
        return 1;
    }
    SwigPtr* swig_ptr = SWIG_Matlab_getSwigPtr(argv[0]);
    if (!swig_ptr) {
        SWIG_Error(SWIG_RuntimeError, "The argument should be a SWIG class.");
        return 1;
    }
    resv[0] = mxCreateNumericMatrix(1, 1, mxUINT64_CLASS, mxREAL);
    *(uint64_T*)mxGetData(resv[0]) = (uint64_T)swig_ptr->ptr;
    return 0;
}

SWIGINTERN int
    swigTouch(int resc, mxArray** SWIGUNUSEDPARM(resv), int argc, mxArray** SWIGUNUSEDPARM(argv))
{
    if (argc != 0 || resc != 0) {
        SWIG_Error(SWIG_RuntimeError, "swigTouch should have no inputs or outputs.");
        return 1;
    }
    return 0;
}

extern "C" void mexFunction(int resc, mxArray* resv[], int argc, const mxArray* argv[])
{
    /* Initialize module if first call */
    SWIG_Matlab_LoadModule();

    if (--argc < 0 || !mxIsDouble(*argv) || mxGetNumberOfElements(*argv) != 1)
        mexErrMsgTxt(
            "This mex file should only be called from inside the .m files generated by SWIG. First input should be the function ID .");
    int fcn_id = (int)mxGetScalar(*argv++);
    int flag = 0;
    switch (fcn_id) {
        case 0:
            flag = swigConstant(resc, resv, argc, (mxArray**)(argv));
            break;
        case 1:
            flag = swigFunctionName(resc, resv, argc, (mxArray**)(argv));
            break;
        case 2:
            flag = swigConstantName(resc, resv, argc, (mxArray**)(argv));
            break;
        case 3:
            flag = swigThis(resc, resv, argc, (mxArray**)(argv));
            break;
        case 4:
            flag = swigTouch(resc, resv, argc, (mxArray**)(argv));
            break;
        case 5:
            flag = _wrap_new_doublep(resc, resv, argc, (mxArray**)(argv));
            break;
        case 6:
            flag = _wrap_copy_doublep(resc, resv, argc, (mxArray**)(argv));
            break;
        case 7:
            flag = _wrap_delete_doublep(resc, resv, argc, (mxArray**)(argv));
            break;
        case 8:
            flag = _wrap_doublep_assign(resc, resv, argc, (mxArray**)(argv));
            break;
        case 9:
            flag = _wrap_doublep_value(resc, resv, argc, (mxArray**)(argv));
            break;
        case 10:
            flag = _wrap_new_charp(resc, resv, argc, (mxArray**)(argv));
            break;
        case 11:
            flag = _wrap_copy_charp(resc, resv, argc, (mxArray**)(argv));
            break;
        case 12:
            flag = _wrap_delete_charp(resc, resv, argc, (mxArray**)(argv));
            break;
        case 13:
            flag = _wrap_charp_assign(resc, resv, argc, (mxArray**)(argv));
            break;
        case 14:
            flag = _wrap_charp_value(resc, resv, argc, (mxArray**)(argv));
            break;
        case 15:
            flag = _wrap_new_doubleArray(resc, resv, argc, (mxArray**)(argv));
            break;
        case 16:
            flag = _wrap_delete_doubleArray(resc, resv, argc, (mxArray**)(argv));
            break;
        case 17:
            flag = _wrap_doubleArray_paren(resc, resv, argc, (mxArray**)(argv));
            break;
        case 18:
            flag = _wrap_doubleArray_paren_asgn(resc, resv, argc, (mxArray**)(argv));
            break;
        case 19:
            flag = _wrap_doubleArray_cast(resc, resv, argc, (mxArray**)(argv));
            break;
        case 20:
            flag = _wrap_doubleArray_frompointer(resc, resv, argc, (mxArray**)(argv));
            break;
        case 21:
            flag = _wrap_gridDynObject_create(resc, resv, argc, (mxArray**)(argv));
            break;
        case 22:
            flag = _wrap_gridDynObject_clone(resc, resv, argc, (mxArray**)(argv));
            break;
        case 23:
            flag = _wrap_gridDynObject_free(resc, resv, argc, (mxArray**)(argv));
            break;
        case 24:
            flag = _wrap_gridDynObject_add(resc, resv, argc, (mxArray**)(argv));
            break;
        case 25:
            flag = _wrap_gridDynObject_remove(resc, resv, argc, (mxArray**)(argv));
            break;
        case 26:
            flag = _wrap_gridDynObject_setString(resc, resv, argc, (mxArray**)(argv));
            break;
        case 27:
            flag = _wrap_gridDynObject_setValue(resc, resv, argc, (mxArray**)(argv));
            break;
        case 28:
            flag = _wrap_gridDynObject_setValueUnits(resc, resv, argc, (mxArray**)(argv));
            break;
        case 29:
            flag = _wrap_gridDynObject_setFlag(resc, resv, argc, (mxArray**)(argv));
            break;
        case 30:
            flag = _wrap_gridDynObject_getString(resc, resv, argc, (mxArray**)(argv));
            break;
        case 31:
            flag = _wrap_gridDynObject_getValue(resc, resv, argc, (mxArray**)(argv));
            break;
        case 32:
            flag = _wrap_gridDynObject_getValueUnits(resc, resv, argc, (mxArray**)(argv));
            break;
        case 33:
            flag = _wrap_gridDynObject_getFlag(resc, resv, argc, (mxArray**)(argv));
            break;
        case 34:
            flag = _wrap_gridDynObject_find(resc, resv, argc, (mxArray**)(argv));
            break;
        case 35:
            flag = _wrap_gridDynObject_getSubObject(resc, resv, argc, (mxArray**)(argv));
            break;
        case 36:
            flag = _wrap_gridDynObject_findByUserId(resc, resv, argc, (mxArray**)(argv));
            break;
        case 37:
            flag = _wrap_gridDynObject_getParent(resc, resv, argc, (mxArray**)(argv));
            break;
        case 38:
            flag = _wrap_gridDynObject_getType(resc, resv, argc, (mxArray**)(argv));
            break;
        case 39:
            flag = _wrap_gridDynSimulation_create(resc, resv, argc, (mxArray**)(argv));
            break;
        case 40:
            flag = _wrap_gridDynSimulation_free(resc, resv, argc, (mxArray**)(argv));
            break;
        case 41:
            flag =
                _wrap_gridDynSimulation_initializeFromString(resc, resv, argc, (mxArray**)(argv));
            break;
        case 42:
            flag = _wrap_gridDynSimulation_initializeFromArgs(resc, resv, argc, (mxArray**)(argv));
            break;
        case 43:
            flag = _wrap_gridDynSimulation_loadfile(resc, resv, argc, (mxArray**)(argv));
            break;
        case 44:
            flag = _wrap_gridDynSimulation_addCommand(resc, resv, argc, (mxArray**)(argv));
            break;
        case 45:
            flag = _wrap_gridDynSimulation_powerflowInitialize(resc, resv, argc, (mxArray**)(argv));
            break;
        case 46:
            flag = _wrap_gridDynSimulation_powerflow(resc, resv, argc, (mxArray**)(argv));
            break;
        case 47:
            flag = _wrap_gridDynSimulation_dynamicInitialize(resc, resv, argc, (mxArray**)(argv));
            break;
        case 48:
            flag = _wrap_gridDynSimulation_reset(resc, resv, argc, (mxArray**)(argv));
            break;
        case 49:
            flag = _wrap_gridDynSimulation_getCurrentTime(resc, resv, argc, (mxArray**)(argv));
            break;
        case 50:
            flag = _wrap_gridDynSimulation_run(resc, resv, argc, (mxArray**)(argv));
            break;
        case 51:
            flag = _wrap_gridDynSimulation_runTo(resc, resv, argc, (mxArray**)(argv));
            break;
        case 52:
            flag = _wrap_gridDynSimulation_Step(resc, resv, argc, (mxArray**)(argv));
            break;
        case 53:
            flag = _wrap_gridDynSimulation_runAsync(resc, resv, argc, (mxArray**)(argv));
            break;
        case 54:
            flag = _wrap_gridDynSimulation_runToAsync(resc, resv, argc, (mxArray**)(argv));
            break;
        case 55:
            flag = _wrap_gridDynSimulation_StepAsync(resc, resv, argc, (mxArray**)(argv));
            break;
        case 56:
            flag = _wrap_gridDynSimulation_getStatus(resc, resv, argc, (mxArray**)(argv));
            break;
        case 57:
            flag = _wrap_getSimulationObject(resc, resv, argc, (mxArray**)(argv));
            break;
        case 58:
            flag = _wrap_gridDynSimulation_getSolverKey(resc, resv, argc, (mxArray**)(argv));
            break;
        case 59:
            flag = _wrap_gridDynSolverKey_free(resc, resv, argc, (mxArray**)(argv));
            break;
        case 60:
            flag = _wrap_gridDynSimulation_stateSize(resc, resv, argc, (mxArray**)(argv));
            break;
        case 61:
            flag = _wrap_gridDynSimulation_busCount(resc, resv, argc, (mxArray**)(argv));
            break;
        case 62:
            flag = _wrap_gridDynSimulation_lineCount(resc, resv, argc, (mxArray**)(argv));
            break;
        case 63:
            flag = _wrap_gridDynSimulation_getResults(resc, resv, argc, (mxArray**)(argv));
            break;
        case 64:
            flag = _wrap_gridDynSimulation_guessState(resc, resv, argc, (mxArray**)(argv));
            break;
        case 65:
            flag = _wrap_gridDynSimulation_setState(resc, resv, argc, (mxArray**)(argv));
            break;
        case 66:
            flag =
                _wrap_gridDynSimulation_getStateVariableTypes(resc, resv, argc, (mxArray**)(argv));
            break;
        case 67:
            flag = _wrap_gridDynSimulation_residual(resc, resv, argc, (mxArray**)(argv));
            break;
        case 68:
            flag = _wrap_gridDynSimulation_derivative(resc, resv, argc, (mxArray**)(argv));
            break;
        case 69:
            flag = _wrap_gridDynSimulation_algebraicUpdate(resc, resv, argc, (mxArray**)(argv));
            break;
        case 70:
            flag = _wrap_gridDynSimulation_jacobian(resc, resv, argc, (mxArray**)(argv));
            break;
        case 71:
            flag = _wrap_gridDynSingleQuery_create(resc, resv, argc, (mxArray**)(argv));
            break;
        case 72:
            flag = _wrap_gridDynVectorQuery_create(resc, resv, argc, (mxArray**)(argv));
            break;
        case 73:
            flag = _wrap_gridDynSingleQuery_free(resc, resv, argc, (mxArray**)(argv));
            break;
        case 74:
            flag = _wrap_gridDynVectorQuery_free(resc, resv, argc, (mxArray**)(argv));
            break;
        case 75:
            flag = _wrap_gridDynSingleQuery_run(resc, resv, argc, (mxArray**)(argv));
            break;
        case 76:
            flag = _wrap_gridDynVectorQuery_run(resc, resv, argc, (mxArray**)(argv));
            break;
        case 77:
            flag = _wrap_gridDynVectorQuery_append(resc, resv, argc, (mxArray**)(argv));
            break;
        case 78:
            flag = _wrap_gridDynSingleQuery_update(resc, resv, argc, (mxArray**)(argv));
            break;
        case 79:
            flag = _wrap_gridDynVectorQuery_update(resc, resv, argc, (mxArray**)(argv));
            break;
        case 80:
            flag = _wrap_gridDynEvent_create(resc, resv, argc, (mxArray**)(argv));
            break;
        case 81:
            flag = _wrap_gridDynEvent_free(resc, resv, argc, (mxArray**)(argv));
            break;
        case 82:
            flag = _wrap_gridDynEvent_trigger(resc, resv, argc, (mxArray**)(argv));
            break;
        case 83:
            flag = _wrap_gridDynEvent_schedule(resc, resv, argc, (mxArray**)(argv));
            break;
        case 84:
            flag = _wrap_gridDynEvent_setValue(resc, resv, argc, (mxArray**)(argv));
            break;
        case 85:
            flag = _wrap_gridDynEvent_setString(resc, resv, argc, (mxArray**)(argv));
            break;
        case 86:
            flag = _wrap_gridDynEvent_setFlag(resc, resv, argc, (mxArray**)(argv));
            break;
        case 87:
            flag = _wrap_gridDynEvent_setTarget(resc, resv, argc, (mxArray**)(argv));
            break;
        case 88:
            flag = _wrap_gridDynObject_stateSize(resc, resv, argc, (mxArray**)(argv));
            break;
        case 89:
            flag = _wrap_gridDynObject_guessState(resc, resv, argc, (mxArray**)(argv));
            break;
        case 90:
            flag = _wrap_gridDynObject_setState(resc, resv, argc, (mxArray**)(argv));
            break;
        case 91:
            flag = _wrap_gridDynObject_getStateVariableTypes(resc, resv, argc, (mxArray**)(argv));
            break;
        case 92:
            flag = _wrap_gridDynObject_residual(resc, resv, argc, (mxArray**)(argv));
            break;
        case 93:
            flag = _wrap_gridDynObject_derivative(resc, resv, argc, (mxArray**)(argv));
            break;
        case 94:
            flag = _wrap_gridDynObject_algebraicUpdate(resc, resv, argc, (mxArray**)(argv));
            break;
        case 95:
            flag = _wrap_gridDynObject_jacobian(resc, resv, argc, (mxArray**)(argv));
            break;
        case 96:
            flag = _wrap_gridDynObject_ioPartialDerivatives(resc, resv, argc, (mxArray**)(argv));
            break;
        case 97:
            flag =
                _wrap_gridDynObject_outputPartialDerivatives(resc, resv, argc, (mxArray**)(argv));
            break;
        default:
            flag = 1, SWIG_Error(SWIG_RuntimeError, "No function id %d.", fcn_id);
    }
    if (flag) {
        mexErrMsgIdAndTxt(SWIG_ErrorType(SWIG_lasterror_code), SWIG_lasterror_msg);
    }
}
